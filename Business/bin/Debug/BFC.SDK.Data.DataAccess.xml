<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BFC.SDK.Data.DataAccess</name>
    </assembly>
    <members>
        <member name="T:BFC.SDK.Data.DataAccess.DataAccess">
            <summary>
            
            </summary>
        </member>
        <member name="E:BFC.SDK.Data.DataAccess.DataAccess.Opened">
            <summary>
            表示连接已打开的事件。
            </summary>
        </member>
        <member name="E:BFC.SDK.Data.DataAccess.DataAccess.Closing">
            <summary>
            表示连接正在关闭的事件。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.OnOpened(System.Object,System.EventArgs)">
            <summary>
            引发连接已打开事件。
            </summary>
            <param name="sender"></param>
            <param name="arg"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.OnClosing(System.Object,System.EventArgs)">
            <summary>
            引发连接正在关闭的事件。
            </summary>
            <param name="sender"></param>
            <param name="arg"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.#ctor(System.Data.IDbConnection,System.Boolean)">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="connectionString">指定连接字符串。必须为有效的连接字符串，不能为空字符串或 null。</param>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.ConnectionInstance">
            <summary>
            获取当前数据库连接实例。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.CreateConnectionInstance">
            <summary>
            创建一个连接实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillImpl(System.Data.DataTable,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillImpl(System.Data.DataSet,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.CreateCommandInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetDataParameterInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetDataParameterInstance(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="paramName"></param>
            <param name="dbTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetDataParameterInstance(System.String,System.String,System.Int32)">
            <summary>
            创建指定名称的参数，并且指定大小。
            如果底层的数据库类型不支持将忽略 size 。
            </summary>
            <param name="paramName">参数名称。</param>
            <param name="dbTypeString">对应的数据库类型的参数类型名称。如：varchar，如果为空则使用默认值。</param>
            <param name="size">指定参数大小，如果底层的数据库类型不支持将忽略 size 。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetDataParameterInstance(System.String)">
            <summary>
            通过指定参数名称，创建 IDataParameter 实例。
            </summary>
            <param name="paramName">参数名称。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetDataParameterInstance(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            通过指定参数名称，参数值，参数传递方向创建 IDataParameter 实例。
            </summary>
            <param name="paramName">参数名称。</param>
            <param name="paramValue">参数值。</param>
            <param name="direction">参数传递方向。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.CreateDataAdapterInstance">
            <summary>
            取得 IDataAdapter 对象实例。
            </summary>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.ParameterPrefixStringInSql">
            <summary>
            获取或设置在SQL语句中的变量名前缀字符。如“@”。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.EncodeFieldEntityName(System.String)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.EncodeTableEntityName(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.EncodeFieldName(System.String)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.EncodeTableName(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.BatchExecuteSqlSeparator">
            <summary>
            多个SQL语句之间的分隔符号，如“;\r\n”。
            派生类可以根据不同的数据库类型重写该属性返回值。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.BatchExecuteSqlBeginString">
            <summary>
            批量执行SQL语句时，包含语句块的开始字符，如 “Begin\r\n” 等。
            派生类可以根据不同的数据库类型重写该属性返回值。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.BatchExecuteSqlEndString">
            <summary>
            批量执行SQL语句时，包含语句块的结束字符，如 “END;” 等。
            派生类可以根据不同的数据库类型重写该属性返回值。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.TrueValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.FalseValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.LikeString">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.DebugSql(System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="log">执行的SQL语句。</param>
            <param name="parameters">执行SQL语句参数信息。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.WriteException(System.Exception,System.String,System.Data.IDataParameter[])">
            <summary>
            将引发的异常和引发该异常所执行的SQL命令写入系统日志中。
            </summary>
            <param name="ex">引发的异常。不允许为空。</param>
            <param name="sql">要写入系统日志中的SQL命令。可以为空。如果该参数为空，则后面的 parameters 参数则忽略，不会写入日志。</param>
            <param name="parameters">执行SQL语句的参数。参数信息将也会写入日志。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.CheckConnection(System.Data.IDbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.ParamPrefixFullString">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetPrimaryKeyInfoByAttribute(System.Reflection.PropertyInfo[])">
            <summary>
            从属性数组中根据定义的 DataModelAttribute 提取主键字段名。
            </summary>
            <param name="properties">要提取主键字段信息的属性对象数组。</param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.TransactionInstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.CheckConnection">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.CheckConnection(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetCommand(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.EnableTraceSqlOnError">
            <summary>
            获取或设置是否调试输出所有执行的 Sql 语句。
            默认值为 false。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.EnableDebugSql">
            <summary>
            获取或设置当运行过程中出现异常时是否在日志中输出最后执行的 Sql 语句。
            默认值为 false。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.ExecutingSqlCallback">
            <summary>
            获取或设置执行SQL语句的回调委托。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.IsTransaction">
            <summary>
            目前是否正处于事务中。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.ConnectionString">
            <summary>
            获取或设置数据库连接的字符串。
            当前连接为打开状态时不允许设置连接字符串。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.ConnectionTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.ReturnRowCountMaxPages">
            <summary>
            获取或设置执行填充页面数据方法时，返回总数据行数的方法，该值表示返回的数据总行数为截止到从前页面开始到第N个页面的末尾的数据的总行数，这样可以避免计算总数据行数而提高性能。
            <para>如果设置为小于或等于0的值，则始终返回总数据行数。</para>
            <para>如设置本属性值为10，每页显示数据行数为20，当前需要获取第2页，则返回值至多不超过 220 【(2+10-1)*20】 行。</para>
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.BFC#SDK#Data#DataAccess#IDataAccess#Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.Disposed">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.CommandTimeOut">
            <summary>
             获取或设置在终止执行命令的尝试并生成错误之前的等待时间(秒)。 
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.State">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.ParameterPrefixInSql">
            <summary>
            获取在SQL语句中所带参数的前缀。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetSchema">
            <summary>
            返回此当前连接的数据源的架构信息。
            </summary>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetSchema(System.String)">
            <summary>
            使用指定的架构名称字符串返回当前连接的数据源的架构信息。
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetSchema(System.String,System.String[])">
            <summary>
            使用指定的架构名称字符串和指定的限制值字符串数组，返回当前连接的数据源的架构信息。
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillTableSchema(System.Data.DataSet,System.Data.SchemaType,System.String)">
            <summary>
            将名为“Table”的 System.Data.DataTable 添加到指定的 System.Data.DataSet 中，
            并根据指定的 System.Data.SchemaType 配置架构以匹配数据源中的架构。
            </summary>
            <param name="dataSet">要用数据源中的架构填充的 System.Data.DataSet。</param>
            <param name="schemaType">System.Data.SchemaType 值之一。</param>
            <param name="tableName">要取得架构信息的表名称。</param>
            <returns>System.Data.DataTable 对象的数组，这些对象包含从数据源返回的架构信息。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Close">
            <summary>
            关闭当前连接
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.BeginTransaction">
            <summary>
            开启一个新事务。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开启一个新事务。
            </summary>
            <param name="isolationlevel" >
            指定该事务的事务级别。
            </param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.CommitTransaction">
            <summary>
            提交数据库事务。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.RollbackTransaction">
            <summary>
             从挂起状态回滚事务。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteScalar(System.String,System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues"></param>
            <returns>查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteScalar(System.String,System.Data.IDataParameter[])">
            <summary>
             执行查询，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行。  
            </summary>
            <param name="selectSql"></param>
            <param name="commandParameters"></param>
            <returns>结果集中第一行的第一列或空引用（如果结果集为空）。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteScalarImpl(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteScalarBySP(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteScalarBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            通过执行存储过程填充 DataTable 对象。
            </summary>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteDataReader(System.String,System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues"></param>
            <returns>查询到的 DataReader。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteDataReader(System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="selectSql"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteDataReaderImpl(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteDataReaderBySP(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteDataReaderBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行。
            </summary>
            <param name="nonQuerySql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues"></param>
            <returns>影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteNonQuery(System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="nonQuerySql"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteNonQueryBySP(System.String,System.Object[])">
            <summary>
            执行存储过程。
            </summary>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteNonQueryBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            执行存储过程。
            </summary>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteNonQueryImpl(System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteDataTable(System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>返回查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteDataTable(System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="commandParameters">IDataParameter 数组。</param>
            <returns>返回查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteDataTableBySP(System.String,System.Object[])">
            <summary>
            通过执行存储过程填充 DataTable 对象。
            </summary>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="parameterNameAndValues"></param>
            <returns>返回查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteDataTableBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            通过执行存储过程填充 DataTable 对象。
            </summary>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues"></param>
            <returns>查询到的 DataSet。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteDataSet(System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="commandParameters"></param>
            <returns>查询到的 DataSet。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteDataSetBySP(System.String,System.Object[])">
            <summary>
            通过执行存储过程填充 DataSet 对象。
            </summary>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteDataSetBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            通过执行存储过程填充 DataSet 对象。
            </summary>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteQuery``1(System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues"></param>
            <typeparam name="T">行数据所属类型</typeparam>
            <returns>查询到的对象集合。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteQuery``1(System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="selectSql"></param>
            <typeparam name="T">行数据所属类型</typeparam>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteQuery(System.Type,System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="t"></param>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues"></param>
            <returns>查询到的对象集合。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteQuery(System.Type,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="selectSql"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteQueryBySP``1(System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="spName"></param>
            <typeparam name="T">行数据所属类型</typeparam>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteQueryBySP``1(System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的存储过程。
            </summary>
            <param name="spName"></param>
            <typeparam name="T">行数据所属类型</typeparam>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteQueryBySP(System.Type,System.String,System.Object[])">
            <summary>
            执行指定的存储过程。
            </summary>
            <param name="t"></param>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteQueryBySP(System.Type,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="t"></param>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ExecuteQueryImpl(System.Collections.IList,System.Type,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="resultList"></param>
            <param name="t"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.DataReaderToList(System.Collections.IList,System.Type,System.Data.IDataReader,System.Int32,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Decimal})">
            <summary>
            将 DataReader 对象中的数据导入到 IList 对象中。
            </summary>
            <param name="resultList">要填充数据的 IList 对象。</param>
            <param name="t">IList 中行对象类型。</param>
            <param name="reader">填充数据的数据源 DataReader 对象。</param>
            <param name="startIndex">开始填充数据的行索引号（从0开始计数）。</param>
            <param name="endIndex">填充数据的结束行索引号（从0开始计数）。如果为 null，则表示填充所有数据。</param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.DataReaderToList(System.Collections.IList,System.Type,System.Data.IDataReader,System.Int32,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Decimal},System.Int32)">
            <summary>
            将 DataReader 对象中的数据导入到 IList 对象中。
            </summary>
            <param name="resultList">要填充数据的 IList 对象。</param>
            <param name="t">IList 中行对象类型。</param>
            <param name="reader">填充数据的数据源 DataReader 对象。</param>
            <param name="startIndex">开始填充数据的行索引号（从0开始计数）。</param>
            <param name="endIndex">填充数据的结束行索引号（从0开始计数）。如果为 null，则表示填充所有数据。</param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <param name="returnRowCountMaxValue">返回数据总行数的最大值。用于提高性能不返回总数据行数。sumFields 参数有值时本参数无效。</param>
            <returns>IDataReader 对象中总共的数据行数和returnRowCountMaxValue参数的最小值。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Fill(System.Data.DataTable,System.String,System.Object[])">
            <summary>
            执行提供的参数 selectSql 并将数据填充至指定 DataTable 对象 。
            执行的 SQL 语句结果不存在于提供的 DataTable 中的列会自动创建。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="selectSql">要检索数据的查询 SQL 语句。</param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Fill(System.Data.DataTable,System.String,System.Data.IDataParameter[])">
            <summary>
            执行提供的参数 selectSql 并将数据填充至指定 DataTable 对象 。
            执行的 SQL 语句结果不存在于提供的 DataTable 中的列会自动创建。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="selectSql">要检索数据的查询 SQL 语句。</param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillBySP(System.Data.DataTable,System.String,System.Object[])">
            <summary>
            通过执行存储过程填充 DataTable 对象。
            </summary>
            <param name="dataTable"></param>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillBySP(System.Data.DataTable,System.String,System.Data.IDataParameter[])">
            <summary>
            通过执行存储过程填充 DataTable 对象。
            </summary>
            <param name="dataTable"></param>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillBySP(System.Data.DataSet,System.String,System.Object[])">
            <summary>
            通过执行存储过程填充 DataSet 对象。
            </summary>
            <param name="dataSet"></param>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillBySP(System.Data.DataSet,System.String,System.Data.IDataParameter[])">
            <summary>
            通过执行存储过程填充 DataSet 对象。
            </summary>
            <param name="dataSet"></param>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillRowsByPrimaryKeysValue(System.Data.DataTable)">
            <summary>
            根据提供的 DataTable 对象的主键值作为条件检索数据填充非主键字段。
            </summary>
            <param name="dataTable"></param>
            <returns>实际填充的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Load(System.Data.DataTable)">
            <summary>
            根据提供的参数 dataTable ，从参数中提取查询的表名及字段名，并从数据库中检索数据填充到该 dataTable 。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Load(System.Data.DataTable,System.String)">
            <summary>
            根据提供的参数 dataTable ，从参数中提取查询的表名及字段名，并从数据库中检索数据填充到该 dataTable 。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="conditionSql">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Load(System.Data.DataTable,System.String,System.String)">
            <summary>
            根据提供的参数 dataTable ，从参数中提取查询的表名及字段名，并从数据库中检索数据填充到该 dataTable 。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="conditionSql">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)，如果没有可以为空。</param>
            <param name="sort">查询时排序的规则(不带 Order By 关键字)，如果没有可以为空。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Load(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Load(System.Type,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="tableName"></param>
            <param name="conditionSql">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)，如果没有可以为空。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Load``1(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="conditionSql">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)，如果没有可以为空。</param>
            <param name="sort">查询时排序的规则(不带 Order By 关键字)，如果没有可以为空。</param>
            <typeparam name="T">行数据所属类型。</typeparam>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.LoadBySql``1(System.String,System.Object[])">
            <summary>
            执行指定的SQL语句，返回第一行数据。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <typeparam name="T">行数据所属类型。</typeparam>
            <returns>返回执行查询的第一行数据。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Load(System.Type,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="tableName"></param>
            <param name="conditionSql">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)，如果没有可以为空。</param>
            <param name="sort">查询时排序的规则(不带 Order By 关键字)，如果没有可以为空。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Load(System.Collections.IList,System.Type,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="t"></param>
            <param name="tableName"></param>
            <param name="conditionSql">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)，如果没有可以为空。</param>
            <param name="sort">查询时排序的规则(不带 Order By 关键字)，如果没有可以为空。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.LoadDataModelListImp``1(System.String,System.Boolean,BFC.SDK.Data.SortOrder[],System.Object[])">
            <summary>
            检索指定的数据返回数据模型 IList 对象。
            适用于指定字段条件检索多条数据。
            </summary>
            <param name="tableName">检索数据的表名称。</param>
            <param name="isGetFirstData"></param>
            <param name="orderBy">排序。</param>
            <param name="fieldsAndValues">指示检索数据的字段名称和值。例如：字段1，值1，字段2，值2 ...</param>
            <returns>
            返回数据模型 IList 对象。
            如果没有检索到结果则返回零长度的 IList 对象。
            </returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.LoadDataModelList``1(System.String,System.Object[])">
            <summary>
            检索指定的数据返回数据模型 IList 对象。
            适用于指定字段条件检索多条数据。
            </summary>
            <param name="tableName">检索数据的表名称。</param>
            <param name="fieldsAndValues">指示检索数据的字段名称和值。例如：字段1，值1，字段2，值2 ...</param>
            <returns>
            返回数据模型 IList 对象。
            如果没有检索到结果则返回零长度的 IList 对象。
            </returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.LoadDataModelList``1(System.String,BFC.SDK.Data.SortOrder[],System.Object[])">
            <summary>
            检索指定的数据返回数据模型 IList 对象。
            适用于指定字段条件检索多条数据。
            </summary>
            <param name="tableName">检索数据的表名称。</param>
            <param name="fieldsAndValues">指示检索数据的字段名称和值。例如：字段1，值1，字段2，值2 ...</param>
            <param name="orderBy">排序。</param>
            <returns>
            返回数据模型 IList 对象。
            如果没有检索到结果则返回零长度的 IList 对象。
            </returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillDataTable(System.Data.DataTable,System.String,System.Object[])">
            <summary>
            检索指定的数据填充到指定的 DataTable 对象中。
            适用于指定字段条件检索多条数据。
            </summary>
            <param name="table">要填充数据的 DataTable 对象中，如果存在列信息，则只填充已存在的列，否则，填充数据库中指定名称表的所有字段。</param>
            <param name="tableName">检索数据的表名称。</param>
            <param name="fieldsAndValues">指示检索数据的字段名称和值。例如：字段1，值1，字段2，值2 ...</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillDataTable(System.Data.DataTable,System.String,BFC.SDK.Data.SortOrder[],System.Object[])">
            <summary>
            检索指定的数据填充到指定的 DataTable 对象中。
            适用于指定字段条件检索多条数据。
            </summary>
            <param name="table">要填充数据的 DataTable 对象中，如果存在列信息，则只填充已存在的列，否则，填充数据库中指定名称表的所有字段。</param>
            <param name="tableName">检索数据的表名称。</param>
            <param name="orderBy">排序。</param>
            <param name="fieldsAndValues">指示检索数据的字段名称和值。例如：字段1，值1，字段2，值2 ...</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.LoadDataModel``1(System.String,System.Object[])">
            <summary>
            检索指定的数据返回数据模型对象。
            适用于指定主键条件检索单条数据。
            </summary>
            <param name="tableName">检索数据的表名称。</param>
            <param name="fieldsAndValues">指示检索数据的字段名称和值。例如：字段1，值1，字段2，值2 ...</param>
            <returns>
            返回数据模型对象。
            如果检索的结果有多条记录，则返回第一条记录组装的数据对象。
            如果没有检索到结果则返回 null 。
            </returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillQuery``1(System.Collections.Generic.IList{``0},System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="list"></param>
            <typeparam name="T"></typeparam>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues"></param>
            <returns>查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillQuery(System.Collections.IList,System.Type,System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="list"></param>
            <param name="t"></param>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues"></param>
            <returns>查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillQuery``1(System.Collections.Generic.IList{``0},System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="list"></param>
            <typeparam name="T"></typeparam>
            <param name="selectSql"></param>L
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillQuery(System.Collections.IList,System.Type,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="t"></param>
            <param name="selectSql"></param>L
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillQueryBySP``1(System.Collections.Generic.IList{``0},System.String,System.Object[])">
             <summary>
             通过执行存储过程填充 List 对象。
             </summary>
            <param name="list"></param>
            <typeparam name="T"></typeparam>
             <param name="spName"></param>
             <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillQueryBySP(System.Collections.IList,System.Type,System.String,System.Object[])">
             <summary>
             通过执行存储过程填充 List 对象。
             </summary>
            <param name="list"></param>
            <param name="t"></param>
             <param name="spName"></param>
             <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillQueryBySP``1(System.Collections.Generic.IList{``0},System.String,System.Data.IDataParameter[])">
             <summary>
             通过执行存储过程填充 List 对象。
             </summary>
            <param name="list"></param>
            <typeparam name="T"></typeparam>
             <param name="spName"></param>
             <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillQueryBySP(System.Collections.IList,System.Type,System.String,System.Data.IDataParameter[])">
             <summary>
             通过执行存储过程填充 List 对象。
             </summary>
            <param name="list"></param>
            <param name="t"></param>
             <param name="spName"></param>
             <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillPaginalData(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="selectSql">要检索数据的查询 SQL 语句。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillPaginalData(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Data.IDataParameter[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="selectSql"></param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillPaginalData(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Decimal},System.Data.IDataParameter[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="selectSql"></param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <param name="commandParameters"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillPaginalData(System.Data.DataTable,System.String,BFC.SDK.Data.SortOrder[],System.Int32,System.Int32)">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="selectSqlOrTableName">查询语句或要查询的表名。</param>
            <param name="sortOrders">排序字段信息，不要带表名。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <returns>返回符合该查询条件的总共行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillPaginalData``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="selectSql">要检索数据的查询 SQL 语句。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillPaginalData``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Decimal},System.Object[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="selectSql">要检索数据的查询 SQL 语句。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues"></param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillPaginalData``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Data.IDataParameter[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="selectSql"></param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillPaginalData``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Decimal},System.Data.IDataParameter[])">
            <summary>
            向指定的 IList 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="selectSql"></param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters"></param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillPaginalDataBySP(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="spName"></param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillPaginalDataBySP(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <param name="spName">存储过程名称。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillPaginalDataBySP``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="spName"></param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillPaginalDataBySP``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="spName">存储过程名称。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillPaginalDataBySP``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Decimal},System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="spName">存储过程名称。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters"></param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillDataTable(System.Data.DataTable,System.Data.IDataReader,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Decimal})">
            <summary>
            根据 DataReader 填充表。
            如果 DataTable 对象没有表结构，则会根据 IDataReader 对象创建表结构（仅仅创建 ColumnName,DataType）。
            如果 DataTable 对象存在表结构，则仅仅会填充在 IDataReader 对象中存在的列。
            </summary>
            <param name="dataTable">要填充的 DataTable 对象。</param>
            <param name="reader">填充 DataTable 对象的数据源。</param>
            <param name="pageSize">每页数据的行数。</param>
            <param name="curPageNum">当前需要填充的页码（从1开始）。</param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <returns>IDataReader 对象中总共的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.FillDataTable(System.Data.DataTable,System.Data.IDataReader,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Decimal},System.Int32)">
            <summary>
            根据 DataReader 填充表。
            如果 DataTable 对象没有表结构，则会根据 IDataReader 对象创建表结构（仅仅创建 ColumnName,DataType）。
            如果 DataTable 对象存在表结构，则仅仅会填充在 IDataReader 对象中存在的列。
            </summary>
            <param name="dataTable">要填充的 DataTable 对象。</param>
            <param name="reader">填充 DataTable 对象的数据源。</param>
            <param name="pageSize">每页数据的行数。</param>
            <param name="curPageNum">当前需要填充的页码（从1开始）。</param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <param name="returnRowCountMaxValue">返回数据总行数的最大值。用于提高性能不返回总数据行数。sumFields 参数有值时本参数无效。</param>
            <returns>IDataReader 对象中总共的数据行数和returnRowCountMaxValue参数的最小值。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.InsertDataSet(System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.InsertDataTable(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.InsertDataTable(System.Data.DataTable,System.String)">
            <summary>
            将参数表对象的所有数据插入到数据库中。
            </summary>
            <param name="dataTable">要插入数据的 DataTable 对象。</param>
            <param name="tableName"></param>
            <returns>新增加的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.InsertDataRow(System.Data.DataRow)">
            <summary>
            将指定的 DataRow 对象数据插入到数据库中。
            </summary>
            <param name="insertRow">要插入数据的 DataRow 对象，表名为DataRow 对象所属的表名。</param>
            <returns>新增加的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.InsertDataRow(System.Data.DataRow,System.String)">
            <summary>
            将指定的 DataRow 对象数据插入到数据库中。
            </summary>
            <param name="insertRow">要插入数据的 DataRow 对象。</param>
            <param name="tableName">要插入数据的表名。</param>
            <returns>新增加的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Insert(System.Object,System.String)">
            <summary>
            将任意类型对象的数据插入到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList,IDataReader
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            如果提供的数据源是 IDataReader 对象,则请确保打开 System.Data.IDataReader 的数据库连接对象不能是当前连接对象。
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.InsertDataSet(System.Data.DataSet,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            
            </summary>
            <param name="fields">指定需要插入到数据库中的字段或者不要插入到数据库的字段。</param>
            <param name="dataSet"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.InsertDataTable(System.Data.DataTable,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <param name="fields">指定需要插入到数据库中的字段或者不要插入到数据库的字段。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.InsertDataTable(System.Data.DataTable,System.String,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将参数表对象的所有数据插入到数据库中。
            </summary>
            <param name="dataTable">要插入数据的 DataTable 对象。</param>
            <param name="tableName"></param>
            <param name="fields">指定需要插入到数据库中的字段或者不要插入到数据库的字段。</param>
            <returns>新增加的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.InsertDataRow(System.Data.DataRow,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将指定的 DataRow 对象数据插入到数据库中。
            </summary>
            <param name="insertRow">要插入数据的 DataRow 对象，表名为DataRow 对象所属的表名。</param>
            <param name="fields">指定需要插入到数据库中的字段或者不要插入到数据库的字段。</param>
            <returns>新增加的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.InsertDataRow(System.Data.DataRow,System.String,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将指定的 DataRow 对象数据插入到数据库中。
            </summary>
            <param name="insertRow">要插入数据的 DataRow 对象。</param>
            <param name="tableName">要插入数据的表名。</param>
            <param name="fields">指定需要插入到数据库中的字段或者不要插入到数据库的字段。</param>
            <returns>新增加的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.InsertDataReader(System.Data.IDataReader,System.String)">
            <summary>
            将 System.Data.IDataReader 对象插入数据库指定表中。
            打开 System.Data.IDataReader 的数据库连接对象不能是当前连接对象。
            </summary>
            <param name="reader">需要插入数据库的数据源。</param>
            <param name="tableName">插入数据库指定表名称。</param>
            <returns>返回总共插入数据库中的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.InsertDataReader(System.Data.IDataReader,System.String,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将 System.Data.IDataReader 对象插入数据库指定表中。
            打开 System.Data.IDataReader 的数据库连接对象不能是当前连接对象。
            </summary>
            <param name="reader">需要插入数据库的数据源。</param>
            <param name="tableName">插入数据库指定表名称。</param>
            <param name="fields">指字字段选项，可以为 null。</param>
            <returns>返回总共插入数据库中的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.BatchInsertDataReader(System.Data.IDataReader,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.Int32)">
            <summary>
            将 System.Data.IDataReader 对象插入数据库指定表中。
            </summary>
            <param name="reader">需要插入数据库的数据源。</param>
            <param name="tableName">插入数据库指定表名称。</param>
            <param name="fields">指字字段选项，可以为 null。</param>
            <param name="buffer">需要批量插入数据时，指定每次提交的数据行数。</param>
            <returns>返回总共插入数据库中的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.BatchInsert(System.Object,System.String)">
            <summary>
            批量插入数据。
            将任意类型对象的数据插入到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList,IDataReader
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            如果提供的数据源是 IDataReader 对象,则请确保打开 System.Data.IDataReader 的数据库连接对象不能是当前连接对象。
            </summary>
            <param name="dataModelObj">需要插入数据的存储对象。</param>
            <param name="tableName">数据库中对应的表名称。</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.BatchInsert(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.Int32)">
            <summary>
            批量插入数据。
            将任意类型对象的数据插入到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList,IDataReader
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            如果提供的数据源是 IDataReader 对象,则请确保打开 System.Data.IDataReader 的数据库连接对象不能是当前连接对象。
            </summary>
            <param name="dataModelObj">需要插入数据的存储对象。</param>
            <param name="tableName">数据库中对应的表名称。</param>
            <param name="fields">字段选项。</param>
            <param name="buffer">缓冲值，即每多少行提交执行一次SQL语句。</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Insert(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将任意类型对象的数据插入到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList,IDataReader
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            如果是 IDataReader,则请确保打开 System.Data.IDataReader 的数据库连接对象不能是当前连接对象。
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <param name="fields">指定需要插入到数据库中的字段或者不要插入到数据库的字段。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.UpdateDataSet(System.Data.DataSet,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.UpdateDataTable(System.Data.DataTable,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String[])">
            <summary>
            将参数表对象的所有数据更新到数据库中。
            </summary>
            <param name="dataTable">要更新数据的 DataTable 对象。</param>
            <param name="tableName"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="updateConditionFields">更新时的依据列名。该参数如果提供，则以它规定的列作为主键进行更新，否则，使用 dataTable 自身的主键进行更新。
            对于主键的更新条件，如果有原始值，则使用原始值作为更新条件，否则以当前值作为更新条件。
            </param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.UpdateDataTableByCondition(System.Data.DataTable,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String)">
            <summary>
            将参数表对象的所有数据更新到数据库中。
            </summary>
            <param name="dataTable">要更新数据的 DataTable 对象。</param>
            <param name="tableName"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="conditionSql">更新数据时的条件 SQL 语句（不带 WHERE 关键字）。</param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.UpdateDataRow(System.Data.DataRow,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String[])">
            <summary>
            将提供的参数行更新到数据库中。
            </summary>
            <param name="updateRow">要更新数据的 DataRow 对象。</param>
            <param name="tableName"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="updateConditionFields">更新时的依据列名。该参数如果提供，则以它规定的列作为主键进行更新，否则，使用 dataTable 自身的主键进行更新。
            对于主键的更新条件，如果有原始值，则使用原始值作为更新条件，否则以当前值作为更新条件。
            </param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.UpdateDataRowByCondition(System.Data.DataRow,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String)">
            <summary>
            将指定的 DataRow 对象数据更新到数据库中。
            </summary>
            <param name="updateRow">要更新数据的 DataRow 对象，表名为 DataRow 对象所属的表名。</param>
            <param name="tableName"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="conditionSql">更新数据时的条件 SQL 语句（不带 WHERE 关键字）</param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.BatchUpdate(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.Int32,System.String[])">
            <summary>
            批量更新数据。
            </summary>
            <param name="dataModelObj">需要更新数据的存储对象。</param>
            <param name="tableName">数据库中对应的表名称。</param>
            <param name="fields">字段选项。</param>
            <param name="buffer">缓冲值，即每多少行提交执行一次SQL语句。</param>
            <param name="primaryKeyFields"></param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.BatchUpdate(System.Object,System.String,System.String[])">
            <summary>
            以50行数据批量更新数据。
            </summary>
            <param name="dataModelObj">需要更新数据的存储对象。</param>
            <param name="tableName">数据库中对应的表名称。</param>
            <param name="primaryKeyFields">更新数据的主键字段。</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Update(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String[])">
            <summary>
            将任意类型对象的数据更新到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="primaryKeyFields"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.UpdateByCondition(System.Object,System.String,System.String)">
            <summary>
            将任意类型对象的数据更新到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <param name="conditionSql">更新数据时的条件 SQL 语句（不带 WHERE 关键字）。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.UpdateByCondition(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String)">
            <summary>
            将任意类型对象的数据更新到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="conditionSql">更新数据时的条件 SQL 语句（不带 WHERE 关键字）。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.UpdateDataSet(System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.UpdateDataTable(System.Data.DataTable,System.String,System.String[])">
            <summary>
            将参数表对象的所有数据更新到数据库中。
            </summary>
            <param name="dataTable">要更新数据的 DataTable 对象。</param>
            <param name="tableName"></param>
            <param name="updateConditionFields">更新时的依据列名。该参数如果提供，则以它规定的列作为主键进行更新，否则，使用 dataTable 自身的主键进行更新。
            对于主键的更新条件，如果有原始值，则使用原始值作为更新条件，否则以当前值作为更新条件。
            </param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.UpdateDataTableByCondition(System.Data.DataTable,System.String,System.String)">
            <summary>
            将参数表对象的所有数据更新到数据库中。
            </summary>
            <param name="dataTable">要更新数据的 DataTable 对象。</param>
            <param name="tableName"></param>
            <param name="conditionSql">更新数据时的条件 SQL 语句（不带 WHERE 关键字）。</param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.UpdateDataRow(System.Data.DataRow,System.String,System.String[])">
            <summary>
            将提供的参数行更新到数据库中。
            </summary>
            <param name="updateRow">要更新数据的 DataRow 对象。</param>
            <param name="tableName"></param>
            <param name="updateConditionFields">更新时的依据列名。该参数如果提供，则以它规定的列作为主键进行更新，否则，使用 dataTable 自身的主键进行更新。
            对于主键的更新条件，如果有原始值，则使用原始值作为更新条件，否则以当前值作为更新条件。
            </param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.UpdateDataRowByCondition(System.Data.DataRow,System.String,System.String)">
            <summary>
            将指定的 DataRow 对象数据更新到数据库中。
            </summary>
            <param name="updateRow">要更新数据的 DataRow 对象，表名为 DataRow 对象所属的表名。</param>
            <param name="tableName"></param>
            <param name="conditionSql">更新数据时的条件 SQL 语句（不带 WHERE 关键字）</param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Update(System.Object,System.String,System.String[])">
            <summary>
            将任意类型对象的数据更新到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <param name="primaryKeyFields">指定作为更新条件的主键信息，
            如果不指定本参数，则使用 DataTable 中指定的主键，或者 DataModel 中的 ModelUpdatableAttribute 指定的主键。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.DeleteDataSet(System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.DeleteDataTable(System.Data.DataTable,System.String,System.String[])">
            <summary>
            从数据库中与参数表对象同名表中删除指定的行。
            </summary>
            <param name="dataTable">包含值和主键的表，表中必须定义了主键，这些主键数据将作为删除数据的条件，如果没有定义主键，将返回一错误。</param>
            <param name="deleteConditionFields"></param>
            <param name="tableName"></param>
            <returns>删除的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.DeleteDataRow(System.Data.DataRow,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="row"></param>
            <param name="deleteConditionFields"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.DeleteByCondition(System.String,System.String)">
            <summary>
            从数据库中指定的表中删除符合指定条件数据。
            </summary>
            <param name="tableName">要删除数据的表名。</param>
            <param name="sqlCondition">删除数据的条件。</param>
            <returns>删除的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Delete(System.Object,System.String,System.String[])">
            <summary>
            将任意类型对象的数据从数据库中删除。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <param name="primaryKeyFields">指定作为删除数据的主键信息，如果不指定，则使用 DataTable 中定义的主键或 DataModel 中定义的 ModelUpdatableAttribute 指定的主键。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.EncodeLikeSqlValueString(System.String)">
            <summary>
            对 Like 查询用的字符串常量进行转义编码，仅仅将关键字（"[", "%", "_", "^"，"'"）进行转义编码，前后不加“'”和“%”。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.EndProcessStringSqlValueString(System.String)">
            <summary>
            最终处理SQL语句中的字符串常量。
            </summary>
            <param name="stringSqlValue"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetSqlValueString(System.Object)">
            <summary>
            根据参数取得数据类型，返回符合SQL语法的字符串。如：参数为字符串“value”，则返回“'value'”.
            当参数为DateTime数据类型时，返回的字符串取决于 GetDateTimeSQLString() 方法的实现。
            </summary>
            <param name="value">实际数据值。</param>
            <returns>符合SQL语法的字符串。如果无法转换则返回 null，例如二进制数组.</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetSqlValueString(System.Object,System.String)">
            <summary>
            根据参数取得数据类型，返回符合SQL语法的字符串。如：参数为字符串“value”，则返回“'value'”.
            当参数为DateTime数据类型时，返回的字符串取决于 GetDateTimeSQLString() 方法的实现。
            </summary>
            <param name="value">实际数据值。</param>
            <param name="dateFormat"></param>
            <returns>符合SQL语法的字符串。如果无法转换则返回 null，例如二进制数组.</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetLikeSqlValueString(System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
            根据参数取得数据类型，返回符合SQL语法的模糊检索的字符串。如：参数为字符串“value”，则视参数 isLeftLike 和 isRightLike 的值返回“'%value%'”，“'%value'”或者“'value%'”.
            当参数为DateTime数据类型时，返回的字符串取决于 GetDateTimeSQLString() 方法的实现。
            </summary>
            <param name="value">实际数据值。</param>
            <param name="isLeftLike">是否左边模糊查询</param>
            <param name="isRightLike">是否右边模糊查询</param>
            <param name="dateFormat"></param>
            <returns>符合SQL语法的字符串。如果无法转换则返回 '%%'，例如二进制数组.</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetLikeSqlValueString(System.Object)">
            <summary>
            根据参数取得数据类型，返回符合SQL语法的两边模糊检索的字符串。如：参数为字符串“value”，则返回“'%value%'”.
            当参数为DateTime数据类型时，返回的字符串取决于 GetDateTimeSQLString() 方法的实现。
            </summary>
            <param name="value">实际数据值。</param>
            <returns>符合SQL语法的字符串。如果无法转换则返回 '%%'，例如二进制数组.</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.GetDateTimeSqlString(System.DateTime,System.String)">
            <summary>
            
            </summary>
            <param name="date"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Dispose">
            <summary>
            Dispose managed resource。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccess.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.SqlTextCacheable">
            <summary>
            是否需要缓存已经执行过的SQL语句。
            如果设置为允许，请务必定时清除该缓存集合。
            当连接对象释放时，会自动清除该缓存集合。
            默认值为 false，即不缓存。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccess.SqlTextCacheList">
            <summary>
            缓存的SQL语句集合。
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.DataAccessFactory">
            <summary>
            数据访问工厂类。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DataAccess.DataAccessFactory._connectionStringRuntime">
            <summary>
            系统运行时临时设置的连接字符串。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessFactory.ConnectionStringRuntime">
            <summary>
            获取或设置系统运行时临时设置的连接字符串。
            如果设置了该属性，则创建数据库连接时优先使用本属性设置的连接字符串，而不使用配置文件中配置的连接字符串。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessFactory.SetDecryptKeyIV(System.Byte[],System.Byte[])">
            <summary>
            设置用于解密默认连接数据库字符串的 Key 和 IV。
            </summary>
            <param name="key"></param>
            <param name="iv"></param>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessFactory.ConnectionString">
            <summary>
            返回配置的默认的用于连接数据库有效的连接字符串。
            如果加密则返回的是解密之后的连接字符串。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessFactory.ConnectionStringEncrypted">
            <summary>
            获取配置文件中的连接字符串是否进行了加密。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessFactory.GetDataAccessInstance(System.String)">
            <summary>
            根据配置文件定义的 IDataAccess 类型，传递指定连接字符串创建一个 IDataAccess 的实例。
            </summary>
            <param name="connectionString">需要指定的连接字符串。
            注意：如果传递空字符串或 null 则创建一个默认关闭的连接实例，而不会使用配置文件中的连接字符串创建 IDataAccess 的实例。
            </param>
            <returns>IDataAccess 的实例。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessFactory.GetDataAccessInstance">
            <summary>
            根据配置文件中的默认数据库连接创建 IDataAccess 的实例。
            </summary>
            <returns>IDataAccess 的实例。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessFactory.GetDataAccessTemplateInstance">
            <summary>
            根据配置文件中的默认数据库连接配置创建 DataAccessTemplate 的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="F:BFC.SDK.Data.DataAccess.DataAccessFactory.connectionTypeCatch">
            <summary>
            所有带有命名标识的连接类型缓存。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessFactory.GetDataAccessInstanceByConnectionName(System.String,System.Byte[],System.Byte[])">
            <summary>
            根据配置文件中指定名称标识的数据库连接配置创建 IDataAccess 的实例。
            此类型的配置与默认的配置区别是增加了 ConnectionName 属性。
            </summary>
            <returns>IDataAccess 的实例。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessFactory.GetDataAccessFactoryConfig(System.String,System.Byte[],System.Byte[])">
            <summary>
            获取指定名称的数据库连接配置。
            如果获取默认的连接配置请传递 connectionName 参数为 null。
            </summary>
            <param name="connectionName"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.DataAccessFactoryConfig">
            <summary>
            存储已经命名的 DataAccessFactory 的配置。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessFactoryConfig.#ctor(System.String,System.Byte[],System.Byte[])">
            <summary>
            禁止外部实例化。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessFactoryConfig.ConnectionName">
            <summary>
            标识数据库连接名称的标识。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessFactoryConfig.ConnectionString">
            <summary>
            配置的数据库连接字符串，如果是加密则返回解密后的字符串。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessFactoryConfig.ConnectionStringEncrypted">
            <summary>
            连接字符串是否加密。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessFactoryConfig.DataAccessInstanceTypeString">
            <summary>
            数据库连接访问类的类型字符串表示 。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessFactoryConfig.DataAccessInstanceType">
            <summary>
            数据库连接访问类的类型实例 。
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.DataAccessTemplate">
            <summary>
            DataAccess 模板类。需要DataAccessTemplate.Configuration。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.InitializeByConfiguration">
            <summary>
            初始化 DataAccessTemplate 的相关静态数据。由 DataAccessConfiguration 调用。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplate.DataAccessAssembly">
            <summary>
            用于生成 DataAccess 实例的 Assembly 对象。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplate.TemplateConfiguration">
            <summary>
            DataAccessTemplateConfig 运行时的配置信息实例对象。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.#ctor(System.String)">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplate.IsTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplate.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplate.Disposed">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplate.ConnectionTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplate.CommandTimeOut">
            <summary>
             获取或设置在终止执行命令的尝试并生成错误之前的等待时间(秒)。 
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplate.State">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplate.ParameterPrefixInSql">
            <summary>
            获取在SQL语句中所带参数的前缀。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.GetDataParameterInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.GetDataParameterInstanceImp(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="paramName"></param>
            <param name="dbTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.BeginTransaction">
            <summary>
            开启一个新事务。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开启一个新事务。
            </summary>
            <param name="isolationlevel" >
            指定该事务的事务级别。
            </param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.CommitTransaction">
            <summary>
            提交数据库事务。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.RollbackTransaction">
            <summary>
             从挂起状态回滚事务。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteScalar(System.String,System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行。
            </summary>
            <param name="queryMappingName">需要执行的SQL语句在配置文件中定义的名称。</param>
            <param name="parameterNameAndValues"></param>
            <returns>查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteScalar(System.String,System.Data.IDataParameter[])">
            <summary>
             执行查询，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行。  
            </summary>
            <param name="queryMappingName">需要执行的SQL语句在配置文件中定义的名称。</param>
            <param name="commandParameters"></param>
            <returns>结果集中第一行的第一列或空引用（如果结果集为空）。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteScalarBySP(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteScalarBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            通过执行存储过程填充 DataTable 对象。
            </summary>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteDataReader(System.String,System.Object[])">
            <summary>
            执行查询，返回 DataReader 对象。
            </summary>
            <param name="queryMappingName">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues"></param>
            <returns>查询到的 DataReader。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteDataReader(System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="queryMappingName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteDataReaderBySP(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteDataReaderBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行。
            </summary>
            <param name="nonQueryMappingName">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues"></param>
            <returns>影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteNonQuery(System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="nonQueryMappingName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteNonQueryBySP(System.String,System.Object[])">
            <summary>
            执行存储过程。
            </summary>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteNonQueryBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            执行存储过程。
            </summary>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteDataTable(System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="queryMappingName">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues"></param>
            <returns>查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteDataTable(System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="queryMappingName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteDataTableBySP(System.String,System.Object[])">
            <summary>
            通过执行存储过程填充 DataTable 对象。
            </summary>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteDataTableBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            通过执行存储过程填充 DataTable 对象。
            </summary>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="queryMappingName">需要执行的SQL语句对应的映射名称。</param>
            <param name="parameterNameAndValues">参数名称以及参数值，格式为：参数1名称,参数1值，参数2名称,参数2值...</param>
            <returns>查询到的 DataSet。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteDataSet(System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="queryMappingName">需要执行的SQL语句对应的映射名称。</param>
            <param name="commandParameters"></param>
            <returns>查询到的 DataSet。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteDataSetBySP(System.String,System.Object[])">
            <summary>
            通过执行存储过程填充 DataSet 对象。
            </summary>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteDataSetBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            通过执行存储过程填充 DataSet 对象。
            </summary>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteQuery(System.Type,System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="t"></param>
            <param name="queryMappingName">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues"></param>
            <returns>查询到的对象集合。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteQuery``1(System.String,System.Object[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryMappingName"></param>
            <param name="parameterNameAndValues"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteQuery(System.Type,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="queryMappingName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteQuery``1(System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryMappingName"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteQueryBySP(System.Type,System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="t"></param>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteQueryBySP``1(System.String,System.Object[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteQueryBySP(System.Type,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="t"></param>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ExecuteQueryBySP``1(System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="spName"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Fill(System.Data.DataTable,System.String,System.Object[])">
            <summary>
            执行提供的参数 selectSql 并将数据填充至指定 DataTable 对象 。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="queryMappingName">要检索数据的查询 SQL 语句。</param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Fill(System.Data.DataTable,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <param name="queryMappingName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillBySP(System.Data.DataTable,System.String,System.Object[])">
            <summary>
            通过执行存储过程填充 DataTable 对象。
            </summary>
            <param name="dataTable"></param>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillBySP(System.Data.DataTable,System.String,System.Data.IDataParameter[])">
            <summary>
            通过执行存储过程填充 DataTable 对象。
            </summary>
            <param name="dataTable"></param>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillBySP(System.Data.DataSet,System.String,System.Object[])">
            <summary>
            通过执行存储过程填充 DataSet 对象。
            </summary>
            <param name="dataSet"></param>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillBySP(System.Data.DataSet,System.String,System.Data.IDataParameter[])">
            <summary>
            通过执行存储过程填充 DataSet 对象。
            </summary>
            <param name="dataSet"></param>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillRowsByPrimaryKeysValue(System.Data.DataTable)">
            <summary>
            根据提供的 DataTable 对象的主键值作为条件检索数据填充非主键字段。
            </summary>
            <param name="dataTable"></param>
            <returns>实际填充的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Load``1(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <param name="conditionMappingName"></param>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Load(System.Data.DataTable)">
            <summary>
            根据提供的参数 dataTable ，从参数中提取查询的表名及字段名，并从数据库中检索数据填充到该 dataTable 。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Load(System.Data.DataTable,System.String)">
            <summary>
            根据提供的参数 dataTable ，从参数中提取查询的表名及字段名，并从数据库中检索数据填充到该 dataTable 。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="conditionMappingName">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Load(System.Data.DataTable,System.String,System.String)">
            <summary>
            根据提供的参数 dataTable ，从参数中提取查询的表名及字段名，并从数据库中检索数据填充到该 dataTable 。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="conditionMappingName">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)，如果没有可以为空。</param>
            <param name="sort">查询时排序的规则(不带 Order By 关键字)，如果没有可以为空。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Load(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Load(System.Type,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="tableName"></param>
            <param name="conditionMappingName">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)，如果没有可以为空。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Load(System.Type,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="tableName"></param>
            <param name="conditionMappingName">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)，如果没有可以为空。</param>
            <param name="sort">查询时排序的规则(不带 Order By 关键字)，如果没有可以为空。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.LoadDataModel``1(System.String,System.Object[])">
            <summary>
            检索指定的数据返回数据模型对象。
            适用于指定主键条件检索单条数据。
            </summary>
            <param name="tableName">检索数据的表名称。</param>
            <param name="fieldsAndValues">指示检索数据的字段名称和值。例如：字段1，值1，字段2，值2 ...</param>
            <returns>
            返回数据模型对象。
            如果检索的结果有多条记录，则返回第一条记录组装的数据对象。
            如果没有检索到结果则返回 null 。
            </returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillQuery(System.Collections.IList,System.Type,System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="list"></param>
            <param name="t"></param>
            <param name="queryMappingName">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues"></param>
            <returns>查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillQuery``1(System.Collections.Generic.IList{``0},System.String,System.Object[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="queryMappingName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillQuery(System.Collections.IList,System.Type,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="t"></param>
            <param name="queryMappingName"></param>L
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillQuery``1(System.Collections.Generic.IList{``0},System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="queryMappingName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillQueryBySP(System.Collections.IList,System.Type,System.String,System.Object[])">
             <summary>
             通过执行存储过程填充 DataTable 对象。
             </summary>
            <param name="list"></param>
            <param name="t"></param>
             <param name="spName"></param>
             <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillQueryBySP``1(System.Collections.Generic.IList{``0},System.String,System.Object[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="spName"></param>
            <param name="parameterNameAndValues"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillQueryBySP(System.Collections.IList,System.Type,System.String,System.Data.IDataParameter[])">
             <summary>
             通过执行存储过程填充 DataTable 对象。
             </summary>
            <param name="list"></param>
            <param name="t"></param>
             <param name="spName"></param>
             <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillQueryBySP``1(System.Collections.Generic.IList{``0},System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="spName"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillPaginalData(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="queryMappingName">要检索数据的查询 SQL 语句。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillPaginalData(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Data.IDataParameter[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="queryMappingName"></param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillPaginalDataBySP(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="spName"></param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillPaginalDataBySP(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <param name="spName">存储过程名称。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillPaginalData``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="queryMappingName">要检索数据的查询 SQL 语句对应的定义映射名称。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillPaginalData``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Data.IDataParameter[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="queryMappingName">要检索数据的查询 SQL 语句对应的定义映射名称。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillPaginalDataBySP``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="spName"></param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.FillPaginalDataBySP``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="spName">存储过程名称。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.InsertDataSet(System.Data.DataSet,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <param name="fields">指定需要插入到数据库中的字段或者不要插入到数据库的字段。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.InsertDataTable(System.Data.DataTable,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <param name="fields">指定需要插入到数据库中的字段或者不要插入到数据库的字段。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.InsertDataTable(System.Data.DataTable,System.String,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将参数表对象的所有数据插入到数据库中。
            </summary>
            <param name="dataTable">要插入数据的 DataTable 对象。</param>
            <param name="tableName"></param>
            <param name="fields">指定需要插入到数据库中的字段或者不要插入到数据库的字段。</param>
            <returns>新增加的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.InsertDataRow(System.Data.DataRow,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将指定的 DataRow 对象数据插入到数据库中。
            </summary>
            <param name="insertRow">要插入数据的 DataRow 对象，表名为DataRow 对象所属的表名。</param>
            <param name="fields">指定需要插入到数据库中的字段或者不要插入到数据库的字段。</param>
            <returns>新增加的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.InsertDataRow(System.Data.DataRow,System.String,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将指定的 DataRow 对象数据插入到数据库中。
            </summary>
            <param name="insertRow">要插入数据的 DataRow 对象。</param>
            <param name="tableName">要插入数据的表名。</param>
            <param name="fields">指定需要插入到数据库中的字段或者不要插入到数据库的字段。</param>
            <returns>新增加的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Insert(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <param name="fields">指定需要插入到数据库中的字段或者不要插入到数据库的字段。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.InsertDataSet(System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.InsertDataTable(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.InsertDataTable(System.Data.DataTable,System.String)">
            <summary>
            将参数表对象的所有数据插入到数据库中。
            </summary>
            <param name="dataTable">要插入数据的 DataTable 对象。</param>
            <param name="tableName"></param>
            <returns>新增加的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.InsertDataReader(System.Data.IDataReader,System.String)">
            <summary>
            将 System.Data.IDataReader 对象插入数据库指定表中。
            </summary>
            <param name="reader">需要插入数据库的数据源。</param>
            <param name="tableName">插入数据库指定表名称。</param>
            <returns>返回总共插入数据库中的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.InsertDataReader(System.Data.IDataReader,System.String,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将 System.Data.IDataReader 对象插入数据库指定表中。
            </summary>
            <param name="reader">需要插入数据库的数据源。</param>
            <param name="tableName">插入数据库指定表名称。</param>
            <param name="fields">指字字段选项，可以为 null。</param>
            <returns>返回总共插入数据库中的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.InsertDataRow(System.Data.DataRow)">
            <summary>
            将指定的 DataRow 对象数据插入到数据库中。
            </summary>
            <param name="insertRow">要插入数据的 DataRow 对象，表名为DataRow 对象所属的表名。</param>
            <returns>新增加的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.InsertDataRow(System.Data.DataRow,System.String)">
            <summary>
            将指定的 DataRow 对象数据插入到数据库中。
            </summary>
            <param name="insertRow">要插入数据的 DataRow 对象。</param>
            <param name="tableName">要插入数据的表名。</param>
            <returns>新增加的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Insert(System.Object,System.String)">
            <summary>
            将任意类型对象的数据插入到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList,IDataReader
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.BatchInsert(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.Int32)">
            <summary>
            批量插入数据。
            将任意类型对象的数据插入到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList,IDataReader
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            </summary>
            <param name="dataModelObj">需要插入数据的存储对象。</param>
            <param name="tableName">数据库中对应的表名称。</param>
            <param name="fields">字段选项。</param>
            <param name="buffer">缓冲值，即每多少行提交执行一次SQL语句。</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.UpdateDataSet(System.Data.DataSet,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.UpdateDataTable(System.Data.DataTable,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String[])">
            <summary>
            将参数表对象的所有数据更新到数据库中。
            </summary>
            <param name="dataTable">要更新数据的 DataTable 对象。</param>
            <param name="tableName"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="updateConditionFields">更新时的依据列名。该参数如果提供，则以它规定的列作为主键进行更新，否则，使用 dataTable 自身的主键进行更新。
            对于主键的更新条件，如果有原始值，则使用原始值作为更新条件，否则以当前值作为更新条件。
            </param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.UpdateDataTableByCondition(System.Data.DataTable,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String)">
            <summary>
            将参数表对象的所有数据更新到数据库中。
            </summary>
            <param name="dataTable">要更新数据的 DataTable 对象。</param>
            <param name="tableName"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="conditionMappingName">更新数据时的条件 SQL 语句（不带 WHERE 关键字）定义名称。</param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.UpdateDataRow(System.Data.DataRow,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String[])">
            <summary>
            将提供的参数行更新到数据库中。
            </summary>
            <param name="updateRow">要更新数据的 DataRow 对象。</param>
            <param name="tableName"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="updateConditionFields">更新时的依据列名。该参数如果提供，则以它规定的列作为主键进行更新，否则，使用 dataTable 自身的主键进行更新。
            对于主键的更新条件，如果有原始值，则使用原始值作为更新条件，否则以当前值作为更新条件。
            </param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.UpdateDataRowByCondition(System.Data.DataRow,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String)">
            <summary>
            将指定的 DataRow 对象数据更新到数据库中。
            </summary>
            <param name="updateRow">要更新数据的 DataRow 对象，表名为 DataRow 对象所属的表名。</param>
            <param name="tableName"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="conditionMappingName">更新数据时的条件 SQL 语句（不带 WHERE 关键字）</param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Update(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String[])">
            <summary>
            
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="primaryKeyFields"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.UpdateDataSet(System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.UpdateDataTable(System.Data.DataTable,System.String,System.String[])">
            <summary>
            将参数表对象的所有数据更新到数据库中。
            </summary>
            <param name="dataTable">要更新数据的 DataTable 对象。</param>
            <param name="tableName"></param>
            <param name="updateConditionFields">更新时的依据列名。该参数如果提供，则以它规定的列作为主键进行更新，否则，使用 dataTable 自身的主键进行更新。
            对于主键的更新条件，如果有原始值，则使用原始值作为更新条件，否则以当前值作为更新条件。
            </param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.UpdateDataTableByCondition(System.Data.DataTable,System.String,System.String)">
            <summary>
            将参数表对象的所有数据更新到数据库中。
            </summary>
            <param name="dataTable">要更新数据的 DataTable 对象。</param>
            <param name="tableName"></param>
            <param name="conditionMappingName">更新数据时的条件 SQL 语句（不带 WHERE 关键字）定义名称。</param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.UpdateDataRow(System.Data.DataRow,System.String,System.String[])">
            <summary>
            将提供的参数行更新到数据库中。
            </summary>
            <param name="updateRow">要更新数据的 DataRow 对象。</param>
            <param name="tableName"></param>
            <param name="updateConditionFields">更新时的依据列名。该参数如果提供，则以它规定的列作为主键进行更新，否则，使用 dataTable 自身的主键进行更新。
            对于主键的更新条件，如果有原始值，则使用原始值作为更新条件，否则以当前值作为更新条件。
            </param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.UpdateDataRowByCondition(System.Data.DataRow,System.String,System.String)">
            <summary>
            将指定的 DataRow 对象数据更新到数据库中。
            </summary>
            <param name="updateRow">要更新数据的 DataRow 对象，表名为 DataRow 对象所属的表名。</param>
            <param name="tableName"></param>
            <param name="conditionMappingName">更新数据时的条件 SQL 语句（不带 WHERE 关键字）定义名称。</param>
            <returns>更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Update(System.Object,System.String,System.String[])">
            <summary>
            将任意类型对象的数据更新到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList,IDataReader
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <param name="primaryKeyFields"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.BatchUpdate(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.Int32,System.String[])">
            <summary>
            批量更新数据。
            </summary>
            <param name="dataModelObj">需要更新数据的存储对象。</param>
            <param name="tableName">数据库中对应的表名称。</param>
            <param name="fields">字段选项。</param>
            <param name="buffer">缓冲值，即每多少行提交执行一次SQL语句。</param>
            <param name="primaryKeyFields"></param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.DeleteDataSet(System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.DeleteDataTable(System.Data.DataTable,System.String,System.String[])">
            <summary>
            从数据库中与参数表对象同名表中删除指定的行。
            </summary>
            <param name="dataTable">包含值和主键的表，表中必须定义了主键，这些主键数据将作为删除数据的条件，如果没有定义主键，将返回一错误。</param>
            <param name="deleteConditionFields"></param>
            <param name="tableName"></param>
            <returns>删除的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.DeleteDataRow(System.Data.DataRow,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="row"></param>
            <param name="deleteConditionFields"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.DeleteByCondition(System.String,System.String)">
            <summary>
            从数据库中指定的表中删除符合指定条件数据。
            </summary>
            <param name="tableName">要删除数据的表名。</param>
            <param name="conditionMappingName">删除数据的条件。</param>
            <returns>删除的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Delete(System.Object,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <param name="primaryKeyFields"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.GetSqlValueString(System.Object)">
            <summary>
            根据参数取得数据类型，返回符合SQL语法的字符串。如：参数为字符串“value”，则返回“'value'”.
            当参数为DateTime数据类型时，返回的字符串取决于 GetDateTimeSQLString() 方法的实现。
            </summary>
            <param name="value">实际数据值。</param>
            <returns>符合SQL语法的字符串。如果无法转换则返回 null，例如二进制数组.</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.GetSqlValueString(System.Object,System.String)">
            <summary>
            根据参数取得数据类型，返回符合SQL语法的字符串。如：参数为字符串“value”，则返回“'value'”.
            当参数为DateTime数据类型时，返回的字符串取决于 GetDateTimeSQLString() 方法的实现。
            </summary>
            <param name="value">实际数据值。</param>
            <param name="dateFormat"></param>
            <returns>符合SQL语法的字符串。如果无法转换则返回 null，例如二进制数组.</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.GetLikeSqlValueString(System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
            根据参数取得数据类型，返回符合SQL语法的模糊检索的字符串。如：参数为字符串“value”，则视参数 isLeftLike 和 isRightLike 的值返回“'%value%'”，“'%value'”或者“'value%'”.
            当参数为DateTime数据类型时，返回的字符串取决于 GetDateTimeSQLString() 方法的实现。
            </summary>
            <param name="value">实际数据值。</param>
            <param name="isLeftLike">是否左边模糊查询</param>
            <param name="isRightLike">是否右边模糊查询</param>
            <param name="dateFormat"></param>
            <returns>符合SQL语法的字符串。如果无法转换则返回 '%%'，例如二进制数组.</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.GetLikeSqlValueString(System.Object)">
            <summary>
            根据参数取得数据类型，返回符合SQL语法的两边模糊检索的字符串。如：参数为字符串“value”，则返回“'%value%'”.
            当参数为DateTime数据类型时，返回的字符串取决于 GetDateTimeSQLString() 方法的实现。
            </summary>
            <param name="value">实际数据值。</param>
            <returns>符合SQL语法的字符串。如果无法转换则返回 '%%'，例如二进制数组.</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplate.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.DataAccessTemplateConfig">
            <summary>
            DataAccessTemplate 配置文件信息类。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplateConfig.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplateConfig.ConfigFile">
            <summary>
            取得配置文件完全路径。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplateConfig.Provider">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplateConfig.ProviderAssembly">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplateConfig.GetSqlQuery(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplateConfig.GetSqlNonQuery(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplateConfig.GetSqlCondition(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.DataAccessTemplateConfig.TypeDef">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataAccessTemplateConfig.TypeDef.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="assembly"></param>
            <param name="type"></param>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplateConfig.TypeDef.AssemblyString">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataAccessTemplateConfig.TypeDef.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.DataExportImportHelper">
            <summary>
            将数据导出再导入的工具类。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.#ctor">
            <summary>
            实例化 DataExportImportHelper 对象。
            配置文件默认为在当前应用程序域基础路径下的 fileExportHelper.config 。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.#ctor(System.String)">
            <summary>
            使用配置文件的配置节点名称作为参数实例化 DataExportImportHelper 对象。
            配置文件默认为在当前应用程序域基础路径下的 fileExportHelper.config 。
            </summary>
            <param name="configName">设置读取当前文件用的位于配文件中的配置节点名称。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.#ctor(System.String,System.String)">
            <summary>
            使用配置文件完整路径,相应的配置节点名称作为参数实例化 DataExportImportHelper 对象。
            </summary>
            <param name="ConfigurationFile">配置文件完整路径。</param>
            <param name="configName">读取当前文件用的位于配置文件中的配置节点名称。</param>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertTableName">
            <summary>
            获取或设置将数据保存插入的数据库表名称。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertRowsBuffer">
            <summary>
            将数据插入到数据库表时提交脚本的缓冲数量（行数）。
            必须大于或等于1.
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertAction">
            <summary>
            获取或设置将数据插入到数据库表时对表中已存在的数据处理。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,System.Data.DataTable)">
            <summary>
            将指定的  DataTable 对象中的数据保存到数据表中。
            </summary>
            <param name="dataAccess">执行保存数据操作的 IDataAccess 对象实例。</param>
            <param name="table">数据源 DataTable 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,System.Data.DataTable,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            将指定的  DataTable 对象中的数据保存到数据表中。
            </summary>
            <param name="dataAccess">执行保存数据操作的 IDataAccess 对象实例。</param>
            <param name="table">数据源 DataTable 对象。</param>
            <param name="callback">在读取数据源每行之后的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,System.Data.DataTable,System.Int32,System.Int32,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            将指定的  DataTable 对象中的数据保存到数据表中。
            </summary>
            <param name="dataAccess">执行保存数据操作的 IDataAccess 对象实例。</param>
            <param name="table">数据源 DataTable 对象。</param>
            <param name="startIndex">指定需要保存的开始数据行索引号。</param>
            <param name="writeRowCount">指定需要从数据源中读取的行数。</param>
            <param name="callback">在读取数据源每行之后的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,System.Data.DataView)">
            <summary>
            将指定的  DataView 对象中的数据保存到数据表中。
            </summary>
            <param name="dataAccess">执行保存数据操作的 IDataAccess 对象实例。</param>
            <param name="view">数据源 DataView 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,System.Data.DataView,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            将指定的  DataView 对象中的数据保存到数据表中。
            </summary>
            <param name="dataAccess">执行保存数据操作的 IDataAccess 对象实例。</param>
            <param name="view">数据源 DataView 对象。</param>
            <param name="callback">在读取数据源每行之后的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,System.Data.DataView,System.Int32,System.Int32,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            将指定的  DataView 对象中的数据保存到数据表中。
            </summary>
            <param name="dataAccess">执行保存数据操作的 IDataAccess 对象实例。</param>
            <param name="view">数据源 DataView 对象。</param>
            <param name="startIndex">指定需要保存的开始数据行索引号。</param>
            <param name="writeRowCount">指定需要从数据源中读取的行数。</param>
            <param name="callback">在读取数据源每行之后的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,System.Collections.IList)">
            <summary>
            将指定的 IList 集合中的所有数据保存到数据表中。
            请保证 IList 集合中的所有成员数据类型一致。
            </summary>
            <param name="dataAccess">执行保存数据操作的 IDataAccess 对象实例。</param>
            <param name="list">数据源 IList 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,System.Collections.IList,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            将指定的 IList 集合中的所有数据保存到数据表中。
            请保证 IList 集合中的所有成员数据类型一致。
            </summary>
            <param name="dataAccess">执行保存数据操作的 IDataAccess 对象实例。</param>
            <param name="list">数据源 IList 对象。</param>
            <param name="callback">在读取数据源每行之后的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,System.Collections.IList,System.Int32,System.Int32,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            将指定的 IList 集合中的数据保存到数据表中。
            请保证 IList 集合中的所有成员数据类型一致。
            </summary>
            <param name="dataAccess">执行保存数据操作的 IDataAccess 对象实例。</param>
            <param name="list">数据源 IList 对象。</param>
            <param name="startIndex">指定需要保存的开始数据行索引号。</param>
            <param name="writeRowCount">指定需要从数据源中读取的行数。</param>
            <param name="callback">在读取数据源每行之后的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,System.Data.IDataReader)">
            <summary>
            将指定的 IDataReader 对象导出到文件中。
            </summary>
            <param name="dataAccess">执行保存数据操作的 IDataAccess 对象实例，该对象不能与 dataReader 参数相同数据连接对象。</param>
            <param name="dataReader">数据源 IDataReader 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,System.Data.IDataReader,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            将指定的 IDataReader 对象保存到数据库表中。
            在每次写数据之前会自动调用 IDataReader.Read() 的方法。
            因此，传递过来的 IDataReader 对象当前行不会写入文件中。
            </summary>
            <param name="dataAccess">执行保存数据操作的 IDataAccess 对象实例，该对象不能与 dataReader 参数相同数据连接对象。</param>
            <param name="dataReader">数据源 IDataReader 对象。</param>
            <param name="callback">在读取数据源每行之后的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,System.Data.IDataReader,System.Int32,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            将指定的 IDataReader 对象保存到数据库表中。
            在每次写数据之前会自动调用 IDataReader.Read() 的方法。
            因此，传递过来的 IDataReader 对象当前行不会写入文件中。
            </summary>
            <param name="dataAccess">执行保存数据操作的 IDataAccess 对象实例，该对象不能与 dataReader 参数相同数据连接对象。</param>
            <param name="dataReader">数据源 IDataReader 对象。</param>
            <param name="writeRowCount">指定从数据源中读取的数据行数。</param>
            <param name="callback">在读取数据源每行之后的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.ConvertFieldValueForInsertDB">
            <summary>
            将各字段的值转换为需要写入数据库的值。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.GetInsertSqlByDataSourceRow(BFC.SDK.Data.DataAccess.IDataAccess,BFC.SDK.IO.TableDefine,System.String,System.Text.StringBuilder,BFC.SDK.Data.DataInsertAction)">
            <summary>
            生成 Insert 的 SQL 脚本。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.ExecuteInsert(BFC.SDK.Data.DataAccess.IDataAccess,System.Text.StringBuilder,BFC.SDK.Data.DataInsertAction,System.Int32)">
            <summary>
            执行指定的数据插入数据表脚本。
            </summary>
            <param name="dataAccess"></param>
            <param name="sqlBuffer"></param>
            <param name="insertAction"></param>
            <param name="rowsBuffer">脚本中反映的数据行数。</param>
            <returns>返回实际插入到数据库中的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.Write(BFC.SDK.Data.DataAccess.IDataAccess,BFC.SDK.IO.RowWritingCallbackHandler,System.Data.IDataParameter[])">
            <summary>
            根据配置文件的定义自动获取数据并写入文件。
            </summary>
            <param name="dataAccess">用于获取数据用的 IDataAccess 对象，不能传递 null。</param>
            <param name="callback">插入数据行的回调委托，如果没有则传递 null。</param>
            <param name="parameters">获取数据时需要用到的参数，如果没有可以传递 null。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.Write(BFC.SDK.Data.DataAccess.IDataAccess,BFC.SDK.IO.RowWritingCallbackHandler,System.Object[])">
            <summary>
            根据配置文件的定义自动获取数据并写入文件。
            </summary>
            <param name="dataAccess">用于获取数据用的 IDataAccess 对象，不能传递 null。</param>
            <param name="callback">插入数据行的回调委托，如果没有则传递 null。</param>
            <param name="parameterNameAndValues">获取数据时需要用到的参数，如果没有可以传递 null。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,BFC.SDK.IO.RowWritingCallbackHandler,BFC.SDK.Data.DataAccess.IDataAccess,System.Data.IDataParameter[])">
            <summary>
            根据配置文件的定义自动获取数据并插入目标数据表。
            </summary>
            <param name="dataSourceDataAccess">用于获取数据用的 IDataAccess 对象，不能传递 null。</param>
            <param name="callback">插入数据行的回调委托，如果没有则传递 null。</param>
            <param name="insertDataAccess">
            用于保存数据到目标数据表用的 IDataAccess 对象，不能传递 null，也不能与 dataSourceDataAccess 是同一个对象。
            </param>
            <param name="parameters">获取数据时需要用到的参数，如果没有可以传递 null。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDB(BFC.SDK.Data.DataAccess.IDataAccess,BFC.SDK.IO.RowWritingCallbackHandler,BFC.SDK.Data.DataAccess.IDataAccess,System.Object[])">
            <summary>
            根据配置文件的定义自动获取数据并插入目标数据表。
            </summary>
            <param name="dataSourceDataAccess">用于获取数据用的 IDataAccess 对象，不能传递 null。</param>
            <param name="callback">插入数据行的回调委托，如果没有则传递 null。</param>
            <param name="insertDataAccess">
            用于保存数据到目标数据表用的 IDataAccess 对象，不能传递 null，也不能与 dataSourceDataAccess 是同一个对象。
            </param>
            <param name="parameterNameAndValues">获取数据时需要用到的参数，如果没有可以传递 null。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDBRemote(BFC.SDK.Data.DataAccess.IDataAccess,System.Object[])">
            <summary>
            直接提交表对表的删除、更新或插入 SQL 语句到远程数据库服务器执行，不再获取数据到本地再转换成 INSERT SQL 语句进行插入操作。
            </summary>
            <param name="dataAccess">用于提交执行 SQL 语句的 IDataAccess 对象。</param>
            <param name="parameterNameAndValues">参数。</param>
            <returns>返回导入到目标表的数据行数，如果 InsertAction 为 UpdateInsert 时包括已更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDBRemote(BFC.SDK.Data.DataAccess.IDataAccess,System.Int32@,System.Int32@,System.Int32@,System.Object[])">
            <summary>
            直接提交表对表的删除、更新或插入 SQL 语句到远程数据库服务器执行，不再获取数据到本地再转换成 INSERT SQL 语句进行插入操作。
            </summary>
            <param name="dataAccess">用于提交执行 SQL 语句的 IDataAccess 对象。</param>
            <param name="insertRowCount">返回执行 INSERT SQL 语句新插入的数据行数。</param>
            <param name="updateRowCount">当 InsertAction 为 UpdateInsert 时返回更新的数据行数。</param>
            <param name="deleteRowCount">当 InsertAction 为 DeleteInsert 时返回已删除的数据行数。</param>
            <param name="parameterNameAndValues">参数。</param>
            <returns>返回导入到目标表的数据行数，如果 InsertAction 为 UpdateInsert 时包括已更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDBRemote(BFC.SDK.Data.DataAccess.IDataAccess,System.Int32@,System.Int32@,System.Int32@,System.Data.IDataParameter[])">
            <summary>
            直接提交表对表的删除、更新或插入 SQL 语句到远程数据库服务器执行，不再获取数据到本地再转换成 INSERT SQL 语句进行插入操作。
            </summary>
            <param name="dataAccess">用于提交执行 SQL 语句的 IDataAccess 对象。</param>
            <param name="insertRowCount">返回执行 INSERT SQL 语句新插入的数据行数。</param>
            <param name="updateRowCount">当 InsertAction 为 UpdateInsert 时返回更新的数据行数。</param>
            <param name="deleteRowCount">当 InsertAction 为 DeleteInsert 时返回已删除的数据行数。</param>
            <param name="parameters">参数。</param>
            <returns>返回导入到目标表的数据行数，如果 InsertAction 为 UpdateInsert 时包括已更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.InsertDBRemote(BFC.SDK.Data.DataAccess.IDataAccess,System.Data.IDataParameter[])">
            <summary>
            直接提交表对表的删除、更新或插入 SQL 语句到远程数据库服务器执行，不再获取数据到本地再转换成 INSERT SQL 语句进行插入操作。
            </summary>
            <param name="dataAccess">用于提交执行 SQL 语句的 IDataAccess 对象。</param>
            <param name="parameters">参数。</param>
            <returns>返回导入到目标表的数据行数，如果 InsertAction 为 UpdateInsert 时包括已更新的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.GenerateExportImportSql(BFC.SDK.Data.DataAccess.IDataAccess)">
            <summary>
            获取导入导出数据的SQL语句。
            返回的语句取决于 InsertAcetion 的设置。
            </summary>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.DataExportImportHelper.OnParseSettingByUserParameter(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="varName"></param>
            <param name="varValue"></param>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.IDataAccess">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.BeginTransaction">
            <summary>
            启动事务。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            启动指定级别的事务。
            </summary>
            <param name="isolationlevel">指定事务级别。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Close">
            <summary>
            关闭数据库连接。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.IDataAccess.CommandTimeOut">
            <summary>
            获取或设置执行SQL语句的超时时间。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.CommitTransaction">
            <summary>
            提交事务。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.IDataAccess.ConnectionString">
            <summary>
            获取当前连接的连接字符串。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.IDataAccess.Database">
            <summary>
            获取当前连接的数据库。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.IDataAccess.Disposed">
            <summary>
            获取当前对象是否已经释放资源了。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetSchema">
            <summary>
            返回此当前连接的数据源的架构信息。
            </summary>
            <returns>返回包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetSchema(System.String)">
            <summary>
            使用指定的架构名称字符串返回当前连接的数据源的架构信息。
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetSchema(System.String,System.String[])">
            <summary>
            使用指定的架构名称字符串和指定的限制值字符串数组，返回当前连接的数据源的架构信息。
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillTableSchema(System.Data.DataSet,System.Data.SchemaType,System.String)">
            <summary>
            将名为“Table”的 System.Data.DataTable 添加到指定的 System.Data.DataSet 中，
            并根据指定的 System.Data.SchemaType 配置架构以匹配数据源中的架构。
            </summary>
            <param name="dataSet">要用数据源中的架构填充的 System.Data.DataSet。</param>
            <param name="schemaType">System.Data.SchemaType 值之一。</param>
            <param name="tableName">要取得架构信息的表名称。</param>
            <returns>System.Data.DataTable 对象的数组，这些对象包含从数据源返回的架构信息。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteDataTable(System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>返回查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteDataTable(System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="commandParameters">IDataParameter 数组。</param>
            <returns>返回查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteDataTableBySP(System.String,System.Object[])">
            <summary>
            通过执行存储过程填充 DataTable 对象。
            </summary>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>返回查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteDataTableBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            通过执行存储过程填充 DataTable 对象。
            </summary>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="commandParameters">IDataParameter 数组。</param>
            <returns>返回查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>查询到的 DataSet。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteDataSet(System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的查询语句。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="commandParameters">IDataParameter 数组。</param>
            <returns>查询到的 DataSet。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteDataSetBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            通过执行存储过程填充 DataSet 对象。
            </summary>
            <param name="spName">需要执行的存储过程。</param>
            <param name="commandParameters">IDataParameter 数组。</param>
            <returns>返回查询到的 DataSet 对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteDataSetBySP(System.String,System.Object[])">
            <summary>
            通过执行存储过程填充 DataSet 对象。
            </summary>
            <param name="spName">需要执行的存储过程。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>返回查询到的 DataSet 对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteQuery(System.Type,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的查询语句，并将结果填充到指定类型的元素的 ArrayList 集合中。
            </summary>
            <param name="t">存储每行数据的对象的类型。</param>
            <param name="selectSql">需要执行的查询语句。</param>
            <param name="commandParameters">IDataParameter 数组，提供查询语句中的参数信息。</param>
            <returns>返回 ArrayList 集合。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteQuery``1(System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的查询语句，并将结果填充到指定类型的元素的 List&lt;T&gt; 泛类型集合中。
            </summary>
            <param name="selectSql">需要执行的查询语句。</param>
            <typeparam name="T">存储每行数据的对象的类型。</typeparam>
            <param name="commandParameters">IDataParameter 数组，提供查询语句中的参数信息。</param>
            <returns>返回 List&lt;T&gt; 泛类型集合。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteQuery``1(System.String,System.Object[])">
            <summary>
            执行指定的查询语句，并将结果填充到指定类型的元素的 List&lt;T&gt; 泛类型集合中。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <typeparam name="T">存储每行数据的对象的类型。</typeparam>
            <returns>查询到的List&lt;T&gt; 泛类型集合。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteQuery(System.Type,System.String,System.Object[])">
            <summary>
            执行指定的查询语句，并将结果填充到指定类型的元素的 ArrayList 集合中。
            </summary>
            <param name="t">存储每行数据的对象的类型。</param>
            <param name="selectSql">需要执行的查询语句。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>返回 ArrayList 集合。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteQueryBySP``1(System.String,System.Object[])">
            <summary>
            执行指定的存储过程，并将结果填充到指定类型的元素的 List&lt;T&gt; 泛类型集合中。
            </summary>
            <param name="spName">需要执行的存储过程名称。</param>
            <typeparam name="T">存储每行数据的对象的类型。</typeparam>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>查询到的List&lt;T&gt; 泛类型集合。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteQueryBySP(System.Type,System.String,System.Object[])">
            <summary>
            执行指定的存储过程，并将结果填充到指定类型的元素的 ArrayList 集合中。
            </summary>
            <param name="t">存储每行数据的对象的类型。</param>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>返回 ArrayList 集合。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteQueryBySP``1(System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的存储过程，并将结果填充到指定类型的元素的 List&lt;T&gt; 泛类型集合中。
            </summary>
            <param name="spName">需要执行的存储过程名称。</param>
            <typeparam name="T">存储每行数据的对象的类型。</typeparam>
            <param name="commandParameters">IDataParameter 数组，提供查询语句中的参数信息。</param>
            <returns>查询到的List&lt;T&gt; 泛类型集合。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteQueryBySP(System.Type,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的存储过程，并将结果填充到指定类型的元素的 ArrayList 集合中。
            </summary>
            <param name="t">存储每行数据的对象的类型。</param>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="commandParameters">IDataParameter 数组，提供查询语句中的参数信息。</param>
            <returns>返回 ArrayList 集合。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteNonQuery(System.String,System.Data.IDataParameter[])">
            <summary>
            执行非查询的SQL语句。
            </summary>
            <param name="nonQuerySql">需要执行的 SQL 语句。</param>
            <param name="commandParameters">SQL 语句中的参数信息。</param>
            <returns>返回执行后影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            执行非查询的SQL语句。
            </summary>
            <param name="nonQuerySql">需要执行的 SQL 语句。</param>
            <param name="parameterNameAndValues">SQL 语句中的参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>返回执行后影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteNonQueryBySP(System.String,System.Object[])">
            <summary>
            执行非查询的 SQL 存储过程。
            </summary>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>返回执行后影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteNonQueryBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            执行非查询的 SQL 存储过程。
            </summary>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="commandParameters">存储过程中的参数信息。</param>
            <returns>返回执行后影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Fill(System.Data.DataTable,System.String,System.Object[])">
            <summary>
            执行指定的 SQL 查询语句，并将结果填充到指定的 System.Data.DataTable 对象中。
            </summary>
            <param name="dataTable">用于填充执行结果的 System.Data.DataTable 对象。</param>
            <param name="selectSql">需要执行的 SQL 查询语句。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Fill(System.Data.DataTable,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的 SQL 查询语句，并将结果填充到指定的 System.Data.DataTable 对象中。
            </summary>
            <param name="dataTable">用于填充执行结果的 System.Data.DataTable 对象。</param>
            <param name="selectSql">需要执行的 SQL 查询语句。</param>
            <param name="commandParameters">SQL 查询语句中的参数信息。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillBySP(System.Data.DataTable,System.String,System.Object[])">
            <summary>
            执行指定的存储过程，并将结果填充到指定的 System.Data.DataTable 对象中。
            </summary>
            <param name="dataTable">用于填充执行结果的 System.Data.DataTable 对象。</param>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillBySP(System.Data.DataTable,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的存储过程，并将结果填充到指定的 System.Data.DataTable 对象中。
            </summary>
            <param name="dataTable">用于填充执行结果的 System.Data.DataTable 对象。</param>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="commandParameters">存储过程的参数信息。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillBySP(System.Data.DataSet,System.String,System.Object[])">
            <summary>
            执行指定的存储过程，并将结果填充到指定的 System.Data.DataSet 对象中。
            </summary>
            <param name="dataSet">用于填充执行结果的 System.Data.DataSet 对象。</param>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillBySP(System.Data.DataSet,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的存储过程，并将结果填充到指定的 System.Data.DataSet 对象中。
            </summary>
            <param name="dataSet">用于填充执行结果的 System.Data.DataSet 对象。</param>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="commandParameters">存储过程的参数信息。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillQuery``1(System.Collections.Generic.IList{``0},System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的 SQL 查询语句，并将结果填充到指定的 IList&lt;T&gt; 集合中。
            </summary>
            <param name="list">填充结果的 IList&lt;T&gt; 集合。</param>
            <typeparam name="T">存储每行数据的对象的类型。</typeparam>
            <param name="selectSql">需要执行的 SQL 查询语句。</param>L
            <param name="commandParameters">存储过程的参数信息。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillQuery``1(System.Collections.Generic.IList{``0},System.String,System.Object[])">
            <summary>
            执行指定的 SQL 查询语句，并将结果填充到指定的 IList&lt;T&gt; 集合中。
            </summary>
            <param name="list">填充结果的 IList&lt;T&gt; 集合。</param>
            <typeparam name="T">存储每行数据的对象的类型。</typeparam>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>查询到的DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillQuery(System.Collections.IList,System.Type,System.String,System.Object[])">
            <summary>
            执行指定的 SQL 查询语句，并将结果填充到指定的 IList 集合中。
            </summary>
            <param name="list">填充结果的 IList 集合。</param>
            <param name="t">存储每行数据的对象的类型。</param>
            <param name="selectSql">需要执行的 SQL 查询语句。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillQuery(System.Collections.IList,System.Type,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的 SQL 查询语句，并将结果填充到指定的 IList 集合中。
            </summary>
            <param name="list">填充结果的 IList 集合。</param>
            <param name="t">存储每行数据的对象的类型。</param>
            <param name="selectSql">需要执行的 SQL 查询语句。</param>
            <param name="commandParameters">SQL 语句中的参数信息。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillQueryBySP``1(System.Collections.Generic.IList{``0},System.String,System.Object[])">
             <summary>
             通过执行存储过程将结果填充到指定的 IList&lt;T&gt; 集合。
             </summary>
            <param name="list">填充结果的 IList&lt;T&gt; 集合。</param>
            <typeparam name="T">存储每行数据的对象的类型。</typeparam>
             <param name="spName">需要执行的存储过程名称。</param>
             <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillQueryBySP``1(System.Collections.Generic.IList{``0},System.String,System.Data.IDataParameter[])">
             <summary>
             通过执行存储过程将结果填充到指定的 IList&lt;T&gt; 集合。
             </summary>
            <param name="list">填充结果的 IList&lt;T&gt; 集合。</param>
            <typeparam name="T">存储每行数据的对象的类型。</typeparam>
             <param name="spName">需要执行的存储过程名称。</param>
             <param name="commandParameters">存储过程中的参数信息。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillQueryBySP(System.Collections.IList,System.Type,System.String,System.Data.IDataParameter[])">
            <summary>
            通过执行存储过程将结果填充到指定的 IList 集合。
            </summary>
            <param name="list">填充结果的 IList 集合。</param>
            <param name="t">存储每行数据的对象的类型。</param>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="commandParameters">存储过程中的参数信息。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillQueryBySP(System.Collections.IList,System.Type,System.String,System.Object[])">
            <summary>
            通过执行存储过程将结果填充到指定的 IList 集合。
            </summary>
            <param name="list">填充结果的 IList 集合。</param>
            <param name="t">存储每行数据的对象的类型。</param>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetLikeSqlValueString(System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
            获取符合 LIKE 语法的 SQL 语句常量值字符串，如果是字符类型则已经包含了前置单引号和后置单引号。
            </summary>
            <param name="value">表示 SQL 语句常量值字符串的真实 .net 类型的数据。</param>
            <param name="isLeftLike">是否需要加上左模糊。</param>
            <param name="isRightLike">是否需要加上右模糊。</param>
            <param name="dateFormat">如果是表示日期或时间类型的值时，指示格式字符串。</param>
            <returns>返回符合 LIKE 语法的 SQL 语句常量值字符串，如果是字符类型则已经包含了前置单引号和后置单引号。
            例如：'%abc%' 
            </returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetLikeSqlValueString(System.Object)">
            <summary>
             获取符合 LIKE 语法的 SQL 语句常量值字符串，如果是字符类型则已经包含了前置单引号和后置单引号。
            </summary>
            <param name="value">表示 SQL 语句常量值字符串的真实 .net 类型的数据。</param>
            <returns>返回符合 LIKE 语法的 SQL 语句常量值字符串，如果是字符类型则已经包含了前置单引号和后置单引号。
            例如：'%abc%' 
            </returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetSqlValueString(System.Object)">
            <summary>
             获取符合 SQL 语句常量值字符串，如果是字符类型则已经包含了前置单引号和后置单引号。
            </summary>
            <param name="value">表示 SQL 语句常量值字符串的真实 .net 类型的数据。</param>
            <returns>返回能用于直接拼接 SQL 语句的常量值字符串，如果是字符类型则已经包含了前置单引号和后置单引号。
            例如：'abc' 或 234
            </returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetSqlValueString(System.Object,System.String)">
            <summary>
            获取符合 SQL 语句常量值字符串，如果是字符类型则已经包含了前置单引号和后置单引号。
            </summary>
            <param name="value">表示 SQL 语句常量值字符串的真实 .net 类型的数据。</param>
            <param name="dateFormat">如果是表示日期或时间类型的值时，指示格式字符串。</param>
            <returns>返回能用于直接拼接 SQL 语句的常量值字符串，如果是字符类型则已经包含了前置单引号和后置单引号。
            例如：'abc' 或 234
            </returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Insert(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将符合类型要求的对象的数据插入到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList,IDataReader
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的普通类型对象。
            如果提供的数据源是 IDataReader 对象,则请确保打开 System.Data.IDataReader 的数据库连接对象不能是当前连接对象。
            </summary>
            <param name="dataModelObj">需要插入数据的存储对象。</param>
            <param name="tableName">数据库中对应的表名称。</param>
            <param name="fields">字段选项。</param>
            <returns>返回总共插入到数据库中的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.InsertDataReader(System.Data.IDataReader,System.String)">
            <summary>
            将 System.Data.IDataReader 对象插入数据库指定表中。
            请确保打开 System.Data.IDataReader 的数据库连接对象不是当前连接对象。
            </summary>
            <param name="reader">需要插入数据库的数据源。</param>
            <param name="tableName">插入数据库指定表名称。</param>
            <returns>返回总共插入数据库中的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.InsertDataReader(System.Data.IDataReader,System.String,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将 System.Data.IDataReader 对象插入数据库指定表中。
            请确保打开 System.Data.IDataReader 的数据库连接对象不能是当前连接对象。
            </summary>
            <param name="reader">需要插入数据库的数据源。</param>
            <param name="tableName">插入数据库指定表名称。</param>
            <param name="fields">指字字段选项，可以为 null。</param>
            <returns>返回总共插入数据库中的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.InsertDataRow(System.Data.DataRow,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将指定的 System.Data.DataRow 对象表示的数据插入到数据库中。
            插入数据的表对象为提供的 System.Data.DataRow 对象所属 System.Data.DataTable 对象的表名称对应的数据库表。
            </summary>
            <param name="insertRow">需要插入到数据库的 System.Data.DataRow 对象。</param>
            <param name="fields">指定需要保存到数据库中的字段或者不要保存到数据库的字段。</param>
            <returns>返回总共插入到数据库中的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.InsertDataRow(System.Data.DataRow,System.String,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将指定的 System.Data.DataRow 对象表示的数据插入到数据库指定的表中。
            </summary>
            <param name="insertRow">需要插入到数据库的 System.Data.DataRow 对象。</param>
            <param name="tableName">指定需要插入数据的目标数据表名称。</param>
            <param name="fields">指定需要保存到数据库中的字段或者不要保存到数据库的字段。</param>
            <returns>返回总共插入到数据库中的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.InsertDataSet(System.Data.DataSet,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将指定的 System.Data.DataSet 对象中的所有数据插入到数据库中。
            插入数据的表对象为提供的 System.Data.DataSet 对象下相应的 System.Data.DataTable 对象的表名称对应的数据库表。
            </summary>
            <param name="dataSet">需要插入到数据库的 System.Data.DataSet 对象。</param>
            <param name="fields">指定需要保存到数据库中的字段或者不要保存到数据库的字段。</param>
            <returns>返回总共插入到数据库中的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.InsertDataTable(System.Data.DataTable,System.String,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将指定的 System.Data.DataTable 对象中的所有数据插入到数据库指定的表中。
            </summary>
            <param name="dataTable">需要插入到数据库的 System.Data.DataTable 对象。</param>
            <param name="tableName">指定需要插入数据的目标数据表名称。</param>
            <param name="fields">指定需要保存到数据库中的字段或者不要保存到数据库的字段。</param>
            <returns>返回总共插入到数据库中的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.InsertDataTable(System.Data.DataTable,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将指定的 System.Data.DataTable 对象中的所有数据插入到数据库中。
            插入数据的表对象为提供的 System.Data.DataTable 对象的表名称对应的数据库表。
            </summary>
            <param name="dataTable">需要插入数据库的 System.Data.DataTable 对象。</param>
            <param name="fields">指定需要保存到数据库中的字段或者不要保存到数据库的字段。</param>
            <returns>返回总共插入到数据库中的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.BatchInsert(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.Int32)">
            <summary>
            将指定的数据以批次提交的形式插入到数据库中。
            支持表示数据对象的类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList,IDataReader
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的普通类型对象 。
            如果提供的数据源是 IDataReader 对象,则请确保打开 System.Data.IDataReader 的数据库连接对象不能是当前连接对象。
            </summary>
            <param name="dataModelObj">存储需要插入的数据的对象或对象集合。</param>
            <param name="tableName">需要插入数据的数据库中对应的表名称。</param>
            <param name="fields">字段选项。指定需要保存到数据库中的字段或者不要保存到数据库的字段。</param>
            <param name="buffer">缓冲值，即每多少行数据提交到数据库服务器执行一次。</param>
            <returns>返回总共插入到数据库中的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.BatchInsert(System.Object,System.String)">
            <summary>
            每次以50行数据批量插入数据。
            将任意类型对象的数据插入到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList,IDataReader
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            如果提供的数据源是 IDataReader 对象,则请确保打开 System.Data.IDataReader 的数据库连接对象不能是当前连接对象。
            </summary>
            <param name="dataModelObj">需要插入数据的存储对象。</param>
            <param name="tableName">数据库中对应的表名称。</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Insert(System.Object,System.String)">
            <summary>
            将符合类型的对象表示的数据插入到数据库中。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList,IDataReader
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的普通类型对象 。
            如果提供的数据源是 IDataReader 对象,则请确保打开 System.Data.IDataReader 的数据库连接对象不能是当前连接对象。
            </summary>
            <param name="dataModelObj">需要插入数据的存储对象。</param>
            <param name="tableName">数据库中对应的表名称。</param>
            <returns>返回总共插入到数据库中的数据行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.InsertDataRow(System.Data.DataRow)">
            <summary>
            将指定的 System.Data.DataRow 对象表示的数据插入到数据库中。
            插入数据的表对象为提供的 System.Data.DataRow 对象所属 System.Data.DataTable 对象的表名称对应的数据库表。
            </summary>
            <param name="insertRow">需要插入到数据库的 System.Data.DataRow 对象。</param>
            <returns>返回总共插入到数据库中的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.InsertDataRow(System.Data.DataRow,System.String)">
            <summary>
            将指定的 System.Data.DataRow 对象表示的数据插入到数据库指定的表中。
            </summary>
            <param name="insertRow">需要插入到数据库的 System.Data.DataRow 对象。</param>
            <param name="tableName">指定需要插入数据的目标数据表名称。</param>
            <returns>返回总共插入到数据库中的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.InsertDataSet(System.Data.DataSet)">
            <summary>
            将指定的 System.Data.DataSet 对象中的所有数据插入到数据库中。
            插入数据的表对象为提供的 System.Data.DataSet 对象下相应的 System.Data.DataTable 对象的表名称对应的数据库表。
            </summary>
            <param name="dataSet">需要插入到数据库的 System.Data.DataSet 对象。</param>
            <returns>返回总共插入到数据库中的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.InsertDataTable(System.Data.DataTable,System.String)">
            <summary>
            将指定的 System.Data.DataTable 对象中的所有数据插入到数据库指定的表中。
            </summary>
            <param name="dataTable">需要插入到数据库的 System.Data.DataTable 对象。</param>
            <param name="tableName">指定需要插入数据的目标数据表名称。</param>
            <returns>返回总共插入到数据库中的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.InsertDataTable(System.Data.DataTable)">
            <summary>
            将指定的 System.Data.DataTable 对象中的所有数据插入到数据库中。
            插入数据的表对象为提供的 System.Data.DataTable 对象的表名称对应的数据库表。
            </summary>
            <param name="dataTable">需要插入数据库的 System.Data.DataTable 对象。</param>
            <returns>返回总共插入到数据库中的行数。</returns>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.IDataAccess.IsTransaction">
            <summary>
            获取当前是否处于事务中。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Open">
            <summary>
            打开数据库接。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.RollbackTransaction">
            <summary>
            回滚当前的数据库事务。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.IDataAccess.State">
            <summary>
            获取当前数据库连接的状态。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.IDataAccess.ParameterPrefixInSql">
            <summary>
            获取在SQL语句中所带参数的前缀。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.IDataAccess.ReturnRowCountMaxPages">
            <summary>
            获取或设置执行填充页面数据方法时，返回总数据行数的方法，该值表示返回的数据总行数为截止到从前页面开始到第N个页面的末尾的数据的总行数，这样可以避免计算总数据行数而提高性能。
            <para>如果设置为小于或等于0的值，则始终返回总数据行数。</para>
            <para>如设置本属性值为10，每页显示数据行数为20，当前需要获取第2页，则返回值至多不超过 220 【(2+10-1)*20】 行。</para>
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.IDataAccess.ConnectionTimeout">
            <summary>
            获取连接的超时时间。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ToString">
            <summary>
            获取当前对象字符串表示形式。
            </summary>
            <returns>返回当前对象字符串表示形式。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Update(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String[])">
            <summary>
            将符合类型要求的对象的数据更新到数据库中。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的普通类型对象。
            </summary>
            <param name="dataModelObj">需要更新数据的存储对象。</param>
            <param name="tableName">数据库中对应的表名称。</param>
            <param name="fields">字段选项。指定需要更新数据库中的字段或者不要更新数据库的字段。</param>
            <param name="primaryKeyFields">
            指定更新的依据，即以哪些字段为主键来更新。
            如果表示的行数据对象为 System.Data.DataRow 对象存在原始数据版本，则以原始数据版本作为更新条件的值。
            </param>
            <returns>返回总共更新到数据库的总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.UpdateByCondition(System.Object,System.String,System.String)">
            <summary>
            将任意类型对象的数据更新到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <param name="conditionSql">更新数据时的条件 SQL 语句（不带 WHERE 关键字）。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.UpdateByCondition(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String)">
            <summary>
            将任意类型对象的数据更新到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的 Class 。
            </summary>
            <param name="dataModelObj"></param>
            <param name="tableName"></param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="conditionSql">更新数据时的条件 SQL 语句（不带 WHERE 关键字）。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.UpdateDataRow(System.Data.DataRow,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String[])">
            <summary>
            将 System.Data.DataRow 对象表示的数据更新到数据库中。
            </summary>
            <param name="updateRow">需要更新数据的 System.Data.DataRow 对象。</param>
            <param name="tableName">数据库中对应的表名称。</param>
            <param name="fields">字段选项。指定需要更新数据库中的字段或者不要更新数据库的字段。</param>
            <param name="primaryKeyFields">
            指定更新的依据，即以哪些字段为主键来更新。
            如果 System.Data.DataRow 对象存在原始数据版本，则以原始数据版本作为更新条件的值。
             如果不指定这个参数， 则更新的主键依据是 System.Data.DataRow 对象对应的 DataTable 中对应的主键。
            </param>
            <returns>返回总共更新到数据库的总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.UpdateDataRowByCondition(System.Data.DataRow,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String)">
            <summary>
            使用不带 WHERE 关键字的条件 SQL 语句作为条件，将 System.Data.DataRow 对象表示的数据更新到数据库中。
            </summary>
            <param name="updateRow">需要更新数据的 System.Data.DataRow 对象。</param>
            <param name="tableName">数据库中对应的表名称。</param>
            <param name="fields">字段选项。指定需要更新数据库中的字段或者不要更新数据库的字段。</param>
            <param name="conditionSql">
            指定更新的依据，不带 WHERE 关键字的条件 SQL 语句。
            </param>
            <returns>返回总共更新到数据库的总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.UpdateDataSet(System.Data.DataSet,BFC.SDK.Data.DataAccess.UpdateFields)">
            <summary>
            将指定的 System.Data.DataSet 对象更新到数据库中。
            更新的数据库目标表是 System.Data.DataSet 对象中的 System.Data.DataTable 对象的表名称表示的数据库表。
            更新的主键依据是 System.Data.DataTable 对象中对应的主键。
            </summary>
            <param name="dataSet">需要更新数据的 System.Data.DataSet 对象。 </param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <returns>返回总共更新到数据库的总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.UpdateDataTable(System.Data.DataTable,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String[])">
            <summary>
            将指定的 System.Data.DataTable 对象更新到数据库中指定的表中。
            </summary>
            <param name="dataTable">需要更新数据的 System.Data.DataTable 对象。 </param>
            <param name="tableName">指定需要更新数据的目标数据表名称。</param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="primaryKeyFields">
            指定更新的依据，即以哪些字段为主键来更新。
            如果 System.Data.DataRow 对象存在原始数据版本，则以原始数据版本作为更新条件的值。
            如果不指定这个参数， 则更新的主键依据是 System.Data.DataTable 对象中对应的主键。
            </param>
            <returns>返回总共更新到数据库的总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.UpdateDataTableByCondition(System.Data.DataTable,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.String)">
            <summary>
            使用不带 WHERE 关键字的条件 SQL 语句作为条件，将 System.Data.DataTable 对象表示的数据更新到数据库中。
            </summary>
            <param name="dataTable">需要更新数据的 System.Data.DataTable 对象。</param>
            <param name="tableName">指定需要更新数据的目标数据表名称。</param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="conditionSql"> 指定更新的依据，不带 WHERE 关键字的条件 SQL 语句。</param>
            <returns>返回总共更新到数据库的总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.BatchUpdate(System.Object,System.String,BFC.SDK.Data.DataAccess.UpdateFields,System.Int32,System.String[])">
            <summary>
            批量更新数据。
            将任意类型对象的数据更新到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的普通类型对象 。
            </summary>
            <param name="dataModelObj">需要更新数据的存储对象。</param>
            <param name="tableName">需要更新数据库中对应的表的名称。</param>
            <param name="fields">指定需要更新的字段或排除更新的字段。</param>
            <param name="buffer">缓冲值，即每多少行提交执行一次SQL语句。</param>
            <param name="primaryKeyFields">指定主键字段</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.BatchUpdate(System.Object,System.String,System.String[])">
            <summary>
            以50行数据批量更新数据。
            将任意类型对象的数据更新到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的普通类型对象 。
            </summary>
            <param name="dataModelObj">需要更新数据的存储对象。</param>
            <param name="tableName">需要更新数据库中对应的表的名称。</param>
            <param name="primaryKeyFields">指定主键字段</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Update(System.Object,System.String,System.String[])">
            <summary>
            将符合类型要求的对象的数据更新到数据库。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的普通类型对象 。
            </summary>
            <param name="dataModelObj">需要更新数据的存储对象。</param>
            <param name="tableName">数据库中对应的表名称。</param>
            <param name="primaryKeyFields">指定作为更新数据的主键信息，如果不指定，则使用 DataTable 中定义的主键或 DataModel 中定义的 ModelUpdatableAttribute 指定的主键。</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.UpdateDataRow(System.Data.DataRow,System.String,System.String[])">
            <summary>
            将指定的 System.Data.DataRow 对象更新到数据库的指定表中。
            </summary>
            <param name="updateRow">将该 System.Data.DataRow 对象表示的数据更新到数据库中。</param>
            <param name="tableName">要更新数据库中的表名称。</param>
            <param name="primaryKeyFields">指定更新的主键字段。
            如果 System.Data.DataRow 对象存在原始数据版本，则以原始数据版本作为更新条件的值。
            如果不指定这个参数， 则更新的主键依据是 System.Data.DataTable 对象中对应的主键。
            </param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.UpdateDataRowByCondition(System.Data.DataRow,System.String,System.String)">
            <summary>
            将指定的 System.Data.DataRow 对象更新到数据库的指定表中。
            </summary>
            <param name="updateRow">将该 System.Data.DataRow 对象表示的数据更新到数据库中。</param>
            <param name="tableName">要更新数据库中的表名称。</param>
            <param name="conditionSql"> 指定更新的依据，不带 WHERE 关键字的条件 SQL 语句。</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.UpdateDataSet(System.Data.DataSet)">
            <summary>
            将 System.Data.DataSet 对象更新到数据库中，更新的数据库中的表为 System.Data.DataSet 对象中对应的 System.Data.DataTable 名称。
            </summary>
            <param name="dataSet">将该 System.Data.DataSet 对象表示的数据更新到数据库中。</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.UpdateDataTable(System.Data.DataTable,System.String,System.String[])">
            <summary>
            将指定的 System.Data.DataTable 对象更新到数据库指定的表中。
            </summary>
            <param name="dataTable">将该 System.Data.DataTable 对象表示的数据更新到数据为中。</param>
            <param name="tableName">要更新数据库的表名称。</param>
            <param name="primaryKeyFields">指定更新的主键字段。
            如果 System.Data.DataRow 对象存在原始数据版本，则以原始数据版本作为更新条件的值。
            如果不指定这个参数， 则更新的主键依据是 System.Data.DataTable 对象中对应的主键。</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.UpdateDataTableByCondition(System.Data.DataTable,System.String,System.String)">
            <summary>
            将指定的 System.Data.DataTable 对象更新到数据库指定的表中。
            </summary>
            <param name="dataTable">将该 System.Data.DataTable 对象表示的数据更新到数据为中。</param>
            <param name="tableName">要更新数据库的表名称。</param>
            <param name="conditionSql"> 指定更新的依据，不带 WHERE 关键字的条件 SQL 语句。</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Delete(System.Object,System.String,System.String[])">
            <summary>
            将符合类型要求的对象的数据从数据库中删除。
            支持类型有：DataTable,DataRow,DataSet,DataView,DataRowView,IList
            以及其他的包含基本数据类型（如 int,string,int&lt;?&gt;,string&lt;?&gt;）作为公共属性的普通类型对象 。
            </summary>
            <param name="dataModelObj">需要删除数据的存储对象。</param>
            <param name="tableName">需要删除的数据库表名称。</param>
            <param name="deleteConditionFields">指定作为删除数据的主键信息，如果不指定，则使用 DataTable 中定义的主键或 DataModel 中定义的 ModelUpdatableAttribute 指定的主键。
            </param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.DeleteByCondition(System.String,System.String)">
            <summary>
            根据提供的不带 WHERE 关键字的条件 SQL 语句删除数据库中指定表中的数据。
            </summary>
            <param name="tableName">需要删除数据的表名称。</param>
            <param name="sqlCondition">指定删除数据的依据，不带 WHERE 关键字的条件 SQL 语句。</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.DeleteDataRow(System.Data.DataRow,System.String,System.String[])">
            <summary>
            根据提供的 System.Data.DataRow 对象，从数据库中删除指定的数据行。
            </summary>
            <param name="row">需要删除的数据行。</param>
            <param name="tableName">删除数据库中数据的表名称。</param>
            <param name="deleteConditionFields">删除数据的主键字段。
            如果 System.Data.DataRow 对象存在原始数据版本，则以原始数据版本作为删除条件的值。
            如果不指定这个参数， 则删除的主键依据是 System.Data.DataTable 对象中对应的主键。</param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.DeleteDataSet(System.Data.DataSet)">
            <summary>
            从数据库中删除指定 System.Data.DataSet 对象表示的数据。
            </summary>
            <param name="dataSet">存储需要删除的数据行的 System.Data.DataSet 对象。 </param>
            <returns>返回总共影响的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.DeleteDataTable(System.Data.DataTable,System.String,System.String[])">
            <summary>
            根据  对象删除数据库中对应的数据行。
            </summary>
            <param name="dataTable">存储需要删除数据行的  对象。</param>
            <param name="tableName">需要删除数据的数据库表名称。</param>
            <param name="deleteConditionFields">删除数据的依据，即主键字段。
            如果 System.Data.DataRow 对象存在原始数据版本，则以原始数据版本作为删除条件的值。
            如果不指定这个参数， 则删除的主键依据是 System.Data.DataTable 对象中对应的主键。
            </param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetDataParameterInstance">
            <summary>
            创建一个 IDataParameter 实例。
            </summary>
            <returns>返回创建好的 IDataParameter 对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetDataParameterInstance(System.String)">
            <summary>
            通过指定参数名称，创建 IDataParameter 实例。
            </summary>
            <param name="paramName">参数名称。</param>
            <returns>返回创建好的 IDataParameter 对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetDataParameterInstance(System.String,System.String,System.Int32)">
            <summary>
            创建指定名称的参数，并且指定大小。
            如果底层的数据库类型不支持将忽略 size 。
            </summary>
            <param name="paramName">参数名称。</param>
            <param name="dbTypeString">对应的数据库类型的参数类型名称(不区分大小写)，根据不同的数据库类型对应的 DBType 枚举值名称（如：OleDbType、SqlDbType 的枚举名称）。如：Varchar，如果为空则使用默认值。</param>
            <param name="size">指定参数大小，如果底层的数据库类型不支持将忽略 size 。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetDataParameterInstance(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            通过指定参数名称，参数值，参数传递方向创建 IDataParameter 实例。
            </summary>
            <param name="paramName">参数名称。</param>
            <param name="paramValue">参数值。</param>
            <param name="direction">参数传递方向。</param>
            <returns>返回创建好的 IDataParameter 对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetDataParameterInstance(System.String,System.String)">
            <summary>
            根据指定的参数名称，参数类型字符串创建 IDataParameter 对象。
            </summary>
            <param name="paramName">参数名称。</param>
            <param name="dbTypeString">参数类型字符串。
            该字符串为符合指定数据库类型的 DbType 的枚举名称，依赖于当前 IDataAccess 的对象实例。
            例如：
            如果当前对象是 OracleDataAccess 类型实例，则应该为 OracleType 枚举类型下的值表示的字符串，如：Clob
            如果是 SqlDataAccess 类型实例，则应该为 SqlDbType 枚举类型下的值表示的字符串，如：Bit
            </param>
            <returns>返回创建好的 IDataParameter 对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Load(System.Data.DataTable)">
            <summary>
            根据提供的参数 dataTable ，从参数中提取查询的表名及字段名，并从数据库中检索数据填充到该 dataTable 。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Load(System.Data.DataTable,System.String)">
            <summary>
            根据提供的参数 dataTable ，从参数中提取查询的表名及字段名，并从数据库中检索数据填充到该 dataTable 。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="conditionSql">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Load(System.Data.DataTable,System.String,System.String)">
            <summary>
            根据提供的参数 dataTable ，从参数中提取查询的表名及字段名，并从数据库中检索数据填充到该 dataTable 。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="conditionSql">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)，如果没有可以为空。</param>
            <param name="sort">查询时排序的规则(不带 Order By 关键字)，如果没有可以为空。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Load(System.Type,System.String)">
            <summary>
            根据提供的表示一行数据的类型对象提取查询的字段名称，从数据库中检索数据填充到 ArrayList 集合中。
            </summary>
            <param name="t">表示一行数据的对象类型。</param>
            <param name="tableName">需要查询数据的表名称。</param>
            <returns>返回表示查询结果的 ArrayList 集合，其中每一个元素为提供的参数 t 所创建的对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Load(System.Type,System.String,System.String)">
            <summary>
            根据提供的表示一行数据的类型对象提取查询的字段名称，从数据库中检索数据填充到 ArrayList 集合中。
            </summary>
            <param name="t">表示一行数据的对象类型。</param>
            <param name="tableName">需要查询数据的表名称。</param>
            <param name="conditionSql">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)，如果没有可以为空。</param>
            <returns>返回表示查询结果的 ArrayList 集合，其中每一个元素为提供的参数 t 所创建的对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Load(System.Type,System.String,System.String,System.String)">
            <summary>
            根据提供的表示一行数据的类型对象提取查询的字段名称，从数据库中检索数据填充到 ArrayList 集合中。
            </summary>
            <param name="t">表示一行数据的对象类型。</param>
            <param name="tableName">需要查询数据的表名称。</param>
            <param name="conditionSql">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)，如果没有可以为空。</param>
            <param name="sort">查询时排序的规则(不带 Order By 关键字)，如果没有可以为空。</param>
            <returns>返回表示查询结果的 ArrayList 集合，其中每一个元素为提供的参数 t 所创建的对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Load``1(System.String,System.String,System.String)">
            <summary>
            根据提供的表示一行数据的类型提取查询的字段名称，从数据库中检索数据填充到 List&lt;T&gt; 集合中。
            </summary>
            <param name="tableName">需要查询数据的表名称。</param>
            <param name="conditionSql">检索数据时的限制条件 SQL 子句(不带 WHERE 关键字)，如果没有可以为空。</param>
            <param name="sort">查询时排序的规则(不带 Order By 关键字)，如果没有可以为空。</param>
            <typeparam name="T">行数据所属类型。</typeparam>
            <returns>返回表示查询结果的 List&lt;T&gt; 集合，其中每一个元素为提供的参数 T 所创建的对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.LoadBySql``1(System.String,System.Object[])">
            <summary>
            执行指定的SQL语句，返回第一行数据。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <typeparam name="T">行数据所属类型。</typeparam>
            <returns>返回执行查询的第一行数据。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillDataTable(System.Data.DataTable,System.String,System.Object[])">
            <summary>
            检索指定的数据填充到指定的 DataTable 对象中。
            适用于指定字段条件检索多条数据。
            </summary>
            <param name="table">要填充检索结果数据的 DataTable 对象，如果存在列信息，则只填充已存在的列，否则，填充数据库中指定名称表的所有字段。</param>
            <param name="tableName">检索数据的表名称。</param>
            <param name="fieldsAndValues">指示检索数据的字段名称和值。例如：字段1，值1，字段2，值2 ...</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillDataTable(System.Data.DataTable,System.String,BFC.SDK.Data.SortOrder[],System.Object[])">
            <summary>
            检索指定的数据填充到指定的 DataTable 对象中。
            适用于指定字段条件检索多条数据。
            </summary>
            <param name="table">要填充数据的 DataTable 对象中，如果存在列信息，则只填充已存在的列，否则，填充数据库中指定名称表的所有字段。</param>
            <param name="tableName">检索数据的表名称。</param>
            <param name="orderBy">排序。</param>
            <param name="fieldsAndValues">指示检索数据的字段名称和值。例如：字段1，值1，字段2，值2 ...</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.LoadDataModelList``1(System.String,System.Object[])">
            <summary>
            检索指定的数据并填充到 List&lt;T&gt; 集合中。
            适用于指定字段条件检索多条数据。
            </summary>
            <param name="tableName">检索数据的表名称。</param>
            <param name="fieldsAndValues">指示检索数据的字段名称和值。例如：字段1，值1，字段2，值2 ...</param>
            <typeparam name="T">表示一行数据的对象类型。</typeparam>
            <returns>
            返回数据模型 IList 对象。
            如果没有检索到结果则返回零长度的 List&lt;T&gt; 对象。
            </returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.LoadDataModelList``1(System.String,BFC.SDK.Data.SortOrder[],System.Object[])">
            <summary>
            检索指定的数据返回数据模型 IList 对象。
            适用于指定字段条件检索多条数据。
            </summary>
            <param name="tableName">检索数据的表名称。</param>
            <param name="fieldsAndValues">指示检索数据的字段名称和值。例如：字段1，值1，字段2，值2 ...</param>
            <param name="orderBy">排序。</param>
            <returns>
            返回数据模型 IList 对象。
            如果没有检索到结果则返回零长度的 IList 对象。
            </returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.LoadDataModel``1(System.String,System.Object[])">
            <summary>
            检索指定的数据返回数据模型对象。
            适用于指定主键条件检索单条数据。
            </summary>
            <param name="tableName">检索数据的表名称。</param>
            <param name="fieldsAndValues">指示检索数据的字段名称和值。例如：字段1，值1，字段2，值2 ...</param>
            <typeparam name="T">表示一行数据的对象类型。</typeparam>
            <returns>
            返回数据模型对象。
            如果检索的结果有多条记录，则返回第一条记录组装的数据对象。
            如果没有检索到结果则返回 null 。
            </returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillRowsByPrimaryKeysValue(System.Data.DataTable)">
            <summary>
            根据提供的 DataTable 对象的主键字段和值作为条件检索数据填充该 DataTable 对象中的非主键字段。
            </summary>
            <param name="dataTable">填充数据的 DataTable 对象。</param>
            <returns>实际填充的行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteScalar(System.String,System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行。
            </summary>
            <param name="selectSql">需要执行的SQL语句。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>返回查询到的结果集中第一行的第一列的值，如果未查询到数据则返回 null。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteScalar(System.String,System.Data.IDataParameter[])">
            <summary>
             执行查询，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行。  
            </summary>
            <param name="selectSql">需要执行的 SQL 查询语句。</param>
            <param name="commandParameters">SQL 语句中的参数信息。</param>
            <returns>返回查询到的结果集中第一行的第一列的值，如果未查询到数据则返回 null。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteScalarBySP(System.String,System.Object[])">
            <summary>
            执行指定的存储过程，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行。
            </summary>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>返回查询到的结果集中第一行的第一列的值，如果未查询到数据则返回 null。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteScalarBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的存储过程，并返回查询所返回的结果集中第一行的第一列。忽略额外的列或行。
            </summary>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="commandParameters">存储过程中的参数信息。</param>
            <returns>返回查询到的结果集中第一行的第一列的值，如果未查询到数据则返回 null。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteDataReader(System.String,System.Object[])">
            <summary>
            执行查询，并返回 System.Data.IDataReader 对象。
            </summary>
            <param name="selectSql">需要执行的 SQL 语句。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>查询到的 System.Data.IDataReader 对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteDataReader(System.String,System.Data.IDataParameter[])">
            <summary>
            执行查询，并返回 System.Data.IDataReader 对象。
            </summary>
            <param name="selectSql">需要执行的 SQL 查询语句。</param>
            <param name="commandParameters">SQL 语句中的参数信息。</param>
            <returns>查询到的 System.Data.IDataReader 对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteDataReaderBySP(System.String,System.Object[])">
            <summary>
            执行指定的存储过程，并返回 System.Data.IDataReader 对象。
            </summary>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>查询到的 System.Data.IDataReader 对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.ExecuteDataReaderBySP(System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定的存储过程，并返回 System.Data.IDataReader 对象。
            </summary>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="commandParameters">存储过程的参数信息。</param>
            <returns>查询到的 System.Data.IDataReader 对象。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillPaginalData(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            执行SQL查询语句，向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="selectSql">要检索数据的查询 SQL 语句。</param>
            <param name="pageSize">分页时每页的数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillPaginalData(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Data.IDataParameter[])">
            <summary>
            执行SQL查询语句，向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="selectSql">需要执行的 SQL 查询语句。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters">SQL 语句中的参数信息。</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillPaginalData(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Decimal},System.Data.IDataParameter[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="selectSql"></param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <param name="commandParameters"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillPaginalDataBySP(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            执行存储过程，向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillPaginalDataBySP(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Data.IDataParameter[])">
            <summary>
            执行存储过程，向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="spName">存储过程名称。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters">存储过程中的参数信息。</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillPaginalData``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="selectSql">要检索数据的查询 SQL 语句。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillPaginalData``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Decimal},System.Data.IDataParameter[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="selectSql"></param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters"></param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillPaginalData``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Decimal},System.Object[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="selectSql">要检索数据的查询 SQL 语句。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues"></param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillPaginalData``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Data.IDataParameter[])">
            <summary>
            执行 SQL 查询语句，向指定的 IList&lt;T&gt; 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList&lt;T&gt; 对象。</param>
            <param name="selectSql">需要执行的 SQL 查询语句。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters">SQL 语句中包含的参数信息。</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillPaginalDataBySP``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            执行存储过程，向指定的 IList&lt;T&gt; 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList&lt;T&gt; 对象。</param>
            <param name="spName">需要执行的存储过程名称。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="parameterNameAndValues">参数名称和值数组。格式如下：参数名1，值1，参数名2，值2...</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillPaginalDataBySP``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Data.IDataParameter[])">
            <summary>
            执行存储过程，向指定的 IList&lt;T&gt; 对象填充指定页的数据。
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="spName">存储过程名称。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters">存储过程中包含的参数信息。</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.FillPaginalDataBySP``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Decimal},System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="spName">存储过程名称。</param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters"></param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.CombineFieldValueEqualExpress(System.String,System.Object,System.String)">
            <summary>
            组装“字段=值”的SQL表达式语句。
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <param name="datetimeFormat"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.CombineFieldValueEqualExpress(System.String,System.Object)">
            <summary>
            组装“字段=值”的SQL表达式语句。
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetBatchExecuteSqlSeparator">
            <summary>
            获取批处理语句块中多个SQL语句之间的分隔符号，如“;\r\n”。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetBatchExecuteSqlBeginString">
            <summary>
            获取批处理SQL语句语句块的开始字符，如 “Begin\r\n” 等。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.GetBatchExecuteSqlEndString">
            <summary>
            获取批处理SQL语句块的结束字符，如 “END;” 等。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.EncodeFieldName(System.String)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.IDataAccess.EncodeTableName(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.IDataAccess.SqlTextCacheable">
            <summary>
            是否需要缓存已经执行过的SQL语句。
            如果设置为允许，请务必定时清除该缓存集合。
            当连接对象释放时，会自动清除该缓存集合。
            默认值为 false，即不缓存。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.IDataAccess.SqlTextCacheList">
            <summary>
            缓存的SQL语句集合。
            </summary>
        </member>
        <member name="E:BFC.SDK.Data.DataAccess.IDataAccess.Opened">
            <summary>
            表示连接已打开的事件。
            </summary>
        </member>
        <member name="E:BFC.SDK.Data.DataAccess.IDataAccess.Closing">
            <summary>
            表示连接正在关闭的事件。
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.OdbcDataAccess">
            <summary>
            通过 ODBC 数据源连接数据库类。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.#ctor(System.Data.Odbc.OdbcConnection,System.Boolean)">
            <summary>
            使用一个 OdbcConnection 对象实例化 OdbcDataAccess 对象。
            由参数 canClose 决定该 OdbcConnection 对象是否随着当前 OdbcDataAccess 对象的关闭而关闭。
            </summary>
            <param name="connection">传入的 OdbcConnection 对象。</param>
            <param name="canClose">true:该 OdbcConnection 对象随着当前 OdbcDataAccess 对象的关闭而关闭；
            false:OdbcDataAccess 对象关闭不地关闭该 OdbcConnection 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.#ctor(System.Data.Odbc.OdbcConnection)">
            <summary>
            使用一个 OdbcConnection 对象实例化 OdbcDataAccess 对象。
            并且该 OdbcConnection 对象随着当前 OdbcDataAccess 对象的关闭而关闭。
            </summary>
            <param name="connection">传入的 OdbcConnection 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.GetDateTimeSqlString(System.DateTime,System.String)">
            <summary>
            
            </summary>
            <param name="date"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OdbcDataAccess.TrueValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OdbcDataAccess.FalseValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OdbcDataAccess.LikeString">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.CreateCommandInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.CreateDataAdapterInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.CreateConnectionInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.BFC#SDK#Data#DataAccess#IDataAccess#GetDataParameterInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.GetDataParameterInstance">
            <summary>
            创建一个 OdbcParameter 对象实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.GetDataParameterInstance(System.String,System.String)">
            <summary>
            根据提供的参数名称，以及 OdbcType 类型字符串创建 OdbcParameter 对象。
            </summary>
            <param name="paramName"></param>
            <param name="dbTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.GetDataParameterInstance(System.String,System.String,System.Int32)">
            <summary>
            创建指定名称的参数，并且指定大小。
            如果底层的数据库类型不支持将忽略 size 。
            </summary>
            <param name="paramName">参数名称。</param>
            <param name="dbTypeString">对应的数据库类型的参数类型名称，对应枚举 OdbcType 的值名称，如果为空则使用默认值。</param>
            <param name="size">指定参数大小 。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.FillImpl(System.Data.DataTable,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.FillImpl(System.Data.DataSet,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.EncodeFieldEntityName(System.String)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.EncodeTableEntityName(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.ChangeDatabase(System.String)">
            <summary>
            改变当前关联的默认数据库。
            </summary>
            <param name="database"></param>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OdbcDataAccess.ServerVersion">
            <summary>
            获取服务器的版本号。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OdbcDataAccess.Database">
            <summary>
             Gets the name of the current database or the database to be used after a connection is opened.
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OdbcDataAccess.DataSource">
            <summary>
            Gets the name of the instance of SQL Server to which to connect.
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.GetSchema">
            <summary>
            返回当前连接的数据源的架构信息。
            </summary>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.GetSchema(System.String)">
            <summary>
            使用指定的架构名称字符串返回当前连接的数据源的架构信息。
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.GetSchema(System.String,System.String[])">
            <summary>
            使用指定的架构名称字符串和指定的限制值字符串数组，返回当前连接的数据源的架构信息。
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.SetBatchExecuteSqlSeparator(System.String)">
            <summary>
            设置批量提交执行SQL语句时，各SQL语句间的分隔字符，如“;\r\n”。
            </summary>
            <param name="separator"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.SetBatchExecuteSqlBeginString(System.String)">
            <summary>
            设置批量提交执行SQL语句时，整个SQL语句块的起始字符，如“BEGIN\r\n”。
            </summary>
            <param name="beginString"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.SetBatchExecuteSqlEndString(System.String)">
            <summary>
            设置批量提交执行SQL语句时，整个SQL语句块的结束字符，如“END;”。
            </summary>
            <param name="endString"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.SetParameterPrefixInSql(System.String)">
            <summary>
            设置嵌入在SQL语句中的参数名称前缀标识符，如 SQL SERVER 数据库的参数名称前缀是“@”，Oracle 数据库的参数名称前缀是“:”。
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OdbcDataAccess.GetParameterPrefixInSql">
            <summary>
            获取嵌入在SQL语句中的参数名称前缀标识符。
            </summary>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.OracleDataAccess">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.#ctor(System.Data.OracleClient.OracleConnection,System.Boolean)">
            <summary>
            使用一个 OracleConnection 对象实例化 OracleDataAccess 对象。
            由参数 canClose 决定该 OracleConnection 对象是否随着当前 OracleDataAccess 对象的关闭而关闭。
            </summary>
            <param name="connection">传入的 OracleConnection 对象。</param>
            <param name="canClose">true:该 OracleConnection 对象随着当前 OracleDataAccess 对象的关闭而关闭；
            false:OracleDataAccess 对象关闭不地关闭该 OracleConnection 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.#ctor(System.Data.OracleClient.OracleConnection)">
            <summary>
            使用一个 OracleConnection 对象实例化 OracleDataAccess 对象。
            并且该 OracleConnection 对象随着当前 OracleDataAccess 对象的关闭而关闭。
            </summary>
            <param name="connection">传入的 OracleConnection 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.GetDateTimeSqlString(System.DateTime,System.String)">
            <summary>
            
            </summary>
            <param name="date"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OracleDataAccess.ParameterPrefixStringInSql">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OracleDataAccess.TrueValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OracleDataAccess.FalseValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OracleDataAccess.LikeString">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.CreateCommandInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.CreateDataAdapterInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.CreateConnectionInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.BFC#SDK#Data#DataAccess#IDataAccess#GetDataParameterInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.GetDataParameterInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.GetDataParameterInstance(System.String,System.String)">
            <summary>
            根据提供的参数名称，以及 OracleType 类型字符串创建 OracleParameter 对象。
            </summary>
            <param name="paramName"></param>
            <param name="dbTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.GetDataParameterInstance(System.String,System.String,System.Int32)">
            <summary>
            创建指定名称的参数，并且指定大小。
            如果底层的数据库类型不支持将忽略 size 。
            </summary>
            <param name="paramName">参数名称。</param>
            <param name="dbTypeString">对应的数据库类型的参数类型名称，对应枚举 OracleType 的值名称，如果为空则使用默认值。</param>
            <param name="size">指定参数大小 。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.FillImpl(System.Data.DataTable,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.FillImpl(System.Data.DataSet,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.EncodeFieldEntityName(System.String)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.EncodeTableEntityName(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.ChangeDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OracleDataAccess.ServerVersion">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.GetSchema">
            <summary>
            返回当前连接的数据源的架构信息。
            </summary>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.GetSchema(System.String)">
            <summary>
            使用指定的架构名称字符串返回当前连接的数据源的架构信息。
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OracleDataAccess.GetSchema(System.String,System.String[])">
            <summary>
            使用指定的架构名称字符串和指定的限制值字符串数组，返回当前连接的数据源的架构信息。
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OracleDataAccess.DataSource">
            <summary>
            
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.SqlDataAccess">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.#ctor(System.Data.SqlClient.SqlConnection,System.Boolean)">
            <summary>
            使用一个 SqlConnection 对象实例化 SqlDataAccess 对象。
            由参数 canClose 决定该 SqlConnection 对象是否随着当前 SqlDataAccess 对象的关闭而关闭。
            </summary>
            <param name="connection">传入的 SqlConnection 对象。</param>
            <param name="canClose">true:该 SqlConnection 对象随着当前 SqlDataAccess 对象的关闭而关闭；
            false:SqlDataAccess 对象关闭不地关闭该 SqlConnection 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            使用一个 SqlConnection 对象实例化 SqlDataAccess 对象。
            并且该 SqlConnection 对象随着当前 SqlDataAccess 对象的关闭而关闭。
            </summary>
            <param name="connection">传入的 SqlConnection 对象。</param>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlDataAccess.mSqlConnection">
            <summary>
            获取当前的 SqlConnection 类型的连接实例。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.EndProcessStringSqlValueString(System.String)">
            <summary>
            
            </summary>
            <param name="stringSqlValue"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.GetDateTimeSqlString(System.DateTime,System.String)">
            <summary>
            
            </summary>
            <param name="date"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlDataAccess.ParameterPrefixStringInSql">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlDataAccess.TrueValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlDataAccess.FalseValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlDataAccess.LikeString">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.CreateCommandInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.CreateDataAdapterInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.CreateConnectionInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.BFC#SDK#Data#DataAccess#IDataAccess#GetDataParameterInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.GetDataParameterInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.GetDataParameterInstance(System.String,System.String)">
            <summary>
            根据提供的参数名称，以及 SqlDbType 类型字符串创建 SqlParameter 对象。
            </summary>
            <param name="paramName"></param>
            <param name="dbTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.GetDataParameterInstance(System.String,System.String,System.Int32)">
            <summary>
            创建指定名称的参数，并且指定大小。
            如果底层的数据库类型不支持将忽略 size 。
            </summary>
            <param name="paramName">参数名称。</param>
            <param name="dbTypeString">对应的数据库类型的参数类型名称，对应枚举 SqlDbType 的值名称，如果为空则使用默认值。</param>
            <param name="size">指定参数大小 。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.FillImpl(System.Data.DataTable,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.FillImpl(System.Data.DataSet,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.EncodeFieldEntityName(System.String)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.EncodeTableEntityName(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.ChangeDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="database"></param>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlDataAccess.ServerVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlDataAccess.Database">
            <summary>
             Gets the name of the current database or the database to be used after a connection is opened.
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlDataAccess.DataSource">
            <summary>
            Gets the name of the instance of SQL Server to which to connect.
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.TransactionSave(System.String)">
            <summary>
            在事务中创建保存点，它可用于回滚事务的一部分,并指定保存点名称。
            </summary>
            <param name="savePintName">保存点名称。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.RollbackTransaction(System.String)">
            <summary>
             从挂起状态回滚事务，并指定回滚事务的保存点名称。
            </summary>
            <param name="savePintName">回滚事务的保存点名称。</param>	
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.GetSchema">
            <summary>
            返回当前连接的数据源的架构信息。
            </summary>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.GetSchema(System.String)">
            <summary>
            使用指定的架构名称字符串返回当前连接的数据源的架构信息。
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.GetSchema(System.String,System.String[])">
            <summary>
            使用指定的架构名称字符串和指定的限制值字符串数组，返回当前连接的数据源的架构信息。
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.FillPaginalData``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Decimal},System.Data.IDataParameter[])">
            <summary>
            向指定的 List 对象填充指定页的数据。
            将参考 FillPaginalDataNoCount 属性决定是否返回数据总行数。
            </summary>
            <param name="list">要填充数据的 IList 对象。</param>
            <param name="selectSql"></param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="commandParameters"></param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.SqlDataAccess.FillPaginalData(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Decimal},System.Data.IDataParameter[])">
            <summary>
            向指定的 DataTable 对象填充指定页的数据。
            将参考 FillPaginalDataNoCount 属性决定是否返回数据总行数。
            </summary>
            <param name="dataTable">要填充数据的 DataTable 对象。</param>
            <param name="selectSql"></param>
            <param name="pageSize">分页时每页数据行数。</param>
            <param name="curPageNum">当前需要取得数据的页码（起始页从 1 开始计数）。</param>
            <param name="sumFields">需要存储进行合计的字段集合，对应的 Value 即为合计后的值。</param>
            <param name="commandParameters"></param>
            <returns>提供的查询语句中结果集总行数。</returns>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlDataAccess.IsUnicodeSqlString">
            <summary>
            是否对SQL语句中的字符串常量进行Unicode化，如在前面加上“N”。
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.OleDbDataAccess">
            <summary>
            通过 OLEDB 提供程序连接数据库类。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.#ctor(System.Data.OleDb.OleDbConnection,System.Boolean)">
            <summary>
            使用一个 OleDbConnection 对象实例化 OleDbDataAccess 对象。
            由参数 canClose 决定该 OleDbConnection 对象是否随着当前 OleDbDataAccess 对象的关闭而关闭。
            </summary>
            <param name="connection">传入的 OleDbConnection 对象。</param>
            <param name="canClose">true:该 OleDbConnection 对象随着当前 OleDbDataAccess 对象的关闭而关闭；
            false:OleDbDataAccess 对象关闭不地关闭该 OleDbConnection 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.#ctor(System.Data.OleDb.OleDbConnection)">
            <summary>
            使用一个 OleDbConnection 对象实例化 OleDbDataAccess 对象。
            并且该 OleDbConnection 对象随着当前 OleDbDataAccess 对象的关闭而关闭。
            </summary>
            <param name="connection">传入的 OleDbConnection 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.GetDateTimeSqlString(System.DateTime,System.String)">
            <summary>
            
            </summary>
            <param name="date"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OleDbDataAccess.ParameterPrefixStringInSql">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OleDbDataAccess.TrueValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OleDbDataAccess.FalseValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OleDbDataAccess.LikeString">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.CreateCommandInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.CreateDataAdapterInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.CreateConnectionInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.BFC#SDK#Data#DataAccess#IDataAccess#GetDataParameterInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.GetDataParameterInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.GetDataParameterInstance(System.String,System.String)">
            <summary>
            根据提供的参数名称，以及 OleDbType 类型字符串创建 OleDbParameter 对象。
            </summary>
            <param name="paramName"></param>
            <param name="dbTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.GetDataParameterInstance(System.String,System.String,System.Int32)">
            <summary>
            创建指定名称的参数，并且指定大小。
            如果底层的数据库类型不支持将忽略 size 。
            </summary>
            <param name="paramName">参数名称。</param>
            <param name="dbTypeString">对应的数据库类型的参数类型名称，对应枚举 OleDbType 的值名称，如果为空则使用默认值。</param>
            <param name="size">指定参数大小 。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.FillImpl(System.Data.DataTable,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="dataTable"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.FillImpl(System.Data.DataSet,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            
            </summary>
            <param name="dataSet"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.EncodeFieldEntityName(System.String)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.EncodeTableEntityName(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.ChangeDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="database"></param>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OleDbDataAccess.ServerVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OleDbDataAccess.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OleDbDataAccess.DataSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.GetSchema">
            <summary>
            返回当前连接的数据源的架构信息。
            </summary>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.GetSchema(System.String)">
            <summary>
            使用指定的架构名称字符串返回当前连接的数据源的架构信息。
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.GetSchema(System.String,System.String[])">
            <summary>
            使用指定的架构名称字符串和指定的限制值字符串数组，返回当前连接的数据源的架构信息。
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns>包含架构信息的 System.Data.DataTable。</returns>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.OleDbDataAccess.DataProvider">
            <summary>
            获取当前 OLE DB 提供者。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.SetBatchExecuteSqlSeparator(System.String)">
            <summary>
            设置批量提交执行SQL语句时，各SQL语句间的分隔字符，如“;\r\n”。
            </summary>
            <param name="separator"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.SetBatchExecuteSqlBeginString(System.String)">
            <summary>
            设置批量提交执行SQL语句时，整个SQL语句块的起始字符，如“BEGIN\r\n”。
            </summary>
            <param name="beginString"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.SetBatchExecuteSqlEndString(System.String)">
            <summary>
            设置批量提交执行SQL语句时，整个SQL语句块的结束字符，如“END;”。
            </summary>
            <param name="endString"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.SetParameterPrefixInSql(System.String)">
            <summary>
            设置嵌入在SQL语句中的参数名称前缀标识符，如 SQL SERVER 数据库的参数名称前缀是“@”，Oracle 数据库的参数名称前缀是“:”。
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.OleDbDataAccess.GetParameterPrefixInSql">
            <summary>
            获取嵌入在SQL语句中的参数名称前缀标识符。
            </summary>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.DataProvider">
            <summary>
            数据提供者类型。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DataAccess.DataProvider.SQLOLEDB">
            <summary>
            基于 SQL Server 的 OLE DB 提供者。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DataAccess.DataProvider.MicrosoftJetOLEDB">
            <summary>
            基于 Access 的 OLE DB 提供者。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DataAccess.DataProvider.MSDAORA">
            <summary>
            基于 Oracle 的 OLE DB 提供者。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DataAccess.DataProvider.ASAProv">
            <summary>
            基于 Sybase 的 OLE DB 提供者
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DataAccess.DataProvider.Other">
            <summary>
            其他的 OLE DB 提供者。
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.SqlGeneratorSetting">
            <summary>
            设置 DataAccess 类生成SQL语句时的行为。
            本类中所有的模式字符串中，{0} 表示表名称，{1}表示字段名称，{2}表示组装SQL语句中的字段值。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlGeneratorSetting.TableName">
            <summary>
            当前设置要应用到的表名称。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlGeneratorSetting.FieldName">
            <summary>
            当前设置要应用到的字段名称。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlGeneratorSetting.SelectFieldPattern">
            <summary>
            查询字段时的 SQL 语句模式字符串。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlGeneratorSetting.UpdateValuePattern">
            <summary>
            更新字段值时的 SQL 语句模式字符串。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlGeneratorSetting.WhereConditionValuePattern">
            <summary>
            Where 条件中的字段匹配值的模式字符串。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.SqlGeneratorSetting.WhereConditionFieldPattern">
            <summary>
            Where 条件中的字段的模式字符串。
            </summary>
        </member>
    </members>
</doc>
