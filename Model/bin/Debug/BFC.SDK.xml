<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BFC.SDK</name>
    </assembly>
    <members>
        <member name="T:BFC.SDK.Argument">
            <summary>
            Argument 类，提供一些参数检查的静态方法，如果检查不通过则引发相应的异常。
            </summary>
        </member>
        <member name="M:BFC.SDK.Argument.CheckParameterNull(System.Object,System.String)">
            <summary>
            检查指定的参数是否为 NULL，如果是则抛出一 ArgumentNullException 类型的异常。
            </summary>
            <param name="parameterValue">待检查的参数值。</param>
            <param name="parameterName">待检查的参数名。</param>
        </member>
        <member name="M:BFC.SDK.Argument.CheckStringParameter(System.String,System.String)">
            <summary>
            检查指定的 string 类型参数是否为 NULL 或 Empty，如果是则抛出一 StringArgumentException 类型的异常。
            </summary>
            <param name="parameterValue">待检查的参数值。</param>
            <param name="parameterName">待检查的参数名。</param>
        </member>
        <member name="M:BFC.SDK.Argument.CheckParameter(System.Object,System.String,System.Boolean)">
            <summary>
            检查指定的参数是否为 NULL，如果参数类型为 string 还将根据 isCheckStringEmty 选项检查是否为零长度字符串，如果是则抛出一 StringArgumentException 类型的异常。
            </summary>
            <param name="parameterValue">待检查的参数值。</param>
            <param name="parameterName">待检查的参数名。</param>
            <param name="isCheckStringEmty">如果待检查的参数是字符串型，是否检查该值为零长度字符串。</param>
        </member>
        <member name="M:BFC.SDK.Argument.CheckParameterNull(System.Object[],System.String[])">
            <summary>
            检查指定的参数是否为 NULL，如果是则抛出一 ArgumentNullException 类型的异常。
            </summary>
            <param name="parameterValue">待检查的参数值数组。</param>
            <param name="parameterName">待检查的参数名数组。</param>
        </member>
        <member name="M:BFC.SDK.Argument.CheckStringParameter(System.String[],System.String[])">
            <summary>
            检查指定的 string 类型参数是否为 NULL 或 Empty，如果是则抛出一 StringArgumentException 类型的异常，参数名数组与参数值数组之间必须一一对应。
            </summary>
            <param name="parameterValue">待检查的参数值数组。</param>
            <param name="parameterName">待检查的参数名数组。</param>
        </member>
        <member name="M:BFC.SDK.Argument.CheckParameter(System.Object[],System.String[],System.Boolean)">
            <summary>
            检查指定的参数是否为 NULL，如果参数类型为 string 还将根据 isCheckStringEmty 选项检查是否为零长度字符串，如果是则抛出一 StringArgumentException 类型的异常。
            </summary>
            <param name="parameterValue">待检查的参数值数组。</param>
            <param name="parameterName">待检查的参数名数组。</param>
            <param name="isCheckStringEmty">如果待检查的参数是字符串型，是否检查该值为零长度字符串。</param>
        </member>
        <member name="M:BFC.SDK.Argument.ConvertToArgumentString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            将键值对形式的参数和参值集合转换为以“;”分隔的字符串。
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Argument.ConvertToArgumentString(System.Collections.Generic.Dictionary{System.String,System.String},System.Char)">
            <summary>
            将键值对形式的参数和参值集合转换为以指定分隔符分隔的字符串。
            </summary>
            <param name="args"></param>
            <param name="argSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Argument.ParseArgumentString(System.String)">
            <summary>
            将"name=value;" 格式的字符串转换为Dictionary键值对，参数间以“;”分隔。
            </summary>
            <param name="argString">“name=value;...” 格式的字符串</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Argument.ParseArgumentString(System.String,System.Char)">
            <summary>
            将"name=value;" 格式的字符串转换为Dictionary键值对
            </summary>
            <param name="argString">“name=value;...” 格式的字符串</param>
            <param name="argSeparator">指定参数间的分隔字符。</param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.CachePoorManager">
            <summary>
            缓存管理类.
            </summary>
        </member>
        <member name="F:BFC.SDK.CachePoorManager.syncRoot">
            <summary>
            用于保证线程安全进行锁定的对象
            </summary>
        </member>
        <member name="F:BFC.SDK.CachePoorManager.mHashPoor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.CachePoorManager.GetCacheContent(System.String,BFC.SDK.CachePoorGetDataCallback,System.Object[])">
            <summary>
            从缓冲池中取得数据的通用方法。
            </summary>
            <param name="key">存入缓冲池的 Key.</param>
            <param name="getDataCallBack">刷新/取得数据的回调方法。</param>
            <param name="param">需要传入参数集合。</param>
            <returns>缓冲池中取得的实际结果。</returns>
        </member>
        <member name="M:BFC.SDK.CachePoorManager.RemoveCacheContent(System.String)">
            <summary>
            从缓冲池中移除数据，但为保证线程安全并不 Dispose 该对象。
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:BFC.SDK.CachePoorManager.RefreshCache(System.String)">
            <summary>
            刷新指定的缓存数据。
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:BFC.SDK.CachePoorManager.RefreshCache">
            <summary>
            刷新所有的缓存数据。
            注意：执行该方法会对缓冲池进行短暂锁定。
            </summary>
        </member>
        <member name="T:BFC.SDK.CachePoorGetDataCallback">
            <summary>
            执行刷新缓冲池对象的委托类。
            </summary>
        </member>
        <member name="T:BFC.SDK.CompressHelper">
            <summary>
            提供压缩方法的类。
            </summary>
        </member>
        <member name="M:BFC.SDK.CompressHelper.Compress(System.Byte[])">
            <summary>
            压缩指定的字节流。
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.CompressHelper.Decompress(System.Byte[])">
            <summary>
            解压缩字节流
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.RuntimeProgressChangedHandlerArg">
            <summary>
            运行时状态变化委托参数信息。
            </summary>
        </member>
        <member name="P:BFC.SDK.RuntimeProgressChangedHandlerArg.Prompt">
            <summary>
            提示性文本。
            </summary>
        </member>
        <member name="P:BFC.SDK.RuntimeProgressChangedHandlerArg.CurrentProgress">
            <summary>
            当前进度。
            </summary>
        </member>
        <member name="P:BFC.SDK.RuntimeProgressChangedHandlerArg.MaximumProgress">
            <summary>
            最大需要完成的进度。
            </summary>
        </member>
        <member name="P:BFC.SDK.RuntimeProgressChangedHandlerArg.Cancel">
            <summary>
            是否要取消后续操作。
            </summary>
        </member>
        <member name="P:BFC.SDK.RuntimeProgressChangedHandlerArg.Data">
            <summary>
            需要传递的用户自定义数据。
            </summary>
        </member>
        <member name="T:BFC.SDK.RuntimeProgressChangedHandler">
            <summary>
            运行状态变化的委托。
            </summary>
            <param name="arg"></param>
        </member>
        <member name="T:BFC.SDK.DevConvert">
            <summary>
            提供各种类型转换的静态方法类。
            </summary>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetIntValue(System.Object)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回 0，否则返回转换 objValue 为 int 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <returns>替换或转换之后的 int 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetIntValue(System.Object,System.Int32)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回 DBNullReplace 指定的值，否则返回转换 objValue 为 int 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <param name="DBNullReplace">如果 objValue 为 DBNull 时要替换的值。</param>
            <returns>替换或转换之后的 int 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetLongValue(System.Object)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回 0，否则返回转换 objValue 为 long 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <returns>替换或转换之后的 long 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetLongValue(System.Object,System.Int64)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回 DBNullReplace 指定的值，否则返回转换 objValue 为 long 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <param name="DBNullReplace">如果 objValue 为 DBNull 时要替换的值。</param>
            <returns>替换或转换之后的 long 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetDecimalValue(System.Object)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回 0 ，否则返回转换 objValue 为 decimal 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <returns>替换或转换之后的 decimal 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetDecimalValue(System.Object,System.Decimal)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回指定需要替换的 decimal 类型值，否则返回转换 objValue 为 decimal 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <param name="DBNullReplace">如果 objValue 为 DBNull 时要替换的值。</param>
            <returns>替换或转换之后的 decimal 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetDoubleValue(System.Object)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回 0，否则返回转换 objValue 为 double 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <returns>替换或转换之后的 double 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetDoubleValue(System.Object,System.Double)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回指定需要替换的 double 类型值，否则返回转换 objValue 为 double 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <param name="DBNullReplace">如果 objValue 为 DBNull 时要替换的值。</param>
            <returns>替换或转换之后的 double 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetFloatValue(System.Object)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回 0，否则返回转换 objValue 为 float 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <returns>替换或转换之后的 float 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetFloatValue(System.Object,System.Single)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回指定需要替换的 float 类型值，否则返回转换 objValue 为 float 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <param name="DBNullReplace">如果 objValue 为 DBNull 时要替换的值。</param>
            <returns>替换或转换之后的 float 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetDateTimeValue(System.Object)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回当前时间，否则返回转换 objValue 为 DateTime 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <returns>替换或转换之后的 DateTime 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetDateTimeValue(System.Object,System.DateTime)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回指定需要替换的 DateTime 类型值，否则返回转换 objValue 为 DateTime 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <param name="DBNullReplace">如果 objValue 为 DBNull 时要替换的值。</param>
            <returns>替换或转换之后的 DateTime 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetBoolValue(System.Object)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回 false，否则返回转换 objValue 为 bool 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <returns>替换或转换之后的 bool 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetBoolValue(System.Object,System.Boolean)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回指定需要替换的 bool 类型值，否则返回转换 objValue 为 bool 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <param name="DBNullReplace">如果 objValue 为 DBNull 时要替换的值。</param>
            <returns>替换或转换之后的 bool 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.StringToBoolean(System.String,System.Boolean)">
            <summary>
            将字符串转换为 System.Boolean 类型的值。
            </summary>
            <param name="value"></param>
            <param name="nullOrEmptyDefaultValue">指字当提供的 value 参数为空引用(null)或空字符串时返回的 System.Boolean 类型值。</param>
            <returns>
            如果提供的字符串值为空引用(null)或空字符串则返回参数 nullOrEmptyDefaultValue 提供的值。
            如果提供的字符串值为"1"、"-1"、"true"(不区分大小写)则返回 true；
            如果提供的字符串值为"0"、"false"(不区分大小写)则返回 false；
            否则抛出异常。
            </returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.Base64StringToObject(System.String)">
            <summary>
            获取以 serialized 定义的已经二进制序列化并且以 base64 编码存储字符串表示的对象。
            </summary>
            <param name="base64String"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.BinaryDeserialize(System.Byte[])">
            <summary>
            将二进制序列化之后的字节数组反序列化。
            </summary>
            <param name="objData"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetStringValue(System.Object)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回 string.Empty，否则返回转换 objValue 为 string 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <returns>替换或转换之后的 string 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetStringValue(System.Object,System.String)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回指定需要替换的 string 类型值，否则返回转换 objValue 为 string 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <param name="DBNullReplace">如果 objValue 为 DBNull 时要替换的值。</param>
            <returns>替换或转换之后的 string 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetCharValue(System.Object)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回 char.MinValue，否则返回转换 objValue 为 char 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <returns>替换或转换之后的 char 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.GetCharValue(System.Object,System.Char)">
            <summary>
            检查指定的参数 objValue 是否为 DBNull ，如果是则返回指定需要替换的 char 类型值，否则返回转换 objValue 为 char 类型的值。
            </summary>
            <param name="objValue">待检查并被转换的值。</param>
            <param name="DBNullReplace">如果 objValue 为 DBNull 时要替换的值。</param>
            <returns>替换或转换之后的 char 类型值。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.CheckValueEqual(System.Object,System.Object)">
            <summary>
            比较两个值是否相等，比较时，首先不精确匹配数据类型，按文本、数值、布尔比较，无法比较时再按对象比较。
            </summary>
            <param name="value1">待比较的值。</param>
            <param name="value2">待比较的值。</param>
            <returns>相等返回true，不相等则返回false。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.IsNumber(System.String)">
            <summary>
            判断指定的字符串是否是有效的数字形式。
            </summary>
            <param name="s">需要判断的字符串。</param>
            <returns>如果是数字形式返回 true；否则返回 false。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.IsDateTime(System.String)">
            <summary>
            判断指定的字符串是否是有效的 DateTime 形式。
            </summary>
            <param name="s">需要判断的字符串。</param>
            <returns>如果是 DateTime 形式返回 true；否则返回 false。</returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.ChangePath(System.String)">
            <summary>
            将当前应用程序域基本路径作为基本路径将指定路径转换为绝对完全路径，已经去除掉末尾的路径分隔符“\”。
            如要将工作目录作为作为基本路径将指定路径转换为绝对完全路径请使用 System.IO.Path.GetFullPath() 方法。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.DevConvert.ChangePath(System.String,System.String)">
            <summary>
            根据提供的基本路径将指定路径转换为绝对完全路径，已经去除掉末尾的路径分隔符“\”。
            </summary>
            <param name="basePath"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.DevLibConfig">
            <summary>
            操作 BFC.SDK.config 类。
            </summary>
        </member>
        <member name="M:BFC.SDK.DevLibConfig.InitDevLibConfigFile(System.String)">
            <summary>
            重置 BFC.SDK.config 文件，改变默认位置。
            </summary>
            <param name="configFile">需要重置 BFC.SDK.config 文件新位置。包含文件名的全路径。</param>
        </member>
        <member name="P:BFC.SDK.DevLibConfig.ConfigVariables">
            <summary>
            追加配置文件中可使用的变量。
            </summary>
        </member>
        <member name="M:BFC.SDK.DevLibConfig.ParseConfigSettingByConfigVariables(System.String)">
            <summary>
            解析 Config 中的设置值，将变量替换为对应的值。
            </summary>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.DevLibConfig.ConfigFileName">
            <summary>
            获取 BFC.SDK.config 含路径的文件名称。
            </summary>
        </member>
        <member name="M:BFC.SDK.DevLibConfig.ReadSettingByAttributeValue(System.String,System.String,System.String,System.String)">
            <summary>
            在指定的程序集和类型配置节下，根据指定属性和值精确查找对应唯一的类型配置节，再返回指定的另一个属性值。
            </summary>
            <param name="findByAttributeName">用于精确查找相应的类型配置节的属性名。</param>
            <param name="findByAttributeValue">用于精确查找相应的类型配置节的属性值。</param>
            <param name="name">需要获取的属性值。</param>
            <param name="defaultValue">如果未配置则需要返回的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.DevLibConfig.ParseFilePathSetting(System.String,System.Boolean,System.String@,System.String@)">
            <summary>
            对配置在 BFC.SDK.config 中的路径设置进行解析。
            如果是嵌入式资源设置，则还返回资源的名称。
            </summary>
            <param name="filePathSetting"></param>
            <param name="isEmbeddedSetting"></param>
            <param name="filePath"></param>
            <param name="resourceName"></param>
        </member>
        <member name="T:BFC.SDK.DevLibInformation">
            <summary>
            开发库的相关信息。
            </summary>
        </member>
        <member name="T:BFC.SDK.DevLibInformation.ConfigurationSectionName">
            <summary>
            Config 配置文件中的节名称定义。
            </summary>
        </member>
        <member name="F:BFC.SDK.DevLibInformation.ConfigurationSectionName.GlobalConfiguration">
            <summary>
            Config 配置文件中的 ApplicationConfiguration 节名称。
            </summary>
        </member>
        <member name="F:BFC.SDK.DevLibInformation.ConfigurationSectionName.DataAccessConfiguration">
            <summary>
            Config 配置文件中的 DataAccessConfiguration 节名称。
            </summary>
        </member>
        <member name="F:BFC.SDK.DevLibInformation.ConfigurationSectionName.WebConfiguration">
            <summary>
            Config 配置文件中的 WebConfiguration 节名称。
            </summary>
        </member>
        <member name="F:BFC.SDK.DevLibInformation.ConfigurationSectionName.WindowsConfiguration">
            <summary>
            Config 配置文件中的 WindowsFormsConfiguration 节名称。
            </summary>
        </member>
        <member name="P:BFC.SDK.DevLibInformation.LicenceProductId">
            <summary>
            用于授权的产品ID。
            </summary>
        </member>
        <member name="P:BFC.SDK.DevLibInformation.AppBasePath">
            <summary>
            返回应用程序的基本路径。
            </summary>
        </member>
        <member name="T:BFC.SDK.DevReflection">
            <summary>
            提供反射快速调用的方法，以便实现晚（后）期绑定。
            </summary>
        </member>
        <member name="M:BFC.SDK.DevReflection.#ctor(System.String)">
            <summary>
            以指定的程序集文件构造程序集对象和默认的类型。
            </summary>
            <param name="assemblyFile">要加载的程序集文件路径。</param>
        </member>
        <member name="M:BFC.SDK.DevReflection.#ctor(System.String,System.String)">
            <summary>
            以指定的程序集文件构造程序集对象和加载指定的类型。
            </summary>
            <param name="assemblyFile">要加载的程序集文件路径。</param>
            <param name="typeName">要加载的类型完整名称。</param>
        </member>
        <member name="M:BFC.SDK.DevReflection.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            以指定的程序集文件构构造程序集对象和加载指定的类型。
            </summary>
            <param name="assemblyFile">要加载的程序集文件路径。</param>
            <param name="typeName">要加载的类型完整名称。</param>
            <param name="ignoreCase">是否忽略大小写。</param>
        </member>
        <member name="M:BFC.SDK.DevReflection.#ctor(System.String,System.String,System.Object[],System.Boolean)">
            <summary>
            以指定的程序集文件构构造程序集对象和加载指定的类型。
            </summary>
            <param name="assemblyFile">要加载的程序集文件路径。</param>
            <param name="typeName">要加载的类型完整名称。</param>
            <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）。 </param>
            <param name="ignoreCase">是否忽略大小写。</param>
        </member>
        <member name="M:BFC.SDK.DevReflection.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            以指定的程序集构造程序集对象和加载指定的类型。
            </summary>
            <param name="assembly"></param>
            <param name="typeName"></param>
        </member>
        <member name="M:BFC.SDK.DevReflection.#ctor(System.Object)">
            <summary>
            以指定的对象实例进行实例化。
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:BFC.SDK.DevReflection.LoadedAssembly">
            <summary>
            获取当前已加载的程序集。
            </summary>
        </member>
        <member name="P:BFC.SDK.DevReflection.AssemblyFile">
            <summary>
            获取当前程序集文件路径。
            </summary>
        </member>
        <member name="P:BFC.SDK.DevReflection.LoadedType">
            <summary>
            获取当前已加载的程序集类型。
            </summary>
        </member>
        <member name="M:BFC.SDK.DevReflection.InvokeMethod(System.String,System.Object[])">
            <summary>
            根据指定的方法名称和参数调用相应的方法。
            </summary>
            <param name="methodName">要调用的方法名称。</param>
            <param name="args">需要传递的参数。</param>
            <returns>被调用方法返回的结果。</returns>
        </member>
        <member name="M:BFC.SDK.DevReflection.GetPropertyValue(System.String)">
            <summary>
            通过反射方法取得对象的属性值。
            </summary>
            <param name="propertyName">要取得值的属性名。</param>
            <returns>取到的属性值。</returns>
        </member>
        <member name="M:BFC.SDK.DevReflection.GetProperty(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.DevReflection.SetPropertyValue(System.String,System.Object)">
            <summary>
            通过反射方法设置对象的属性值。
            </summary>
            <param name="propertyName">需要设置新值的属性名。</param>
            <param name="value">要设置的值。</param>
        </member>
        <member name="M:BFC.SDK.DevReflection.IsNullableType(System.Type,System.Type@)">
            <summary>
            判断一个类型是否 System.Nullable 类型。
            </summary>
            <param name="t">需要判断的类型。</param>
            <param name="originalType">如果是 System.Nullable 类型，则返回原始类型，否则返回判断的类型本身。</param>
            <returns>如果是 System.Nullable 类型则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:BFC.SDK.DevReflection.GetNullableOriginalType(System.Type)">
            <summary>
            获取 System.Nullable 类型的实际类型。
            </summary>
            <param name="t">需要获取真实类型的 System.Nullable 类型。</param>
            <returns>如果提供的类型是 System.Nullable 类型，则返回原始类型，否则返回判断的类型本身。</returns>
        </member>
        <member name="M:BFC.SDK.DevReflection.IsInheritanceOf(System.Type,System.Type)">
            <summary>
            判断一个类型是否派生于指定的基类型或实现了指定的接口。
            如果提供的派生类型是 System.Nullable 类型，则判断以该类型的实际类型作判断。
            </summary>
            <param name="baseType">基类型或接口。</param>
            <param name="t">需要判断的类型。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.DevReflection.CreateInstance``1(System.String)">
            <summary>
            根据 Type 类型字符串创建类型实例。
            </summary>
            <param name="typeString">格式1：类型完整名称,程序集名称；格式2：类型完整名称,程序集完整路径</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.DevReflection.CreateInstance(System.String)">
            <summary>
            根据 Type 类型字符串创建类型实例。
            </summary>
            <param name="typeString">格式1：类型完整名称,程序集名称；格式2：类型完整名称,程序集完整路径</param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Formula.FormulaCompiler">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Formula.FormulaCompiler.AutoAddReturn">
            <summary>
            在生成脚本时是否自动在提供的公式表达式前面追加 "Return " 字符串。默认值为 true。
            如果公式是一段多行的脚本，则需要公式中根据实际情况加入 “Return” 语句，设置本属性为 false。
            </summary>
        </member>
        <member name="P:BFC.SDK.Formula.FormulaCompiler.AllowDebug">
            <summary>
            是否允许调试。
            </summary>
        </member>
        <member name="P:BFC.SDK.Formula.FormulaCompiler.Language">
            <summary>
            获取或设置编写公式的语言。
            设置为不同的语言可以在公式中使用相应的函数。例如：设置为 VisualBasic 可以直接使用 LEFT()，MID() 等函数。
            </summary>
        </member>
        <member name="P:BFC.SDK.Formula.FormulaCompiler.FieldNamePrefixCharInExpress">
            <summary>
            获取或设置用于在公式表达式中的变量名称前缀字符，默认为‘$’。
            </summary>
        </member>
        <member name="P:BFC.SDK.Formula.FormulaCompiler.OutputTempPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Formula.FormulaCompiler.FormulaNamespace">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Formula.FormulaCompiler.FormulaClassName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Formula.FormulaCompiler.FormulaBaseType">
            <summary>
            获取或设置公式类继承的基类型。
            该类型必须继承于 BFC.SDK.Formula.FormulaExecutor。
            公式中可以使用该基类中的方法、属性等成员。
            </summary>
        </member>
        <member name="P:BFC.SDK.Formula.FormulaCompiler.ImportNamespace">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Formula.FormulaCompiler.RefrenceAssemblies">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.AddFormulaFieldType(System.String,System.Type)">
            <summary>
            向公式中追加变量字段。当存在多个相同变量名称时，允许以“变量组名称->变量字段名称”来区分不同组名称下的相同变量字段名称。
            </summary>
            <param name="name">要追加的变量字段名称。当存在多个相同变量名称时，允许以“变量组名称->变量字段名称”来区分不同组名称下的相同变量字段名称。</param>
            <param name="type">该变量字段的数据类型，如果为 null，则默认为该变量字段的数据类型为 object 类型。</param>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.AddFormulaField(System.String[])">
            <summary>
            <para>向公式中追加变量字段。当存在多个相同变量名称时，允许以“变量组名称->变量字段名称”来区分不同组名称下的相同变量字段名称。</para>
            <para>例如：AddFormulaField("A->F1","B->F1","F2","F3");</para>
            </summary>
            <param name="name">一个或多个要追加的变量字段名称。当存在多个相同变量名称时，允许以“变量组名称->变量字段名称”来区分不同组名称下的相同变量字段名称。</param>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.ContainsFormulaField(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.GetAllFormulaFields">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.RemoveFormulaField(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.RemoveAllFormulaFields">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.AddFormulaExpress(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="express"></param>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.ContainsFormulaExpress(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.GetAllFormulaExpresses">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.GetFormulaExpresses(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.RemoveFormulaExpress(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.RemoveAllFormulaExpresses">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.GenerateCodeToFile(System.String@)">
            <summary>
            将公式编译成源代码文件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.CreateExecutor">
            <summary>
            创建一个公式执行对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.ParseExpressToCode(System.String)">
            <summary>
            将指定名称的公式解析为脚本代码。
            如果指定名称的公式不存在则会引发异常。
            </summary>
            <param name="expressName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaCompiler.TryParseAllExpress">
            <summary>
            尝试去解析各公式（如变量是否声明，双引号是否配对，括号是否配对等），如果有错误则返回对应的 FormulaExpressException 数组。
            如果没有任何错误则返回 null。
            </summary>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Formula.FormulaExpressException">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaExpressException.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="express"></param>
            <param name="errorCharIndex"></param>
            <param name="message"></param>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaExpressException.#ctor(System.String,System.String,System.Int32,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="express"></param>
            <param name="errorCharIndex"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:BFC.SDK.Formula.FormulaExpressException.ErrorCharIndex">
            <summary>
            发生错误的字符索引号，从 0 开始计数。
            即第 ErrorCharIndex + 1 个字符处。
            </summary>
        </member>
        <member name="T:BFC.SDK.Formula.FormulaLanguage">
            <summary>
            代码提供者。
            </summary>
        </member>
        <member name="F:BFC.SDK.Formula.FormulaLanguage.CSharp">
            <summary>
            C# 
            </summary>
        </member>
        <member name="F:BFC.SDK.Formula.FormulaLanguage.VisualBasic">
            <summary>
            VB.net
            </summary>
        </member>
        <member name="T:BFC.SDK.Formula.FormulaExecutor">
            <summary>
            公式编译后的执行对象基类。
            编译后的对象继承了本类。
            </summary>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaExecutor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaExecutor.SetFieldDataSource(System.String,System.Object)">
            <summary>
            为指定名称的字段变量进行赋值。
            如果指定名称变量不存在则返回异常。
            </summary>
            <param name="fieldName">要设置变量值的变量字段名称。当存在多个相同变量名称时，允许以“变量组名称->变量字段名称”来区分不同组名称下的相同变量字段名称。</param>
            <param name="value">要设置的值。</param>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaExecutor.SetFieldDataSource(System.Object)">
            <summary>
            根据提供的 DataRow,DataRowView,IDataReader,或普通的 Class Model 对象为【未指定变量组】的各字段变量进行赋值。
            只对变量集合和 dataModel 参数对象中均存在的成员进行赋值。
            </summary>
            <param name="dataModel">用于获取值的DataRow,DataRowView,IDataReader,或普通的 Class Model 对象。</param>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaExecutor.SetFieldGroupDataSource(System.String,System.Object)">
            <summary>
            根据提供的 DataRow,DataRowView,IDataReader,或普通的 Class Model 对象为指定组下的各字段变量进行赋值。
            只对指定组中的变量集合和 dataModel 参数对象中均存在的成员进行赋值。
            </summary>
            <param name="fieldGroupName">指定设置的字段变量所属的组名称。（针对“变量组名称->变量字段名称”格式的字段）</param>
            <param name="dataModel">用于获取值的DataRow,DataRowView,IDataReader,或普通的 Class Model 对象。</param>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaExecutor.GetFormulaExpressValue(System.String)">
            <summary>
            计算指定名称的公式值，并返回。
            </summary>
            <param name="expressName">需要计算值的公式名称。</param>
            <returns>返回计算后的值。</returns>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaExecutor.GetFormulaExpressValue(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            计算指定名称的公式值，并返回。
            </summary>
            <param name="returnValues">指定用于存储计算各公式结果的 Dictionary 对象。
            如果该对象中以 Key 的方式提供了指定的公式名称，则只计算这些指定名称的公式。
            如果该对象中没有集合项或者说是空集合（即未提供任何的公式名称），则自动计算所有的公式，并将结果追加到该对象中，其中 Key 为公式名称，Value 为计算结果。
            </param>
        </member>
        <member name="M:BFC.SDK.Formula.FormulaExecutor.CreatNewInstance">
            <summary>
            创建一个新实例。
            </summary>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.ItemValueCollection">
            <summary>
            ItemValue 集合类。
            </summary>
        </member>
        <member name="T:BFC.SDK.ItemValueCollection`1">
            <summary>
            ItemValue 集合类。
            </summary>
        </member>
        <member name="T:BFC.SDK.KeyValuePairCollection`2">
            <summary>
            Key/Value 集合类。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:BFC.SDK.KeyValuePairCollection`2.Item(`0)">
            <summary>
            获取或设置指定键对应的值。
            警告：当获取值时，传递指定的键不存在时，如果 TValue 类型默认值为 null ，则返回 null ，否则返回该类型的默认值。
            当设置值时，如果传递指定的键不存在时，自动向集合中加入该键和值。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.KeyValuePairCollection`2.Add(`0,`1)">
            <summary>
            将指定的键和值添加到集合中。
            如果指定的键已经存在，则将当前值覆盖原来的值。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:BFC.SDK.UltraCollection`1">
            <summary>
            带有通知的集合类。
            </summary>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="E:BFC.SDK.UltraCollection`1.CollectionItemChanged">
            <summary>
            集合中的成员对象已经发生变化事件。
            当集合中的成员被移除，向集合中追加成员，或者改变某一索引位置的成员项引用均会发生。
            但集合成员对象中内部属性值发生变化不会引发该事件。
            </summary>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.OnCollectionItemChanged">
            <summary>
            集合中的成员对象已经发生变化事件。
            当集合中的成员被移除，向集合中追加成员，或者改变某一索引位置的成员项引用均会发生。
            但集合成员对象中内部属性值发生变化不会引发该事件。
            </summary>
        </member>
        <member name="E:BFC.SDK.UltraCollection`1.CollectionItemChanging">
            <summary>
            集合中的成员对象正在发生变化事件。
            当集合中的成员被移除，向集合中追加成员，或者改变某一索引位置的成员项引用均会发生。
            但集合成员对象中内部属性值发生变化不会引发该事件。
            </summary>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.OnCollectionItemChanging">
            <summary>
            集合中的成员对象正在发生变化事件。
            当集合中的成员被移除，向集合中追加成员，或者改变某一索引位置的成员项引用均会发生。
            但集合成员对象中内部属性值发生变化不会引发该事件。
            </summary>
            <returns>如果用户取消了则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.FindAll(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.Find(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:BFC.SDK.UltraCollection`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:BFC.SDK.UltraCollection`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.UltraCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.UltraCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.CollectionItemChangingEventHandler">
            <summary>
            集合中的成员对象即将发生变化事件。
            当集合中的成员被移除，向集合中追加成员，或者改变某一索引位置的成员项引用均会发生。
            但集合成员对象中内部属性值发生变化不会引发该事件。
            </summary>
            <param name="sender">引发事件的对象。</param>
            <param name="e">包含事件数据。</param>
        </member>
        <member name="T:BFC.SDK.CollectionItemChangedEventHandler">
            <summary>
            集合中的成员对象已经发生变化事件。
            当集合中的成员被移除，向集合中追加成员，或者改变某一索引位置的成员项引用均会发生。
            但集合成员对象中内部属性值发生变化不会引发该事件。
            </summary>
            <param name="sender">引发事件的对象。</param>
            <param name="e">包含事件数据。</param>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.ExecuteQueryHandler">
            <summary>
            执行查询 SQL 语句的委托类型。
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.ExecuteNonQueryHandler">
            <summary>
            执行非查询 SQL 语句的委托类型。
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.UpdateFieldsOptions">
            <summary>
            指定更新字段选项。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DataAccess.UpdateFieldsOptions.IncludeFields">
            <summary>
            包含指定的字段。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DataAccess.UpdateFieldsOptions.ExcludeFields">
            <summary>
            排除指定的字段。
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.UpdateFields">
            <summary>
            指定限制更新字段。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.UpdateFields.#ctor(BFC.SDK.Data.DataAccess.UpdateFieldsOptions,System.String[])">
            <summary>
            构造函数。
            </summary>
            <param name="option">指定字段选项。</param>
            <param name="fields">指定字段集合。</param>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.UpdateFields.Option">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.DataAccess.UpdateFields.Fields">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.UpdateFields.ContainsField(System.String)">
            <summary>
            检查指定字段是否存在于字段集合中。
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Data.DataAccess.Utility">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.Utility.EncodeTableEntityName(System.String,BFC.SDK.Data.DatabaseType)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataAccess.Utility.EncodeFieldEntityName(System.String,BFC.SDK.Data.DatabaseType)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Data.DataModelBase">
            <summary>
            数据模型抽象类。
            用于承载数据对象。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataModelBase.CheckTypeSupported(System.Type)">
            <summary>
            检查指定的类型是否是 DataModelBase 以及其派生类支持的公共属性类型。
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataModelBase.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataModelBase.Copy">
            <summary>
            colne and copy object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataModelBase.CopyData(BFC.SDK.Data.DataModelBase,System.Boolean)">
            <summary>
            Copy current object public property value to other model object,if them have same property name and property type.
            </summary>
            <param name="model"></param>
            <param name="ignoreCase">A System.Boolean indicating a case-sensitive or insensitive comparison. (true indicates a case-insensitive comparison.) 
            </param>
        </member>
        <member name="M:BFC.SDK.Data.DataModelBase.ValueEquals(BFC.SDK.Data.DataModelBase)">
            <summary>
            Equals all public property values.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataModelBase.ValueEquals(BFC.SDK.Data.DataModelBase,System.String[],BFC.SDK.Data.FieldsPareameterOption)">
            <summary>
            Equals all public property values.
            </summary>
            <param name="model"></param>
            <param name="fields">指定需要比较的属性名称或排除比较的属性名称。
            如果为 null 则表示比较所有属性。</param>
            <param name="fieldsOption">指定 fields 参数的设置。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataModelBase.InitDefaultValue">
            <summary>
            Set all property default value by property type.Only can write property.
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataModelBase.GetValueTypeDefaultValue(System.Type)">
            <summary>
            根据类型取得初始值。
            派生类可以重写该方法，以便重新取得不同的初始值。
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Data.ModelUpdatableAttribute">
            <summary>
            用于标识直接更新数据库用的 Data Model 类中的属性与数据库字段的映射关系。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.ModelUpdatableAttribute.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.ModelUpdatableAttribute.IsIdentity">
            <summary>
            是否自动增长
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.ModelUpdatableAttribute.FieldName">
            <summary>
            映射到数据库中的字段名
            暂不支持，不要使用。
            DataAccess 类中涉及提供 primarykeyproperties 的参数，均是指属性名，不是指实际字段名。
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.UpdatableDataModelBase">
            <summary>
            提供可更新的数据模型抽象类。
            提供更新数据库的管理控制。（需要配合 DataAccess 类使用。）
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.UpdatableDataModelBase.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.UpdatableDataModelBase.VerifyType">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.UpdatableDataModelBase.CheckIsSetValue(System.Reflection.PropertyInfo)">
            <summary>
            检查指定的公共属性是否设置过值。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.UpdatableDataModelBase.GenerateIsSetValueFieldName(System.String)">
            <summary>
            根据指定的公共属性名称生成指示是否设置过值的属性名称。
            </summary>
            <param name="publicPropertyName"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Data.DatabaseType">
            <summary>
            枚举数据库类型。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DatabaseType.DB_ACCESS">
            <summary>
            Microsoft Access数据库。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DatabaseType.DB_SQLSERVER">
            <summary>
            Microsoft SQL Server数据库。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DatabaseType.DB_ORACLE">
            <summary>
            Oracle数据库。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DatabaseType.DB_MYSQL">
            <summary>
            MySQL 数据库。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DatabaseType.DB_SYBASE">
            <summary>
            Sybase 数据库。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DatabaseType.DB_DBASE">
            <summary>
            dBase 数据库。
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.OrderType">
            <summary>
            排序类型。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.OrderType.ASC">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.OrderType.DESC">
            <summary>
            
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.FieldsPareameterOption">
            <summary>
            调用方法时提供的 fields 参数选项。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.FieldsPareameterOption.Inclusive">
            <summary>
            指示要包含提供的 fields 参数中的字段。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.FieldsPareameterOption.Exclusive">
            <summary>
            指示要排除提供的 fields 参数中的字段。
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.DataInsertAction">
            <summary>
            数据插入数据表的行为枚举。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DataInsertAction.InsertAlway">
            <summary>
            总是插入，不考虑是否存在相同的数据。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DataInsertAction.UpdateInsert">
            <summary>
            已存在的数据更新，不存在的插入。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DataInsertAction.DeleteInsert">
            <summary>
            先删除已存在的数据，再插入。
            </summary>
        </member>
        <member name="F:BFC.SDK.Data.DataInsertAction.InsertNotExistOnly">
            <summary>
            仅插入不存在的数据。
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.SortOrder">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.SortOrder.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="sortField"></param>
        </member>
        <member name="M:BFC.SDK.Data.SortOrder.#ctor(System.String,BFC.SDK.Data.OrderType)">
            <summary>
            
            </summary>
            <param name="sortField"></param>
            <param name="orderType"></param>
        </member>
        <member name="P:BFC.SDK.Data.SortOrder.SortField">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.SortOrder.OrderType">
            <summary>
            
            </summary>
        </member>
        <member name="T:BFC.SDK.Data.DataCommon">
            <summary>
            提供一些数据操作静态的公共方法类。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.CopyDataRow(System.Data.DataRow,System.Data.DataRow)">
            <summary>从源DataRow[Source]取得各列的值复制到目标DataRow[Target]中，如果在Target中有该列。</summary>
            <param name='Source'>被复制的源DataRow</param>
            <param name='Target'>要复制到的目标DataRow</param>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.CopyDataRow(System.Data.DataRow)">
            <summary>返回一与DataRow[Source]同结构同数据的新DataRow。</summary>
            <param name='source'>被复制的源DataRow。</param>
            <returns>与DataRow[source]同结构同数据的新DataRow。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.FillDataTable(System.Collections.IList,System.Data.DataTable)">
            <summary>
            将 IList 集合中的所有数据填充到指定的 DataTable 对象中。
            如果需要填充的 DataTable 对象没有列信息，则根据 IList 中的第一个不为 null 的索引项的公共属性信息创建列。
            如果需要填充的 DataTable 对象存在列信息，则只 IList 中的索引项的公共属性在 DataTable 中存在的列。
            如果 IList 中的索引项和 DataTable 对象的列没有相同的则不填充。
            </summary>
            <param name="list">需要填充的 IList 集合。</param>
            <param name="table">需要将 IList 集合数据填充到的 DataTable 对象。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.FillDataTable(System.Collections.IList,System.Data.DataTable,System.String[])">
            <summary>
            将 IList 集合中的所有数据填充到指定的 DataTable 对象中。
            如果需要填充的 DataTable 对象没有列信息，则根据 IList 中的第一个不为 null 的索引项的公共属性信息创建列。
            如果需要填充的 DataTable 对象存在列信息，则只 IList 中的索引项的公共属性在 DataTable 中存在的列。
            如果 IList 中的索引项和 DataTable 对象的列没有相同的则不填充。
            </summary>
            <param name="list">需要填充的 IList 集合。</param>
            <param name="table">需要将 IList 集合数据填充到的 DataTable 对象。</param>
            <param name="fields">设置需要填充的列。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.FillDataTable(System.Collections.IList,System.Data.DataTable,System.String[],BFC.SDK.Data.FieldsPareameterOption)">
            <summary>
            将 IList 集合中的所有数据填充到指定的 DataTable 对象中。
            如果需要填充的 DataTable 对象没有列信息，则根据 IList 中的第一个不为 null 的索引项的公共属性信息创建列。
            如果需要填充的 DataTable 对象存在列信息，则只 IList 中的索引项的公共属性在 DataTable 中存在的列。
            如果 IList 中的索引项和 DataTable 对象的列没有相同的则不填充。
            </summary>
            <param name="list">需要填充的 IList 集合。</param>
            <param name="table">需要将 IList 集合数据填充到的 DataTable 对象。</param>
            <param name="fields">设置需要填充的列或者排除需要填充的列。</param>
            <param name="fieldsOption">设置 fields 参数选项。</param>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.FillDataTable(System.Collections.IList,System.Data.DataTable,System.Collections.Generic.List{System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="table"></param>
            <param name="properties"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.FillDataTableByModel(System.Object,System.Data.DataTable,System.Collections.Generic.List{System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="table"></param>
            <param name="properties"></param>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.CompareDataTable(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            比较两个 DataTable 对象所有字段上的数据是否相等。
            对于参与比较的字段必须名称和数据类型相同，否则会引发异常。
            </summary>
            <param name="dt1"></param>
            <param name="dt2"></param>
            <returns>如果数据都相同则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.CompareDataTable(System.Data.DataTable,System.Data.DataTable,System.String[])">
            <summary>
            比较两个 DataTable 对象数据是否相等。
            对于参与比较的字段必须名称和数据类型相同，否则会引发异常。
            </summary>
            <param name="dt1"></param>
            <param name="dt2"></param>
            <param name="compareFields">
            指定只需要在这些字段中进行数据比较。
            如果未指定该参数，则比较所有字段。
            </param>
            <returns>如果指定的字段上数据都相同则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.CompareDataTable(System.Data.DataTable,System.Data.DataTable,System.String[],BFC.SDK.Data.FieldsPareameterOption)">
            <summary>
            比较两个 DataTable 对象数据是否相等。
            对于参与比较的字段必须名称和数据类型相同，否则会引发异常。
            </summary>
            <param name="dt1"></param>
            <param name="dt2"></param>
            <param name="fields">
            指定只需要在这些字段中进行数据比较。
            或排除这些字段进行比较。
            如果未指定该参数，则比较所有字段。
            </param>
            <param name="fieldsOption">指示 fields 参数选项。</param>
            <returns>如果需要比较的字段上数据都相同则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.CompareDataModelList(System.Collections.IList,System.Collections.IList)">
            <summary>
            比较两个 IList 对象数据是否相等。
            对于参与比较的字段必须名称和数据类型相同，否则会引发异常。
            </summary>
            <param name="list1"></param>
            <param name="list2"></param>
            <returns>如果指定的字段上数据都相同则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.CompareDataModelList(System.Collections.IList,System.Collections.IList,System.String[])">
            <summary>
            比较两个 IList 对象数据是否相等。
            对于参与比较的字段必须名称和数据类型相同，否则会引发异常。
            </summary>
            <param name="list1"></param>
            <param name="list2"></param>
            <param name="comparedfields">
            指定只需要在这些字段中进行数据比较。
            如果未指定该参数，则比较所有字段。
            </param>
            <returns>如果指定的字段上数据都相同则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.CompareDataModelList(System.Collections.IList,System.Collections.IList,System.String[],BFC.SDK.Data.FieldsPareameterOption)">
            <summary>
            比较两个 IList 对象数据是否相等。
            对于参与比较的字段必须名称和数据类型相同，否则会引发异常。
            </summary>
            <param name="list1"></param>
            <param name="list2"></param>
            <param name="fields">
            指定只需要在这些字段中进行数据比较。
            或排除这些字段进行比较。
            如果未指定该参数(null)，则比较所有字段。
            </param>
            <param name="fieldsOption">指示 fields 参数选项。</param>
            <returns>如果需要比较的字段上数据都相同则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.CompareModel``1(``0,``0,System.String[],BFC.SDK.Data.FieldsPareameterOption,BFC.SDK.Data.CompareModelDifferentResult[]@)">
            <summary>
            比较两个对象是否值相等，并且返回值不相等的属性列表。
            </summary>
            <param name="model1">需要比较的第1个对象。</param>
            <param name="model2">需要比较的第2个对象。</param>
            <param name="fields">提供需要进行比较的属性或者需要排除在外不需要比较的属性
            如果未指定该参数(null)，则比较所有字段。</param>
            <param name="fieldsOption">对 fields 参数的补充，指定 fields 是要比较的属性还是排除在外的属性。</param>
            <param name="diffProperties">返回值不相等的属性名和分别在两个model中的值，如果两个 Model 值完全相同，则返回 null。</param>
            <returns>如果值相等则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.CompareModel``1(System.Object,System.Object,System.String[],BFC.SDK.Data.FieldsPareameterOption)">
            <summary>
            比较两个对象是否值相等。
            </summary>
            <param name="model1">需要比较的第1个对象。</param>
            <param name="model2">需要比较的第2个对象。</param>
            <param name="fields">提供需要进行比较的属性或者需要排除在外不需要比较的属性。</param>
            <param name="fieldsOption">对 fields 参数的补充，指定 fields 是要比较的属性还是排除在外的属性。</param>
            <returns>如果值相等则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.ValueEquals(System.Object,System.Object,System.String[],BFC.SDK.Data.FieldsPareameterOption)">
            <summary>
            比较两个数据对象数据是否相等。
            </summary>
            <param name="model1"></param>
            <param name="model2"></param>
            <param name="fields"></param>
            <param name="fieldsOption"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.ValueEquals(System.Type,System.Object,System.Object,System.String[],BFC.SDK.Data.FieldsPareameterOption)">
            <summary>
            比较两个 DataModelBase 对象数据是否相等。
            </summary>
            <param name="modelType">数据对象类型实例。</param>
            <param name="model1"></param>
            <param name="model2"></param>
            <param name="fields"></param>
            <param name="fieldsOption"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.ValueEquals(System.Object,System.Object,System.Collections.Generic.IList{System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="model1"></param>
            <param name="model2"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.GetProperties(System.Type,System.String[],BFC.SDK.Data.FieldsPareameterOption)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="fields"></param>
            <param name="fieldsOption"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Data.DataCommon.CheckValueEqual(System.Object,System.Object)">
            <summary>
            比较两个值是否相等。
            请保证两个参数类型一致，否则始终返回 false。
            </summary>
            <param name="value1">待比较的值。</param>
            <param name="value2">待比较的值。</param>
            <returns>相等返回true，不相等则返回false。</returns>
        </member>
        <member name="T:BFC.SDK.Data.CompareModelDifferentResult">
            <summary>
            比较两个 Model 值不相等的属性结果。
            </summary>
        </member>
        <member name="M:BFC.SDK.Data.CompareModelDifferentResult.#ctor(System.String,System.Object,System.Object)">
            <summary>
            构造函数。
            </summary>
            <param name="propertyName"></param>
            <param name="model1Value"></param>
            <param name="model2Value"></param>
        </member>
        <member name="P:BFC.SDK.Data.CompareModelDifferentResult.PropertyName">
            <summary>
            获取值不相等的属性名称。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.CompareModelDifferentResult.Model1Value">
            <summary>
            获取参数 model1 的当前属性值。
            </summary>
        </member>
        <member name="P:BFC.SDK.Data.CompareModelDifferentResult.Model2Value">
            <summary>
            获取参数 model2 的当前属性值。
            </summary>
        </member>
        <member name="T:BFC.SDK.Extensions.TextFileColumnDataType">
            <summary>
            导入到 Excel的 Text 文件列数据类型。
            </summary>
        </member>
        <member name="F:BFC.SDK.Extensions.TextFileColumnDataType.GeneralFormat">
            <summary>
            常规
            </summary>
        </member>
        <member name="F:BFC.SDK.Extensions.TextFileColumnDataType.TextFormat">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:BFC.SDK.Extensions.TextFileColumnDataType.YMDFormat">
            <summary>
            “年-月-日”日期格式
            </summary>
        </member>
        <member name="T:BFC.SDK.Extensions.TextFileDelimiter">
            <summary>
            导入到 Excel的 Text 文件列分隔符类型。
            </summary>
        </member>
        <member name="F:BFC.SDK.Extensions.TextFileDelimiter.Consecutive">
            <summary>
            连续无分隔符。
            </summary>
        </member>
        <member name="F:BFC.SDK.Extensions.TextFileDelimiter.Tab">
            <summary>
            Tab 符号。
            </summary>
        </member>
        <member name="F:BFC.SDK.Extensions.TextFileDelimiter.Semicolon">
            <summary>
            分号。
            </summary>
        </member>
        <member name="F:BFC.SDK.Extensions.TextFileDelimiter.Comma">
            <summary>
            逗号
            </summary>
        </member>
        <member name="F:BFC.SDK.Extensions.TextFileDelimiter.Space">
            <summary>
            空格。
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.DatabaseType">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.DatabaseType.MSSql">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.DatabaseType.Oracle">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.DatabaseType.Access">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.DatabaseType.MySQL">
            <summary>
            
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.LetterOption">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.LetterOption.ToUpper">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.LetterOption.ToLower">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.LetterOption.None">
            <summary>
            
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.FileColumnSeparatorType">
            <summary>
            列分隔符形式。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.FileColumnSeparatorType.Ascii">
            <summary>
            使用指定的字符分隔。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.FileColumnSeparatorType.FixStringLength">
            <summary>
            固定字符串长度。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.FileColumnSeparatorType.FixBytesLength">
            <summary>
            固定的字节长度。
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.SqlGenerator">
            <summary>
            SQl 语句生成器。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.SqlGenerator.SelectSql">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.SqlGenerator.UpdateSql">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.SqlGenerator.InsertSql">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.SqlGenerator.DeleteSql">
            <summary>
            
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.ScriptLanguageType">
            <summary>
            代码提供者。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.ScriptLanguageType.CSharp">
            <summary>
            C# 
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.ScriptLanguageType.VisualBasic">
            <summary>
            VB.net
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.CharacterSetType">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.CharacterSetType.UTF8">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.CharacterSetType.UTF32">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.CharacterSetType.Unicode">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.CharacterSetType.BigEndianUnicode">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.CharacterSetType.GB">
            <summary>
            GB系列编码，如 GB2312,GBK,GB18030
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.CharacterSetType.Other">
            <summary>
            
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.FieldDefine">
            <summary>
            导入导出文件的字段定义。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.DataTypeFullName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.FieldName">
            <summary>
            标识当前配置文件中定义的列名称（不一定就是数据库字段名）。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.FileColumnIndex">
            <summary>
            当前字段在文件中的列索引号（从0开始）。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.IsKey">
            <summary>
            是否主键。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.HeaderText">
            <summary>
            获取或设置当前列的标题文本。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.DataType">
            <summary>
            数据类型。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.Format">
            <summary>
            获取或设置对当前列的数据进行格式化导出的复合格式字符串。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.Description">
            <summary>
            当前字段描述。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.NullValue">
            <summary>
            当前字段对于最终转换为正确数据类型后如果为 NULL 时，用于替代的值。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FieldDefine.SetNullValueByString(System.String)">
            <summary>
            通过字符串设置 NullValue 属性。
            提供的字符串将通过 DataType 属性进行转换为相应的 NullValue 属性值。
            </summary>
            <param name="nullValueString">需要转换为 NullValue 属性值的字符串。</param>
        </member>
        <member name="M:BFC.SDK.IO.FieldDefine.GetNullValueString">
            <summary>
            获取 NullValue 的字符串设置。
            </summary>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.StartCharIndex">
            <summary>
            当使用固定长度读取列信息时，获取或设置当前列在每行字符串/字节串的开始开始字符位置。(从零开始)
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.MaxLength">
            <summary>
            获取或设置当前字段字符串/字节数的最大长度。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FieldDefine.GetCustomAttribute(System.String,System.String)">
            <summary>
            取得在该字段定义中的其他自定义属性值。
            </summary>
            <param name="attributeName">自定义属性名称。</param>
            <param name="defaultValue">如果未定义，则返回的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FieldDefine.GetCustomAttribute(System.String,System.Boolean)">
            <summary>
            取得在该字段定义中的其他自定义属性值。
            </summary>
            <param name="attributeName">自定义属性名称。</param>
            <param name="isAutoTrim">是否自动去除前后空格、回车换行、TAB字符。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FieldDefine.GetCustomAttribute(System.String)">
            <summary>
            取得在该字段定义中的其他自定义属性值，返回的值为最原始的值，不会自动去除前后空格。
            </summary>
            <param name="attributeName">自定义属性名称。</param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.AttributeCollection">
            <summary>
            获取或设置在该字段定义中所有属性集合。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.OnChangeTypeScript">
            <summary>
            用户自定义设置的将指定文本转换为相应的数据类型值的脚本。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.IsNeedCheckValueOnChangeType">
            <summary>
            指示是否需要在调用用户自定义 OnChangeType 脚本之后检查返回的数据类型。
            该变量在改变了 OnChangeType 属性后自动置为 true，直到检查过一次则设置为 false 以提高性能。
            缺陷是用户自定义脚本可能会根据不同的条件返回不同的类型，而碰巧检查时返回的是符合定义的类型。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.OnChangeType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FieldDefine.SqlGeneratorEnable">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FieldDefine.ResetValueText">
            <summary>
            
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.FieldDefineCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FieldDefineCollection.Find(System.Int32)">
            <summary>
            获取或设置第一个等于指定列索引号的项。
            </summary>
            <param name="fileColumnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FieldDefineCollection.FindAll(System.Int32)">
            <summary>
            获取或设置所有等于指定列索引号的项。
            </summary>
            <param name="fileColumnIndex"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.IO.FileExportException">
            <summary>
            文件导入异常。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportException.#ctor(System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="message"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportException.#ctor(System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="dataSourceName"></param>
            <param name="message"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportException.#ctor(System.Int64,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <param name="message"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportException.#ctor(System.Int64,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <param name="dataSourceName"></param>
            <param name="message"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportException.#ctor(System.Int64,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportException.#ctor(System.Int64,System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="dataSourceName"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportException.#ctor(System.Int64,System.Int32,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportException.#ctor(System.Int64,System.Int32,System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <param name="dataSourceName"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:BFC.SDK.IO.FileExportException.RowIndex">
            <summary>
            获取异常发生的行索引。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportException.ColumnIndex">
            <summary>
            获取异常发生在列索引。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportException.DataSourceName">
            <summary>
            获取异常发生的列所对应的数据源名称。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportException.Message">
            <summary>
            获取描述当前异常的消息。
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.FileImportException">
            <summary>
            文件导入异常。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileImportException.#ctor(System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="message"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileImportException.#ctor(System.Int64,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <param name="message"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileImportException.#ctor(System.Int64,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileImportException.#ctor(System.Int64,System.Int32,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:BFC.SDK.IO.FileImportException.RowIndex">
            <summary>
            获取异常发生的行索引。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportException.ColumnIndex">
            <summary>
            获取异常发生在列索引。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportException.Message">
            <summary>
            获取描述当前异常的消息。
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.ConvertListException">
            <summary>
            LIST转换异常。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.ConvertListException.#ctor(System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <param name="rowIndex"></param>
            <param name="message"></param>
        </member>
        <member name="M:BFC.SDK.IO.ConvertListException.#ctor(System.Int64,System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="fieldName"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:BFC.SDK.IO.ConvertListException.RowIndex">
            <summary>
            获取异常发生的行索引。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ConvertListException.FieldName">
            <summary>
            获取异常发生在列名称。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ConvertListException.Message">
            <summary>
            获取描述当前异常的消息。
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.IFileHelper">
            <summary>
            文件导入导出操作接口。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.IFileHelper.TableDefinition">
            <summary>
            描述当前文件的 Table 定义。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.IFileHelper.Tag">
            <summary>
            存储用户自定义数据，可用于后台代码与前端配置文件中的脚本代码互相传递访问。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.IFileHelper.GetUserScript">
            <summary>
            获取所有用户自定义脚本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.IO.IFileHelper.ExecuteQueryCallback">
            <summary>
            用于直接执行查询SQL语句的委托。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.IFileHelper.ExecuteNonQueryCallback">
            <summary>
            用于直接执行非查询SQL语句的委托。
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.PathExt">
            <summary>
            路径操作类。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.PathExt.GetTempFile(System.String,System.String)">
            <summary>
            在指定的物理路径下，根据指定的文件名取得临时文件完整路径。
            </summary>
            <param name="path">指定的物理路径。
            </param>
            <param name="fileName">临时文件使用的文件名。
            如果参数值中包含扩展名，则使用该扩展名。
            否则使用“.tmp”作为扩展名。
            格式如下：
            只提供扩展名：.XXX
            提供带扩展名的文件名：FileName.XXX
            仅提供不含扩展名的文件名：FileName
            空值。此时返回以“.tmp”作为扩展名的随机文件名。
            </param>
            <returns>返回一个临时文件完全路径。</returns>
        </member>
        <member name="M:BFC.SDK.IO.PathExt.ConvertAbsolutePath(System.String)">
            <summary>
            将当前应用程序域基本路径作为基本路径将指定路径转换为绝对完全路径，已经去除掉末尾的路径分隔符“\”。
            如要将工作目录作为作为基本路径将指定路径转换为绝对完全路径请使用 System.IO.Path.GetFullPath() 方法。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.PathExt.ConvertAbsolutePath(System.String,System.String)">
            <summary>
            根据提供的基本路径将指定路径转换为绝对完全路径，已经去除掉末尾的路径分隔符“\”。
            </summary>
            <param name="basePath"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.IO.TableDefine">
            <summary>
            文件导入导出操作类的Table定义。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.TableDefine.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.ConfigName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.TableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.UserData">
            <summary>
            获取或存储用户自定义数据。
            在用户自定义脚本中，也可以通过访问当前属性来取得运行时传递过来的自定义数据。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.UserParameters">
            <summary>
            获取用户自定义参数集合。
            在用户自定义脚本中，也可以通过访问当前属性来取得运行时传递过来的自定义参数值。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.RowSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.ColumnSeparatorType">
            <summary>
            获取列分隔符形式。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.ColumnSeparator">
            <summary>
            设置或获取列分隔符的字节数组。
            当导出文件设置为固定长度字符或字节的方式时，本设置也表示需要填充的字符。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.Encoding">
            <summary>
            获取当前读取文件的字符集编码对象。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.CharacterSet">
            <summary>
            获取或设置当前读取文件的字符集编码名称。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.FileColumnCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.TableDefine.SetColumnCount">
            <summary>
            重新设置所需要的最大列数量。
            对 FileColumnIndex 赋值后必须调用本方法。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.TableDefine.Find(System.String)">
            <summary>
            Find FieldDefine object by fieldName.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.TableDefine.Find(System.Int32)">
            <summary>
            Find FieldDefine object by fileColumnIndex.
            </summary>
            <param name="fileColumnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.FieldDefines">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.FieldDefineCount">
            <summary>
            获取 FieldDefineCollection 中的 FieldDefine 对象数量。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.UserSettings">
            <summary>
            获取用户在 XML 配置文件中的用户自定义设置。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.TableDefine.GetUserSeting(System.String)">
            <summary>
            获取指定 key 的用户自定义设置。
            </summary>
            <param name="key"></param>
            <returns>
            如果用户有定义则返回定义的值，否则返回 null。
            </returns>
        </member>
        <member name="M:BFC.SDK.IO.TableDefine.GetUserSeting(System.String,System.String)">
            <summary>
            获取指定 key 的用户自定义设置。
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns>
            如果用户有定义则返回定义的值，否则返回 defaultValue 参数指定的值。
            </returns>
        </member>
        <member name="P:BFC.SDK.IO.TableDefine.DoubleQuotationProcess">
            <summary>
            双引号处理方法。
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.DoubleQuotationProcessStyle">
            <summary>
            双引号处理方法。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.DoubleQuotationProcessStyle.None">
            <summary>
            不处理；
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.DoubleQuotationProcessStyle.CSV">
            <summary>
            作为标准CSV的格式处理。
            视内容中是否有特殊字符决定是否在前部和尾部增加双引号，内容中的每个双引号变成两个双引号。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.DoubleQuotationProcessStyle.QuotedAlways">
            <summary>
            总是在前部和尾部增加双引号，内容中的每个双引号变成两个双引号。
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.FileExportHelper">
            <summary>
            文件导出辅助类。
            任何更改过 TableDefinition 的属性值，都必须调用 ApplySetting 应用更改。
            然后重新打开文件进行操作。
            </summary>
        </member>
        <member name="E:BFC.SDK.IO.FileExportHelper.RowWriting">
            <summary>
            ReadRow() 方法后引发的事件。
            在执行 ReadRow(),ReadRowToSql(),ReadToDataTable(),ReadToDataRow() 过程中读取完一行数据后引发的事件。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportHelper.ConfigIsEmbeddedResources">
            <summary>
            获取是否是从嵌入式的资源文件中查找配置定义，该设置必须定义在配置文件中。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportHelper.ConfigEmbeddedResourcesFile">
            <summary>
            获取从哪个文件中搜索嵌入式的配置定义文件，该设置必须定义在配置文件中。
            格式如：嵌入资源的程序集文件位置/项目的默认命名空间.文件夹路径(使用.代替路径分隔符)”，如：./FMSC.Windows.Main.exe/FMSC.Windows.Main.XmlResources
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportHelper.ConfigFileDefaultPath">
            <summary>
            获取从哪个路径中搜索非嵌入式的配置定义文件，该设置必须定义在配置文件中。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportHelper.ConfigResourceName">
            <summary>
            获取嵌入资源的名称不含文件名的部分.
            如：FMSC.Resources.XmlResources.Config，而完整的资源文件名称为：FMSC.Resources.XmlResources.Config.fileExport.config
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.GetConfigObject(System.String)">
            <summary>
            获取导出配置定义对象。
            </summary>
            <param name="configFile">配置文件完整名称或者不含路径的名称。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.#ctor">
            <summary>
            实例化 FileExportHelper 对象。
            配置文件默认为在当前应用程序域基础路径下的 fileExportHelper.config 。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.#ctor(System.String)">
            <summary>
            使用配置文件的配置节点名称作为参数实例化 FileExportHelper 对象。
            配置文件默认为在当前应用程序域基础路径下的 fileExportHelper.config 。
            </summary>
            <param name="configName">设置读取当前文件用的位于配文件中的配置节点名称。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.#ctor(System.String,System.String)">
            <summary>
            使用配置文件完整路径,相应的配置节点名称作为参数实例化 FileExportHelper 对象。
            </summary>
            <param name="ConfigurationFile">配置文件完整路径。如果配置文件是嵌入的资源，则仅传递文件名称（不含路径）。</param>
            <param name="configName">读取当前文件用的位于配置文件中的配置节点名称。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Open(System.String,System.Boolean)">
            <summary>
            打开导出文件，准备写入数据。
            如果之前已经打开过文件则自动关闭。
            </summary>
            <param name="exportFile">需要导出操作的文件完整路径。</param>
            <param name="append">如果为 true 则在已存在的文件中追加，否则覆盖已存在的文件。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.ReadConfiguration(System.String,System.String)">
            <summary>
            读取和解析配置文件。
            </summary>
            <param name="ConfigurationFile"></param>
            <param name="configName"></param>
            <returns>返回当前的配置节点对象。</returns>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.ReadConfigurationForVer3(BFC.SDK.Configuration.XmlConfigFile,System.String)">
            <summary>
            读取和解析版本 3.0 的配置文件。
            </summary>
            <param name="configReader"></param>
            <param name="configName"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.ApplySettings">
            <summary>
            当修改过 TableDefine 和 FieldDefine 对象之后，调用本方法应用这些更改。
            应用更改之后，根据需要可以调用 Close() 方法关闭数据文件，再调用 Open()方法打开数据文件重新读取。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.GetUserScript">
            <summary>
            获取在实例化当前对象之后或者调用 ApplySettings() 方法之后产生的所有用户脚本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.OnRowWriting(System.EventArgs)">
            <summary>
            引发 RowWriting 事件。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.CreateFileDataTableSchema">
            <summary>
            根据配置文件中定义的列信息创建符合结构的 DataTable 对象。
            如果 DataSourceName 相同的列则使用索引号最小的列创建 DataColumn 。
            </summary>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.IO.FileExportHelper.TableName">
            <summary>
            获取导入的 Table 名。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportHelper.TableDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportHelper.Encoding">
            <summary>
            获取导出文件所用的的字符编码。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportHelper.ExportFile">
            <summary>
            获取导出的文件。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportHelper.WrittenRowCount">
            <summary>
            获取自上次打开文件到现在已经成功写入了的数据行数，并不是数据源中的行索引号。
            当数据源中的行为 null 时并不会写入文件。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportHelper.LastExportingDataSourceRowIndex">
            <summary>
            获取最后一次进行导出操作的数据行在传递的数据源中的索引号。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.GetCurrentCharBytesLength(System.Byte)">
            <summary>
            根据提供的某个字符的第一个字节，返回该字符总共有几个字节。
            </summary>
            <param name="firstByte">某个字符的第一个字节</param>
            <returns></returns>
        </member>
        <member name="F:BFC.SDK.IO.FileExportHelper._columnSepratorString">
            <summary>
            列分隔符字符串。仅对于固定分隔符分隔列的情况下才有效。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.FileExportHelper._rowSepratorString">
            <summary>
            行分隔符字符串。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.FileExportHelper._rowBytesForFixLength">
            <summary>
            行分隔符字节数组。仅对于固定长度字节数截取的情况下才有效。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.FileExportHelper._rowStringForFixLength">
            <summary>
            行分隔符字符数组。仅对于固定长度字符数截取的情况下才有效。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.FileExportHelper._listFieldCollectionByColunmIndex">
            <summary>
            以列索引号为 Key，以 ExportFieldDefine 为对应的值的 Dictionary 对象。
            仅对于固定分隔符分隔列的情况下才有效。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.ParseSettingsByUserParameters">
            <summary>
            通过用户参数解析相关的设置值。
            设置值格式为“$KEY$”。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.GenerateDataSourceSql">
            <summary>
            根据字段字义，获取供查询用的 SQL 语句。
            根据以下顺序返回 SQL 语句。
            如果用户指定了 OnGenerateDataSourceSql 设置，则调用该方法返回。
            如果用户指定了 DeataSourceSqlFullContent 设置，则直接返回该属性值。
            否则根据列定义自动生成查询语句（调用 TableDefinition.GetBaseSelectSql() 方法），并加上 DeataSourceSqlWhere 作为条件语句返回。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.GenerateDataSourceSql(System.Boolean)">
            <summary>
            根据字段字义，获取供查询用的 SQL 语句。
            根据以下顺序返回 SQL 语句。
            如果用户指定了 OnGenerateDataSourceSql 设置，则调用该方法返回。
            如果用户指定了 DeataSourceSqlFullContent 设置，则直接返回该属性值。
            否则根据列定义自动生成查询语句（调用 TableDefinition.GetBaseSelectSql() 方法），并加上 DeataSourceSqlWhere 作为条件语句返回。
            </summary>
            <param name="onlyKeyFields">是否只返回主键列信息在 SELECT 字段列表中。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Write(System.Data.DataTable)">
            <summary>
            导出指定的 DataTable 对象到文件中。
            </summary>
            <param name="table">需要导出的 DataTable 对象。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Write(System.Data.DataTable,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            导出指定的 DataTable 对象到文件中。
            </summary>
            <param name="table">需要导出的 DataTable 对象。</param>
            <param name="callback">在导出每行之前的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Write(System.Data.DataTable,System.Int32,System.Int32,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            导出指定的 DataTable 对象到文件中。
            </summary>
            <param name="table">需要导出的 DataTable 对象。</param>
            <param name="startIndex">指定需要导出的开始数据行索引号。</param>
            <param name="writeRowCount">指定需要导出数据行数。</param>
            <param name="callback">在导出每行之前的回调委托。可以传递 null。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Write(System.Data.DataView)">
            <summary>
            导出指定的 DataView 对象到文件中。
            </summary>
            <param name="view">需要导出的 DataView 对象。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Write(System.Data.DataView,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            导出指定的 DataView 对象到文件中。
            </summary>
            <param name="view">需要导出的 DataView 对象。</param>
            <param name="callback">在导出每行之前的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Write(System.Data.DataView,System.Int32,System.Int32,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            导出指定的 DataView 对象到文件中。
            </summary>
            <param name="view">需要导出的 DataView 对象。</param>
            <param name="startIndex">指定需要导出的开始数据行索引号。</param>
            <param name="writeRowCount">指定需要导出数据行数。</param>
            <param name="callback">在导出每行之前的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Write(System.Collections.IList)">
            <summary>
            导出指定的 IList 集合中的所有数据到文件中。
            请保证 IList 集合中的所有成员数据类型一致。
            </summary>
            <param name="list">需要导出的 IList 对象。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Write(System.Collections.IList,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            导出指定的 IList 集合中的所有数据到文件中。
            请保证 IList 集合中的所有成员数据类型一致。
            </summary>
            <param name="list">需要导出的 IList 对象。</param>
            <param name="callback">在导出每行之前的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Write(System.Collections.IList,System.Int32,System.Int32,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            导出指定的 IList 集合中的所有数据到文件中。
            请保证 IList 集合中的所有成员数据类型一致。
            </summary>
            <param name="list">需要导出的 IList 对象。</param>
            <param name="startIndex">指定需要导出的开始数据行索引号。</param>
            <param name="writeRowCount">指定需要导出数据行数。</param>
            <param name="callback">在导出每行之前的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Write(System.Data.IDataReader)">
            <summary>
            将指定的 IDataReader 对象导出到文件中。
            </summary>
            <param name="dataReader">要导出到文件的指定的 IDataReader 对象。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Write(System.Data.IDataReader,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            将指定的 IDataReader 对象所有数据导出到文件中。
            在每次写数据之前会自动调用 IDataReader.Read() 的方法。
            因此，传递过来的 IDataReader 对象当前行不会写入文件中。
            </summary>
            <param name="dataReader">要导出到文件的指定的 IDataReader 对象。</param>
            <param name="callback">在导出每行之前的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Write(System.Data.IDataReader,System.Int32,BFC.SDK.IO.RowWritingCallbackHandler)">
            <summary>
            将指定的 IDataReader 对象导出到文件中。
            在每次写数据之前会自动调用 IDataReader.Read() 的方法。
            因此，传递过来的 IDataReader 对象当前行不会写入文件中。
            </summary>
            <param name="dataReader">要导出到文件的指定的 IDataReader 对象。</param>
            <param name="writeRowCount">指定需要导出数据行数。</param>
            <param name="callback">在导出每行之前的回调委托。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.FillDataModel(System.Object,System.Boolean)">
            <summary>
            将指定的数据对象填充到各字段中。
            </summary>
            <param name="model">要填充数据的字段。</param>
            <param name="isCheckType">在填充之前是否需要检查数据对象类型
            如果为 true，则会自动检查该类型是否与前一次的对象类型一致，不一致则自动获取类型信息。
            如果为 false，则始终不检查，使用前一次类型信息获取数据。
            当外部调用时明确知道这一次的数据对象与前一次类型一致，可以设置为 false 以提高性能。
            </param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.FillDataReaderRow(System.Data.IDataReader,System.Boolean)">
            <summary>
            将 IDataReader 对象的当前数据行填充至写入文件的各字段。
            </summary>
            <param name="dataReader"></param>
            <param name="isMapping">是否需要在 DataRead 中查找各字段的索引号，除非明确知道之前已经进行过映射可以设置为 false 以提高性能外，必须设置为 true。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.FillDataTableRow(System.Data.DataRow,System.Boolean)">
            <summary>
            将 DataRow 对象的数据填充至写入文件的各字段。
            </summary>
            <param name="row"></param>
            <param name="isCheckColumn">是否需要检查数据源中包含所有定义的需要导出的列。
            如果明确已经检查过则传递 false 以提高性能。
            </param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.ConvertExportedText">
            <summary>
            将各字段的值转换为需要写入文件的文本。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.FileExportHelper._sbRow">
            <summary>
            全局临时变量，用于存储每次写入的数据行字符串。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.WriteHeader">
            <summary>
            将列标题写入文件当前行。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.ExportToArray(System.Object,System.Int32,System.Int32,BFC.SDK.IO.RowWritingCallbackHandler,System.Object[0:,0:],System.Int32)">
            <summary>
            将数据源导出到指定的二维数组中。
            </summary>
            <param name="dataSource">要导出数据的数据源对象，只支持 DataTable,DataView,IDataReader,IList 类型。</param>
            <param name="exportStartDataRowIndex">数据源开始导出的数据行索引，对于 IDataReader 数据源，该参数无意义。</param>
            <param name="exportDataRowCount">需要从数据源中读取的数据的行数（与实际只否导出无关，因为 callback 回调中允许取消导出某些行），如果该值小于提供的数组长度（从 startArrayIndex 开始计算的长度），则忽略本参数而只导出数组提供的长度的数据行。</param>
            <param name="callback">回调委托。</param>
            <param name="destArry">需要导出数据的目标二数组。</param>
            <param name="startArrayIndex">从数组的该索引行开始填充数据。</param>
            <returns>
            -1：当前指定的位置已经没有数据，没有执行任何导出操作。
            大于或等于0：此次实际导出的数据行数。
            </returns>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.WriteRow">
            <summary>
            将最终文本写入文件。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.ChangeType">
            <summary>
            转换数据类型。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Flush">
            <summary>
            将当前导入文件缓冲区数据立即全部写入磁盘。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Close">
            <summary>
            关闭当前导出文件的写操作流对象并释放该对象的所有资源。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportHelper.Tag">
            <summary>
            获取或设置自定义存储的对象数据。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportHelper.ExecuteQueryCallback">
            <summary>
            获取或设置执行脚本查询数据结果的回调方法。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileExportHelper.ExecuteNonQueryCallback">
            <summary>
            获取或设置执行非查询脚本的回调方法。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.CSVCellTextEncode(System.String,System.String)">
            <summary>
            取得写入 CSV 文件单元格转换之后的文本。
            </summary>
            <param name="text">需要写入的原始文本。</param>
            <param name="delimiter">CSV 文件分隔符。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.CSVCellTextEncode(System.String,System.String,System.Boolean)">
            <summary>
            取得写入 CSV 文件单元格转换之后的文本。
            </summary>
            <param name="text">需要写入的原始文本。</param>
            <param name="delimiter">CSV 文件分隔符。</param>
            <param name="quotedAlways">是否总是在前部和尾部增加双引号</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.CSVCellTextEncode(System.String,System.String,System.String)">
            <summary>
            取得写入文本文件单元格转换之后的文本。
            </summary>
            <param name="text">需要写入的原始文本。</param>
            <param name="colDelimiter">文件列分隔符。</param>
            <param name="rowDelimiter">文件行分隔符。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.CSVCellTextEncode(System.String,System.String,System.String,System.Boolean)">
            <summary>
            取得写入文本文件单元格转换之后的文本。
            </summary>
            <param name="text">需要写入的原始文本。</param>
            <param name="colDelimiter">文件列分隔符。</param>
            <param name="rowDelimiter">文件行分隔符。</param>
            <param name="quotedAlways">是否总是在前部和尾部增加双引号</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.ExportDataToCSVFile(System.Data.DataTable,System.String,System.String[],System.String[],System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            将 DataTable 导出为 CSV 文件。
            </summary>
            <param name="dt">要导出的 DataTable 对象。</param>
            <param name="title">导出的文件标题。(可为空)</param>
            <param name="fields">指定需要导出的列以及导出时的列顺序。如果为 null 或零长度数组则按 DataTable 中的列顺序导出所有列。</param>
            <param name="headText">根据 dt 中列的索引顺序组成的列标题数组。如果不写标题，请传递 null。</param>
            <param name="dateTimeFormat">日期格式。(如果为空则使用 yyyy/MM/dd HH:mm:ss)</param>
            <param name="filePathName">导出的文件。</param>
            <param name="delimiter">分隔符。(如果为空则使用 TAB 分隔符)</param>
            <param name="encoding">文件编码。(如果为空则使用系统默认编码)</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.ExportDataToCSVFile(System.Data.IDataReader,System.String,System.String[],System.String[],System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            将 DataTable 导出为 CSV 文件。
            </summary>
            <param name="dataReader">要导出的 IDataReader 对象。</param>
            <param name="title">导出的文件标题。(可为空)</param>
            <param name="fields">指定需要导出的列以及导出时的列顺序。如果为 null 或零长度数组则按 DataTable 中的列顺序导出所有列。</param>
            <param name="headText">根据 dt 中列的索引顺序组成的列标题数组。如果不写标题，请传递 null。</param>
            <param name="dateTimeFormat">日期格式。(如果为空则使用 yyyy/MM/dd HH:mm:ss)</param>
            <param name="filePathName">导出的文件。</param>
            <param name="delimiter">分隔符。(如果为空则使用 TAB 分隔符)</param>
            <param name="encoding">文件编码。(如果为空则使用系统默认编码)</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.ExportDataToCSVFile(System.Data.DataView,System.String,System.String[],System.String[],System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            将 DataView 导出为 CSV 文件。
            </summary>
            <param name="dv">要导出的 DataView 对象。</param>
            <param name="title">导出的文件标题。(可为空)</param>
            <param name="fields">指定需要导出的列以及导出时的列顺序。如果为 null 或零长度数组则按 DataTable 中的列顺序导出所有列。</param>
            <param name="headText">根据 dv 中列或 fields 的索引顺序组成的列标题数组。(可为null,如果为null则不输出标题)</param>
            <param name="dateTimeFormat">日期格式。(如果为空则使用 yyyy/MM/dd HH:mm:ss)</param>
            <param name="filePathName">导出的文件。</param>
            <param name="delimiter">分隔符。(如果为空则使用 TAB 分隔符)</param>
            <param name="encoding">文件编码。(如果为空则使用系统默认编码)</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.ExportListDataToCSVFile(System.Collections.IList,System.String,System.String[],System.String[],System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            将 IList 中的数据元素的属性值导出为 CSV 文件。
            </summary>
            <param name="dataList">要导出的 IList 对象。要求 dataList 中的每个元素都是相同的对象类型。</param>
            <param name="title">导出的文件标题。(可为空)</param>
            <param name="fields">指定需要导出的列以及导出时的列顺序。如果为 null 或零长度数组则按 dataList 中的每个对象的列顺序导出所有列。</param>
            <param name="headText">根据 IList 中 fields 的索引顺序组成的列标题数组。(可为null,如果为null则不输出标题)</param>
            <param name="dateTimeFormat">日期格式。(如果为空则使用 yyyy/MM/dd HH:mm:ss)</param>
            <param name="filePathName">导出的文件。</param>
            <param name="delimiter">分隔符。(如果为空则使用 TAB 分隔符)</param>
            <param name="encoding">文件编码。(如果为空则使用系统默认编码)</param>
        </member>
        <member name="M:BFC.SDK.IO.FileExportHelper.ExportDataToTextFile(System.Data.DataTable,System.String[],System.Boolean,System.Int32[],System.String,System.Char,System.String,System.Text.Encoding)">
            <summary>
            以字节或字符的固定长度方式将 DataTable 导出为文本文件。
            </summary>
            <param name="dt">要导出的 DataTable 对象。</param>
            <param name="fields">指定需要导出的列以及导出时的列顺序。如果为 null 或零长度数组则按 DataTable 中的列顺序导出所有列。</param>
            <param name="fieldsMaxLength">各列所占的字符（或字节）长度。</param>
            <param name="dateTimeFormat">日期格式。(如果为空则使用 yyyy/MM/dd HH:mm:ss)</param>
            <param name="filePathName">导出的文件。</param>
            <param name="isFixLengthOfByte">固定长度的计算是否按字节来计算，如果为 true ，则各列导出时占用指长度的字节，否则以字符个数来计算占位长度。</param>
            <param name="paddingChar">当实际内容不足指定长度时，用来补足长度的字符。</param>
            <param name="encoding">文件编码。(如果为空则使用系统默认编码)</param>
        </member>
        <member name="T:BFC.SDK.IO.ExportFieldDefine">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportFieldDefine.DataSourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportFieldDefine.Value">
             <summary>
            获取或设置当前导出列对应的数据值。
             </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportFieldDefine.Text">
            <summary>
            获取当前导出列的输出文本。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportFieldDefine.IsLTrim">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportFieldDefine.IsRTrim">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportFieldDefine.SqlValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportFieldDefine.LetterConvertOption">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportFieldDefine.OnSqlValueStringGenerateScript">
            <summary>
            用户自定义设置的将当前值转换为可用于 SQL 语句中的字符串值
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.ExportFieldDefine.GenerateSqlValueString(BFC.SDK.IO.FileExportHelper)">
            <summary>
            根据参数取得数据类型,返回符合SQL语法的字符串。如：参数为字符串“value”,则返回“'value'”.
            当参数为DateTime数据类型时,返回的字符串取决于 format 指定的格式。
            该方法在调用 CheckConstrain() 方法之后调用。
            </summary>
            <param name="exportHelper">执行导出数据的 FileExportHelper 对象。</param>
            <returns>符合SQL语法的字符串。如果无法转换则返回 null,例如二进制数组.</returns>
        </member>
        <member name="P:BFC.SDK.IO.ExportFieldDefine.OnGetExportedTextScript">
            <summary>
            用户自定义设置的转换导出文本的脚本。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.ExportFieldDefine.ChangeTypeForExport(BFC.SDK.IO.FileExportHelper)">
            <summary>
            将数据源的数据转换为定义的数据类型的值，并设置 Value 属性。
            </summary>
            <param name="exportHelper">执行导出数据的 FileExportHelper 对象。</param>
        </member>
        <member name="M:BFC.SDK.IO.ExportFieldDefine.ConvertExportedText(BFC.SDK.IO.FileExportHelper)">
            <summary>
            将当前字段的值转换为可导出的字符串。
            </summary>
            <param name="exportHelper"></param>
        </member>
        <member name="P:BFC.SDK.IO.ExportFieldDefine.PaddingAlign">
            <summary>
            设置当前列的填充字符的插入位置，默认值为 PaddingAlignOption.Right。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportFieldDefine.PaddingCharacter">
            <summary>
            获取当前列的填充字符。
            如果未设置则返回char(0)。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportFieldDefine.PaddingCharacterByte">
            <summary>
            设置当前列填充的字符，如果未设置则使用当前节的全局设置（ColumnSeparator 节点中的 asciiValue 属性值）。
            如果要取消当前设置，请赋值 0 .
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.ExportTableDefine">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.ExportTableDefine.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportTableDefine.OnGenerateDataSourceSqlScript">
            <summary>
            用户自定义设置的生成供查询数据源的 SQL 语句的脚本。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportTableDefine.DataSourceSqlFullContent">
            <summary>
            当调用 FileExportHelper.GenerateDataSourceSql() 方法时返回指定的 SQL 语句。
            如果设置了“OnGenerateDataSourceSql”属性时则本属性值被忽略。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportTableDefine.DataSourceSqlWhere">
            <summary>
            当调用 FileExportHelper.GenerateDataSourceSql() 方法时返回指定的 SQL 语句所附带的条件，需要带“Where”关键字。
            如果设置了“OnGenerateDataSourceSql”或“DataSourceSqlFullContent”属性时则本属性值被忽略。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.ExportTableDefine.GetBaseSelectSql(BFC.SDK.IO.FileExportHelper)">
            <summary>
            获取根据各列定义而生成的 Select SQL 语句。
            不生成检索条件。
            </summary>
            <param name="exportHelper"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.ExportTableDefine.GetBaseSelectSql(BFC.SDK.IO.FileExportHelper,System.Boolean)">
            <summary>
            获取根据各列定义而生成的 Select SQL 语句。
            不生成检索条件。
            </summary>
            <param name="exportHelper"></param>
            <param name="onlyKeyFields">是否仅组装主键字段作为 Select 的字段列表。</param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.IO.ExportTableDefine.DbType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ExportTableDefine.Item(System.Int32)">
            <summary>
            获取指定索引号的 ExportFieldDefine 对象。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.IO.ExportTableDefine.Item(System.String)">
            <summary>
            获取指定名称的 ExportFieldDefine 对象。
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.IO.PaddingAlignOption">
            <summary>
            表示填充字符的位置。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.PaddingAlignOption.Left">
            <summary>
            在左边填充。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.PaddingAlignOption.Right">
            <summary>
            在右边填充。
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.RowWritingEventHandler">
            <summary>
            
            </summary>
            <param name="exportHelper"></param>
            <param name="e"></param>
        </member>
        <member name="T:BFC.SDK.IO.RowWritingCallbackHandler">
            <summary>
            导出每行数据时的回调委托。
            </summary>
            <param name="exportHelper">执行导出数据操作的 FileExportHelper 对象。</param>
            <param name="dataSource">导出的数据源对象。该对象为调用 Write 方法时传递的数据源对象。 </param>
            <param name="writingRowIndex">正在写入的数据行索引号。</param>
            <param name="cancelAll">输出参数，设置是否需要取消当前数据行和后续所有数据行的导出操作。如果设置为 true，则取消当前数据行以及后续数据行的导出操作。</param>
            <param name="cancelCurrent">输出参数，设置是否需要取消当前数据行的导出操作。如果设置为 true，则取消当前数据行的导出操作，后面的数据行继续执行导出操作。</param>
        </member>
        <member name="T:BFC.SDK.IO.FileImportHelper">
            <summary>
            文件导入辅助类。
            任何更改过 TableDefinition 的属性值，都必须调用 ApplySetting 应用更改。
            然后重新打开文件进行操作。
            </summary>
        </member>
        <member name="E:BFC.SDK.IO.FileImportHelper.RowReading">
            <summary>
            ReadRow() 方法后引发的事件。
            在执行 ReadRow(),ReadRowToSql(),ReadToDataTable(),ReadToDataRow() 过程中读取完一行数据后引发的事件。
            </summary>
        </member>
        <member name="E:BFC.SDK.IO.FileImportHelper.RowTextAfterRead">
            <summary>
            
            </summary>
        </member>
        <member name="E:BFC.SDK.IO.FileImportHelper.RowValueAfterRead">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.ConfigIsEmbeddedResources">
            <summary>
            获取是否是从嵌入式的资源文件中查找配置定义，该设置必须定义在配置文件中。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.ConfigEmbeddedResourcesFile">
            <summary>
            获取从哪个文件中搜索嵌入式的配置定义文件，该设置必须定义在配置文件中。
            格式如：嵌入资源的程序集文件位置/项目的默认命名空间.文件夹路径(使用.代替路径分隔符)”，如：./FMSC.Windows.Main.exe/FMSC.Windows.Main.XmlResources
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.ConfigFileDefaultPath">
            <summary>
            获取从哪个路径中搜索非嵌入式的配置定义文件，该设置必须定义在配置文件中。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.ConfigResourceName">
            <summary>
            获取嵌入资源的名称不含文件名的部分.
            如：FMSC.Resources.XmlResources.Config，而完整的资源文件名称为：FMSC.Resources.XmlResources.Config.fileImport.config
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.GetConfigObject(System.String)">
            <summary>
            获取导入配置定义对象。
            </summary>
            <param name="configFile">配置文件完整名称或者不含路径的名称。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.#ctor(System.String)">
            <summary>
            使用需要导入的文件完整路径作为参数实例化 FileImportHelper 对象。
            配置文件默认为在当前应用程序域基础路径下的 fileImportHelper.config 。
            </summary>
            <param name="importFile"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.Open(System.String)">
            <summary>
            打开导入文件，准备读取数据。
            </summary>
            <param name="importFile">需要导入的文件完整路径。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.#ctor(System.String,System.String)">
            <summary>
            使用配置文件的配置节点名称和需要导入的文件完整路径作为参数实例化 FileImportHelper 对象。
            配置文件默认为在当前应用程序域基础路径下的 fileImportHelper.config 。
            </summary>
            <param name="configName">设置读取当前文件用的位于配文件中的配置节点名称。</param>
            <param name="importFile">需要读取的数据文件完整路径，如果指定为 null 或 Empty 则默认不打开文件。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            使用配置文件完整路径,相应的配置节点名称和需要导入的数据文件完整路径作为参数实例化 FileImportHelper 对象。
            如果不是指定的完整路径则在 BFC.SDK.config 中设置的默认路径下搜索配置文件。
            </summary>
            <param name="ConfigurationFile">配置文件完整路径。</param>
            <param name="configName">读取当前文件用的位于配置文件中的配置节点名称。</param>
            <param name="importFile">需要读取的数据文件完整路径，如果指定为 null 或 Empty 则默认不打开文件。</param>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ReadConfiguration(System.String,System.String)">
            <summary>
            读取和解析配置文件。
            </summary>
            <param name="ConfigurationFile"></param>
            <param name="configName"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ReadConfigurationForVer3(BFC.SDK.Configuration.XmlConfigFile,System.String)">
            <summary>
            读取和解析版本 3.0 的配置文件。
            </summary>
            <param name="configReader"></param>
            <param name="configName"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ReadConfigurationForVer2(BFC.SDK.Configuration.XmlConfigFile,System.String)">
            <summary>
            读取和解析版本 2.0 的配置文件。
            </summary>
            <param name="configReader"></param>
            <param name="configName"></param>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ApplySettings">
            <summary>
            当修改过 TableDefine 和 FieldDefine 对象之后，调用本方法应用这些更改。
            应用更改之后，根据需要可以调用 Close() 方法关闭数据文件，再调用 Open()方法打开数据文件重新读取。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.GetUserScript">
            <summary>
            获取在实例化当前对象之后或者调用 ApplySettings() 方法之后产生的所有用户脚本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.OnRowReading">
            <summary>
            引发 ReadRowAfter 事件。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.OnRowTextAfterRead">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.OnRowValueAfterRead">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.CreateFileDataTableSchema">
            <summary>
            根据配置文件中定义的列信息创建符合结构的 DataTable 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.TableName">
            <summary>
            获取导入的 Table 名。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.TableDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.Encoding">
            <summary>
            获取读取导入文件的字符集。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.ImportFile">
            <summary>
            获取导入的文件。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.FileLength">
            <summary>
            获取导入文件大小（以字节为单位）。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.ReadLength">
            <summary>
            获取已经读取文件的字节数。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.ReadRowCount">
            <summary>
            获取已经读取了的行数。
            每执行一次 ReadRow ,ReadRowToSql 方法,读取到数据则计数加 1 。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.LastReadData">
            <summary>
            获取最后一次读取的行的原始数据。
            只有是读取以固定字符分隔的数据文件(CSV格式文件)时，该属性才有效，
            其他以固定长度截取方式读取数据文件时，该属性无效。
            每执行一次 ReadRow ,ReadRowToSql 方法,该属性值就会更新 。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.LastReadBytes">
            <summary>
            获取最后一次读取的行的原始字节数据。
            可以使用当前定义的字符集将该字节数据转换为相应的字符串以便作参考。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.IsExcelToTxt">
            <summary>
            该属性已经无效，仅是为了兼容以前版本而作保留，设置的值无效。
            当列分隔符为指定字符串形式的文件（CSV格式）时返回 true，否则返回 false。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ResetFileColumnIndexByHeaderRow">
            <summary>
            根据标题重置列索引号。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ReadRow">
            <summary>
            从当前位置开始读取一行。
            如果是第一次读取，则直接从指定的读取行开始读取。
            </summary>
            <returns>如果读取到行则返回 true ，否则返回 false。
            如果读取到空行，但设置为不允许忽略空行，则会返回 true，如果设置为忽略空行，则返回 false。
            </returns>
            <exception cref="T:BFC.SDK.IO.FileImportException">抛出一个 FileImportException 异常，当读取文件或生成 SQL 语句发生错误时，该异常中指示了发生错误的行索引。</exception>
            <exception cref="T:System.InvalidOperationException">抛出一个 InvalidOperationException 异常，当读取文件或生成 SQL 语句发生错误时。</exception>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.GetCurrentCharBytesLength(System.Byte)">
            <summary>
            根据提供的某个字符的第一个字节，返回该字符总共有几个字节。
            </summary>
            <param name="firstByte">某个字符的第一个字节</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ReadRowImpl(BFC.SDK.IO.FileImportHelper.ReadRowOption)">
            <summary>
            从当前位置开始读取一行。
            如果读取到数据则转换为实际数据类型的值，并检查各约束。
            </summary>
            <returns>
            如果读取到实际的数据则返回 true，否则返回 false。
            当读取到空行，但设置为不允许忽略空行，则仍然当作成功读取到数据并返回 true；
            当读取到空行，但设置忽略空行，则当作未读取到数据并返回 false；
            当还未读取到设置的起始行，则当作未读取到数据并返回 false；
            </returns>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ReadRowToSql(BFC.SDK.IO.SqlGenerator)">
             <summary>
             从当前位置开始读取一行并生成相应的 SQL 语句。
             </summary>
            <param name="sqlGen">装载 SQL 语句的 SqlGenerator 对象。</param>
             <returns>读取到数据并生成可执行的 SQL 语句返回 true,否则返回 false。</returns>
             <exception cref="T:BFC.SDK.IO.FileImportException">抛出一个 FileImportException 异常，当读取文件或生成 SQL 语句发生错误时，该异常中指示了发生错误的行索引和列索引。</exception>
             <exception cref="T:System.InvalidOperationException">抛出一个 InvalidOperationException 异常，当读取文件或生成 SQL 语句发生错误时。</exception>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ReadToDataTable">
            <summary>
            将所有的数据读取到 DataTable 中,该 DataTable 对象结构由配置文件中的列配置定义。
            如果配置文件中必须至少定义一个实际列信息,否则执行本方法将出现异常。
            </summary>
            <returns></returns>
            <exception cref="T:BFC.SDK.IO.FileImportException">抛出一个 FileImportException 异常，当读取文件或生成 SQL 语句发生错误时，该异常中指示了发生错误的行索引和列索引。</exception>
            <exception cref="T:System.InvalidOperationException">抛出一个 InvalidOperationException 异常，当读取文件或生成 SQL 语句发生错误时。</exception>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ReadRowToDataRow(System.Data.DataRow)">
             <summary>
             读取当前行数据到 DataRow 中,该 DataRow 所属的 DataTable 对象结构由配置文件中的列配置定义。
             配置文件中必须至少定义一个实际列信息,否则执行本方法将出现异常。
             可以先执行 CreateFileDataTableSchema() 方法得到一个 DataTable 对象,再将该对象作为参数调用本方法。
             文件中未定义的 DataTable 列保留原值。 
             文件中有定义但 DataTable 中没有的列不会赋值。
             </summary>
            <param name="fileDataRow">定义结构的 DataTable 对象的行,可以先执行 CreateFileDataTableSchema() 方法得到 DataTable ,从而创建行。</param>
             <returns>如果读取到数据则返回 true ,否则返回 false(例如空行)。</returns>
             <exception cref="T:BFC.SDK.IO.FileImportException">抛出一个 FileImportException 异常，当读取文件或生成 SQL 语句发生错误时，该异常中指示了发生错误的行索引和列索引。</exception>
             <exception cref="T:System.InvalidOperationException">抛出一个 InvalidOperationException 异常，当读取文件或生成 SQL 语句发生错误时。</exception>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ReadRowToDataRow(System.Data.DataRow,BFC.SDK.IO.SqlGenerator)">
             <summary>
             读取当前行数据到 DataRow 中,该 DataRow 所属的 DataTable 对象结构由配置文件中的列配置定义。
             配置文件中必须至少定义一个实际列信息,否则执行本方法将出现异常。
             可以先执行 CreateFileDataTableSchema() 方法得到一个 DataTable 对象,再将该对象作为参数调用本方法。
             文件中未定义的 DataTable 列保留原值。 
             文件中有定义但 DataTable 中没有的列不会赋值。
             </summary>
            <param name="fileDataRow">定义结构的 DataTable 对象的行,可以先执行 CreateFileDataTableSchema() 方法得到 DataTable ,从而创建行。</param>
             <param name="sqlGen"></param>
             <returns>如果读取到数据则返回 true ,否则返回 false(例如空行)。</returns>
             <exception cref="T:BFC.SDK.IO.FileImportException">抛出一个 FileImportException 异常，当读取文件或生成 SQL 语句发生错误时，该异常中指示了发生错误的行索引和列索引。</exception>
             <exception cref="T:System.InvalidOperationException">抛出一个 InvalidOperationException 异常，当读取文件或生成 SQL 语句发生错误时。</exception>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ReadToList``1">
            <summary>
            读取所有数据到数据集合对象中。
            配置文件中必须至少定义一个实际列信息,否则执行本方法将出现异常。
            文件中未定义的数据对象的属性保留原值。 
            文件中有定义但数据对象中没有的列不会赋值。
            </summary>
            <returns>返回读取到的数据集合 List&lt;T&gt;。</returns>
            <exception cref="T:BFC.SDK.IO.FileImportException">抛出一个 FileImportException 异常，当读取文件或生成 SQL 语句发生错误时，该异常中指示了发生错误的行索引和列索引。</exception>
            <exception cref="T:System.InvalidOperationException">抛出一个 InvalidOperationException 异常，当读取文件或生成 SQL 语句发生错误时。</exception>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ReadRowToDataModel(System.Object)">
             <summary>
             读取当前行数据到数据对象（普通的 Class）中。
             配置文件中必须至少定义一个实际列信息,否则执行本方法将出现异常。
             文件中未定义的数据对象的属性保留原值。 
             文件中有定义但数据对象中没有的列不会赋值。
             </summary>
            <param name="model">需要填充数据的数据对象。</param>
             <returns>如果读取到数据则返回 true ,否则返回 false(例如空行)。</returns>
             <exception cref="T:BFC.SDK.IO.FileImportException">抛出一个 FileImportException 异常，当读取文件或生成 SQL 语句发生错误时，该异常中指示了发生错误的行索引和列索引。</exception>
             <exception cref="T:System.InvalidOperationException">抛出一个 InvalidOperationException 异常，当读取文件或生成 SQL 语句发生错误时。</exception>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ReadRowToDataModel(System.Object,BFC.SDK.IO.SqlGenerator)">
             <summary>
             读取当前行数据到数据对象（普通的 Class）中。
             配置文件中必须至少定义一个实际列信息,否则执行本方法将出现异常。
             文件中未定义的数据对象的属性保留原值。 
             文件中有定义但数据对象中没有的列不会赋值。
             </summary>
            <param name="model">需要填充数据的数据对象。</param>
             <param name="sqlGen">存储产生SQL的语句。可以为 null。</param>
             <returns>如果读取到数据则返回 true ,否则返回 false(例如空行)。</returns>
             <exception cref="T:BFC.SDK.IO.FileImportException">抛出一个 FileImportException 异常，当读取文件或生成 SQL 语句发生错误时，该异常中指示了发生错误的行索引和列索引。</exception>
             <exception cref="T:System.InvalidOperationException">抛出一个 InvalidOperationException 异常，当读取文件或生成 SQL 语句发生错误时。</exception>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ReadRowToDataModel(System.Object,BFC.SDK.IO.SqlGenerator,System.Boolean)">
             <summary>
             读取当前行数据到数据对象（普通的 Class）中。
             配置文件中必须至少定义一个实际列信息,否则执行本方法将出现异常。
             文件中未定义的数据对象的属性保留原值。 
             文件中有定义但数据对象中没有的列不会赋值。
             </summary>
            <param name="model">需要填充数据的数据对象。</param>
             <param name="sqlGen"></param>
             <param name="isCheckType">是否需要强制检查类型。</param>
             <returns>如果读取到数据则返回 true ,否则返回 false(例如空行)。</returns>
             <exception cref="T:BFC.SDK.IO.FileImportException">抛出一个 FileImportException 异常，当读取文件或生成 SQL 语句发生错误时，该异常中指示了发生错误的行索引和列索引。</exception>
             <exception cref="T:System.InvalidOperationException">抛出一个 InvalidOperationException 异常，当读取文件或生成 SQL 语句发生错误时。</exception>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.ChangeType">
            <summary>
            将读取的各个字段的文本转换为实际的数据类型的值。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.CheckConstrain">
            <summary>
            检查各字段值是否符合所有设定的约束条件。
            请保证在调用本方法之前调用了 ChangeType() 方法。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.Close">
            <summary>
            关闭当前导入文件的读取。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.Tag">
            <summary>
            获取或设置自定义存储的对象数据。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.ExecuteQueryCallback">
            <summary>
            获取或设置执行脚本查询数据结果的回调方法。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.FileImportHelper.ExecuteNonQueryCallback">
            <summary>
            获取或设置执行非查询脚本的回调方法。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.FileImportHelper.ReadRowOption.ReadData">
            <summary>
            读取数据行。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.FileImportHelper.ReadRowOption.ReadHeader">
            <summary>
            读取标题行。
            </summary>
        </member>
        <member name="F:BFC.SDK.IO.FileImportHelper.ReadRowOption.ReadFileOnly">
            <summary>
            仅仅是读取文件一行，不作任何用途。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.CheckConstraintsAndConvert``2(System.String,System.String,System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            为 List 集合的数据，根据 FileImportHelper 的定义进行约束检查，并转换为另一个 LIST 对象。
            </summary>
            <typeparam name="FROM">需要检查约束的源 List 集合中的项目的对象类型，类型中的属性类型应该为简单类型。</typeparam>
            <typeparam name="TO">需要转换为目标对象的类型，类型中的属性类型应该为简单类型。</typeparam>
            <param name="configFile">配置文件完整路径，如果不是绝对路径，则相对于当前应用程序域的路径。</param>
            <param name="configName">配置节名称。</param>
            <param name="sourceList">要检查的 List 集合，也是转换的数据源</param>
            <param name="convertToList">
            <para>要转换为目标的 List 集合，如果无需转换可以为 null，无需转换时 TO 类型可以传递任意类型。</para>
            <para>可以在 FileImportHelper 配置文件中的 Field 定义节点中增加 convertToFieldName="property name" 自定义XML属性(XMLAttribute)，用于设置要转换的目标对象公共属性名称。</para>
            <para>可以在 FileImportHelper 配置文件中的 Field 定义节点中增加 enableCheckConstraintsAndConvert="false" 自定义XML属性(XMLAttribute)，用于设置该字段只需要检查约束，无需转换到新对象中。</para>
            </param>
        </member>
        <member name="M:BFC.SDK.IO.FileImportHelper.CheckConstraintsAndConvert``1(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            根据 FileImportHelper 的定义对某一数据对象进行约束检查，并转换为另一个对象。
            </summary>
            <typeparam name="TO">需要转换为目标对象的类型，类型中的属性类型应该为简单类型。</typeparam>
            <param name="configFile">配置文件完整路径，如果不是绝对路径，则相对于当前应用程序域的路径。</param>
            <param name="configName">配置节名称。</param>
            <param name="sourceModel">要检查的对象，也是转换的数据源</param>
            <param name="isNeedConvert">是否需要转换新对象，如果无需转换可以为 null，无需转换时 TO 类型可以传递任意类型。
            </param>
        </member>
        <member name="T:BFC.SDK.IO.ImportFieldDefine">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.Text2">
            <summary>
            对于读取到的文本按各种定义进行处理之后的文本。
            如果未读取到文本则为 null。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.Value">
            <summary>
            对于读取到的文本按各种定义进行处理之后，再转换成指定的数据类型之后的值。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.Text">
            <summary>
            获取从文件中读取到的原始文本。如果未读取到文本则为 null。
            可以对该属性进行赋值以更改读取到的原始文本。
            对当前属性赋值之后，如果在 OnReadRowValue 事件之后赋的值请调用 ChangeType 方法刷新 Value 属性值。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.Required">
            <summary>
            指示当前字段是否必须在导入文件中能读取到值(包括读取到空字符串），默认值为 false。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.AllowDBNull">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.AllowStringEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.IsLTrim">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.IsRTrim">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.SqlValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.LetterConvertOption">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.MinValue">
            <summary>
            获取或设置当前字段值必须达到的最小值。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.MaxValue">
            <summary>
            获取或设置当前字段值必须不能超过的最大值。
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.ImportFieldDefine.ProcessCellTextByDefinition(System.String)">
            <summary>
            根据定义处理读取到的文本。
            不会检查各种约束。
            </summary>
            <param name="valueText"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.IO.ImportFieldDefine.GetValueByDefinition(System.String)">
            <summary>
            Convert string to object value by field definition.
            But not check constraints.
            </summary>
            <param name="text">要转换数据类型的文本。</param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.OnConstrainingScript">
            <summary>
            用户自定义设置的检查约束的脚本。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportFieldDefine.OnSqlValueStringGenerateScript">
            <summary>
            用户自定义设置的将当前值转换为可用于 SQL 语句中的字符串值
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.ImportFieldDefine.ChangeType(BFC.SDK.IO.FileImportHelper)">
            <summary>
            将读取的文本经处理之后(Text2 属性值)转换为实际数据类型的值，并设置 Value 属性。
            </summary>
            <param name="importHelper">执行读取数据的 FileImportHelper 对象。</param>
        </member>
        <member name="M:BFC.SDK.IO.ImportFieldDefine.CheckConstrain(BFC.SDK.IO.FileImportHelper)">
            <summary>
            检查值是否符合所有设定的约束条件。
            请保证在调用本方法之前调用了 ChangeType() 方法。
            </summary>
            <param name="importHelper">执行读取数据的 FileImportHelper 对象。</param>
        </member>
        <member name="M:BFC.SDK.IO.ImportFieldDefine.GenerateSqlValueString(BFC.SDK.IO.FileImportHelper)">
            <summary>
            根据参数取得数据类型,返回符合SQL语法的字符串。如：参数为字符串“value”,则返回“'value'”.
            当参数为DateTime数据类型时,返回的字符串取决于 format 指定的格式。
            该方法在调用 CheckConstrain() 方法之后调用。
            </summary>
            <param name="importHelper">执行读取数据的 FileImportHelper 对象。</param>
            <returns>符合SQL语法的字符串。如果无法转换则返回 null,例如二进制数组.</returns>
        </member>
        <member name="T:BFC.SDK.IO.ImportTableDefine">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.IO.ImportTableDefine.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.StartReadRowIndex">
            <summary>
            读取文件数据开始行索引号（从0开始计数）。
            如果存在列标题，则开始读取的数据行索引号必须大于标题行索引号。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.HeaderRowIndex">
            <summary>
            文件中表示标题的行索引（全文件从0开始的索引），设置为小于 0 的数表示没有标题行，默认值为 -1。
            如果存在列标题，则开始读取的数据行索引号必须大于标题行索引号。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.ResetFileColumnIndex">
            <summary>
            是否根据标题文本重新设置各列对应的数据文件中的列索引（fileColumnIndex 属性值），默认值为 false。
            如果设置为 true，则必须设置 headerRowIndex 属性值，以及相应列的 headerText 属性值。
            显示设置 fileColumnIndex 为 none(或-1) 值的列不会重置列索引号。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.DbType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.GenerateSelectSql">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.GenerateUpdateSql">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.GenerateDeleteSql">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.GenerateInsertSql">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.GenerateInsertAction">
            <summary>
            生成 Insert SQL 语句时对于已存在数据的处理。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.ConstraintsColumnCount">
            <summary>
            文件每行至少要求的列数。如果设置为0，则必须要满足所有列定义的列数。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.ConstraintsIgnoreEmptyRow">
            <summary>
            是否忽略空行。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.Item(System.Int32)">
            <summary>
            获取指定索引号的 ImportFieldDefine 对象。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.Item(System.String)">
            <summary>
            获取指定名称的 ImportFieldDefine 对象。
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.OnRowTextAfterReadScript">
            <summary>
            当读取文件一行文本之后执行的脚。返回值为 bool 类型，表示是否取消后续的读取操作。true：取消后续操作。
            在该脚本中能够使用 FieldDefine 对象的 Text,Text2 属性，不能使用 Value 属性。
            </summary>
        </member>
        <member name="P:BFC.SDK.IO.ImportTableDefine.OnRowValueAfterReadScript">
            <summary>
            当读取文件一行文本并已转换为相应类型的值之后执行的脚。返回值为 bool 类型，表示是否取消后续的读取操作。true：取消后续操作。
            在该脚本中能够使用 FieldDefine 对象的 Text,Text2，Value 属性。   
            </summary>
        </member>
        <member name="T:BFC.SDK.IO.RowReadingEventHandler">
            <summary>
            
            </summary>
            <param name="importHelper"></param>
            <param name="e"></param>
        </member>
        <member name="T:BFC.SDK.Net.FtpClient">
            <summary>
            用于实现FTP功能的类。
            本类中所有涉及路径的参数，以“/”开头表示基于根目录下的绝对路径，否则就是基于当前工作目录下的相对路径。
            </summary>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.#ctor(System.String)">
            <summary>  
            以匿名用户连接FTP服务器
            </summary>  
            <param name="ftpServer">FTP连接地址</param>  
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.#ctor(System.String,System.String,System.String)">
            <summary>  
            连接FTP服务器
            </summary>  
            <param name="ftpServer">FTP连接地址</param>  
            <param name="ftpUserID">用户名</param>  
            <param name="ftpPassword">密码</param>  
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>  
            连接FTP服务器
            </summary>  
            <param name="ftpServer">FTP连接地址</param>  
            <param name="port">FTP连接地址</param>  
            <param name="ftpRemotePath">指定FTP连接成功后的当前目录, 如果不指定即默认为根目录</param>  
            <param name="ftpUserID">用户名</param>  
            <param name="ftpPassword">密码</param>  
        </member>
        <member name="P:BFC.SDK.Net.FtpClient.CurrentDirectory">
            <summary>
            获取当前所处的 FTP 目录地址。
            如果当前是根目录，则返回“/”，否则返回末尾不带“/”的路径字符串。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.FtpClient.BufferSize">
            <summary>
            设置或获取上传文件时的缓冲大小(字节数)。
            默认为20k。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.FtpClient.FtpServer">
            <summary>
            获取当前的FTP服务器地址。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.FtpClient.KeepAlive">
            <summary>
            获取或设置一个 System.Boolean 值，该值指定在请求完成之后是否关闭到 FTP 服务器的控制连接。
            如果不应销毁到服务器的连接，则为 true；否则为 false。默认值为 true。
            该属性值变更后只有在之后的请求连接才会生效。
            如果值为 true，则在 FtpHelper 的 Dispose() 方法中关闭控制连接。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.FtpClient.UseBinary">
            <summary>
             获取或设置一个 System.Boolean 值，该值指定文件传输的数据类型。
             true，指示服务器要传输的是二进制数据；false，指示数据为文本。默认值为 true。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.FtpClient.UsePassive">
            <summary>
             获取或设置客户端应用程序的数据传输过程的行为。
             如果客户端应用程序的数据传输过程侦听数据端口上的连接(即主动模式)，则为 false；如果客户端应在数据端口上启动连接（即被动模式），则为 true。默认值为 true。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.FtpClient.EnableSsl">
            <summary>
             获取或设置 System.Boolean，它指定是否使用 SSL 连接。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.FtpClient.Port">
            <summary>
             获取或设置 FTP 服务器的连接端口。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.FtpClient.Proxy">
            <summary>
             获取或设置用于与 FTP 服务器通信的代理。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.FtpClient.ReadWriteTimeout">
            <summary>
            获取或设置写读取或写入超时之前的毫秒数。默认值为 300,000 毫秒（5 分钟）。
            </summary>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.AppendDownload(System.String,System.Object,System.Int64,System.Boolean)">
            <summary>
            从 FTP 服务器上文件的指定字节位置处开始下载。
            </summary>
            <param name="ftpFileName"></param>
            <param name="localFileNameOrStream">需要在本地写入的文件或需要写入的流对象。</param>
            <param name="remoteFileOffset"></param>
            <param name="appendFile">是否在现有文件末尾追加，仅当 localFileNameOrStream 为 System.String 类型时有效。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.AppendDownload(System.String,System.IO.Stream,System.Int64)">
            <summary>
            从 FTP 服务器上文件的指定字节位置处开始下载，并写入指定的流对象。
            </summary>
            <param name="ftpFileName">需要下载的 FTP 服务器上的文件名称或路径。</param>
            <param name="stream">需要写入的流对象。</param>
            <param name="offset">指定需要从远程文件中指定字节位置处开始下载。</param>
            <returns>返回总共下载的字节数。</returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.AppendDownload(System.String,System.String,System.Int64)">
            <summary>
            从 FTP 服务器上文件的指定字节位置处开始下载，并追加到本地文件末尾。
            如果本地文件不存在则会自动创建。
            </summary>
            <param name="ftpFileName">需要下载的 FTP 服务器上的文件名称或路径。</param>
            <param name="localFileName">本地文件完整路径。</param>
            <param name="offset">指定需要从远程文件中指定字节位置处开始下载。</param>
            <returns>返回总共下载的字节数。</returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.Download(System.String,System.String)">
            <summary>
             从 FTP 服务器上下载文件保存到本地。
             如果本地文件已存在将会被覆盖。
            </summary>
            <param name="ftpFileName">需要下载的的文件名称或路径。</param>
            <param name="localFileName">本地文件完整路径，如果文件已存在将会被覆盖。</param>
             <returns>返回总共下载的字节数。</returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.Download(System.String)">
            <summary>
             从 FTP 服务器上下载文件。
             下载太大的文件不建议使用本方法。
            </summary>
            <param name="ftpFileName">需要下载的的文件名称或路径。</param>
             <returns>返回总共下载的字节数组。</returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.Upload(System.String,System.String)">
            <summary>
            将本地文件上传到 FTP 。
            </summary>
            <param name="localFile">本地文件完整路径。</param>
            /// <param name="ftpFileName">上传后的文件名，可以包含文件路径，当指定相对路径时，是相对于当前目录的路径。如果不指定则和本地文件同名。</param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.Upload(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            将指定的字节数组上传到 FTP 。
            如果是大文件上传不建议使用本方法。
            </summary>
            <param name="data">需要上传的字节数组。</param>
            <param name="offset">从零开始的字节偏移量,从此处开始将字节数组进行上传。</param>
            <param name="count">要从当前字节数组中最多上传的字节数。</param>
            <param name="ftpFileName">上传后的文件名，可以包含文件路径，当指定相对路径时，是相对于当前目录的路径。本参数必须指定。</param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.Upload(System.IO.Stream,System.String)">
             <summary>
             将指定的数据流中的数据上传到 FTP 。
             </summary>
            <param name="stream">数据流(可通过设置偏移来实现从特定位置开始上传)</param>
             <param name="ftpFileName">上传后的文件名，可以包含文件路径，当指定相对路径时，是相对于当前目录的路径。本参数必须指定。</param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.AppendUpload(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
             向 FTP 服务器上的文件追加内容。
             上传大文件不建议使用本方法。
            </summary>
             <param name="data">需要上传的字节数组。</param>
             <param name="offset">从零开始的字节偏移量,从此处开始将字节数组进行上传。</param>
             <param name="count">要从当前字节数组中最多上传的字节数。</param>
            <param name="ftpFileName">上传后的文件名，可以包含文件路径，当指定相对路径时，是相对于当前目录的路径。本参数必须指定。</param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.AppendUpload(System.IO.Stream,System.String)">
            <summary>
             向 FTP 服务器上的文件追加内容。
             可以通过设置参数 stream 的偏移量来实现从特定位置开始上传。
            </summary>
            <param name="stream">数据流(可通过设置偏移来实现从特定位置开始上传)</param>
            <param name="ftpFileName">上传后的文件名，可以包含文件路径，当指定相对路径时，是相对于当前目录的路径。本参数必须指定。</param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.AppendUpload(System.String,System.String,System.Int64)">
            <summary>
             给FTP服务器上的文件追加内容。
            </summary>
            <param name="localFile">本地文件路径。</param>
            <param name="ftpFileName">上传后的文件名或文件路径</param>
            <param name="offset">指定从本地文件的特定的字节位置开始追加内容。</param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.DeleteFile(System.String)">
            <summary>  
            删除 FTP 上的指定文件。
            </summary>  
            <param name="fileName">需要删除的文件名称或完整路径。</param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.EnumChildDirsAndFiles(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String[]})">
            <summary>
            枚举指定文件夹下所有的子文件夹及其文件。
            </summary>
            <param name="dir">需要枚举的文件夹。</param>
            <param name="lstDirs">
            用于存储枚举到的文件夹集合。
            该集合也存储了 dir 表示的文件夹。
            </param>
            <param name="hashFiles">
            用于存储枚举到的文件的集合，key 为文件夹路径，value 是该文件夹下的所有文件数组。
            该集合也存储了参数 dir 下的所有文件。
            </param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.DeleteDirectory(System.String)">
            <summary>  
            删除 FTP 上的指定文件夹，该文件夹下的所有子文件夹和文件都会自动被删除。
            </summary>  
            <param name="directoryName">需要删除的文件夹名称或文件夹路径。</param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.DeleteDirectory(System.String,System.Boolean)">
            <summary>  
            删除 FTP 上的指定文件夹。
            </summary>  
            <param name="directoryName">需要删除的文件夹名称或文件夹路径。</param>
            <param name="isRecursion">是否需要递归删除所有的子文件夹和文件。
            true:如果提供的 directoryName 下有子文件夹或子文件则会递归删除所有的子文件夹和文件，然后再删除指定的文件夹。
            false:直接删除指定的文件夹，如果该文件夹下有子文件夹或文件则会引发异常。
            </param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.ConvertRegexPattern(System.String)">
            <summary>
            将普通的路径匹配格式字符串解析为正则表达式格式字符串。
            多个匹配模式以分号（;）或逗号（,）分隔。
            </summary>
            <param name="fileSearchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GetDirectories">
            <summary>  
            获取当前目录下所有子文件夹.
            </summary>  
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GetDirectories(System.String)">
            <summary>  
            获取当前目录下符合查找条件的子文件夹.
            </summary>  
            <param name="searchPattern">提供匹配表达式，用于筛选应该返回的目录名称列表。
            如果为 null 或 Empty 则返回所有的目录名称。
            </param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GetDirectories(System.String,System.String)">
            <summary>  
            获取 FTP 指定目录下符合查找条件的子文件夹.
            </summary>  
            <param name="ftpDirectory">需要获取文件夹列表的所属父目录路径。
            如果提供 null 或 Empty 则表示获取当前目录下的所有的文件夹列表。
            </param>
            <param name="searchPattern">提供匹配表达式，用于筛选应该返回的目录名称列表。
            如果为 null 或 Empty 则返回所有的目录名称。
            </param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GetFiles">
            <summary>  
            获取当前目录下的所有文件列表。 
            </summary>   
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GetFiles(System.String)">
            <summary>  
            获取 FTP 当前目录下符合查找条件的文件列表。 
            </summary>   
            <param name="searchPattern">提供一个匹配表达式，用于筛选应该返回的文件名称列表。
            如果为 null 或 Empty 则返回所有的目录名称。
            </param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GetFiles(System.String,System.String)">
            <summary>  
            获取 FTP 指定目录下符合查找条件的文件列表。 
            </summary>   
            <param name="ftpDirectory">需要获取文件列表的所属父目录路径。
            如果提供 null 或 Empty 则表示获取当前目录下的所有的文件列表。
            </param>
            <param name="searchPattern">提供一个匹配表达式，用于筛选应该返回的文件名称列表。
            如果为 null 或 Empty 则返回所有的目录名称。
            </param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GetAllList(System.String[]@,System.String[]@,System.String,System.String)">
            <summary>  
            获取 FTP 当前目录下的所有的目录列表(包括文件和文件夹)
            </summary>   
            <param name="files">返回获取到的所有文件。</param>
            <param name="directories">返回获取到的所有文件夹。</param>
            <param name="fileSearchPattern">提供一个匹配表达式，用于筛选应该返回的文件名称列表。
            如果为 null 或 Empty 则返回所有文件。
            </param>
            <param name="directorySearchPattern">提供一个匹配表达式，用于筛选应该返回的文件夹名称列表。
            如果为 null 或 Empty 则返回所有文件夹。
            </param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GetAllList(System.String,System.String[]@,System.String[]@,System.String,System.String)">
            <summary>  
            获取 FTP 指定目录下的所有的目录列表(包括文件和文件夹)
            </summary>   
            <param name="ftpDirectory">需要获取目录和文件列表的所属父目录路径。
            如果提供 null 或 Empty 则表示获取当前目录下的所有的目录列表(包括文件和文件夹)。
            </param>
            <param name="files">返回获取到的所有文件。</param>
            <param name="directories">返回获取到的所有文件夹。</param>
            <param name="fileSearchPattern">提供一个匹配表达式，用于筛选应该返回的文件名称列表。
            如果为 null 或 Empty 则返回所有文件。
            </param>
            <param name="directorySearchPattern">提供一个匹配表达式，用于筛选应该返回的文件夹名称列表。
            如果为 null 或 Empty 则返回所有文件夹。
            </param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GuessFileListStyle(System.String)">
            <summary>
            判断文件列表的方式Window方式还是Unix方式
            </summary>
            <param name="line">文件信息列表行文本</param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.FileExists(System.String)">
            <summary>
            判断 FTP 服务器上指定的文件是否存在。
            </summary>
            <param name="fileName">要检查的文件名称或文件路径。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.DirectoryExists(System.String)">
            <summary>
            判断 FTP 服务器上指定的文件夹是否存在。
            </summary>
            <param name="directoryName">要检查的文件夹名称或文件夹路径。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.Exists(System.String,System.Boolean)">
            <summary>
            判断当前目录下的文件或文件夹是否存在。
            </summary>
            <param name="name">要检查的文件或文件夹名称</param>
            <param name="isFile">如果是检查文件是否存在:true，检查文件夹是否存在：false。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.Exists(System.String)">
            <summary>
            检查指定的文件或文件夹是否存在。
            </summary>
            <param name="name">要检查的文件或文件夹。</param>
            <returns>如果文件或文件夹存在则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GetFileSize(System.String)">
            <summary>
            获取指定文件的文件大小。
            </summary>
            <param name="fileName">要获取文件大小的文件名称或路径。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.CreateDirectory(System.String)">
            <summary>
            在 FTP 上创建文件夹。
            如果需要创建的文件夹的父文件夹不存在也会自动创建。
            </summary>
            <param name="dirName">要创建的文件夹路径或名称。可以是一个完整的路径，只要路径中任意一个文件夹不存在就会自动创建，直到该路径的文件夹全部创建。</param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.Rename(System.String,System.String)">
            <summary>  
            更改当前目录下的文件或文件夹名称。
            提示：当源目录与新目录不相同时，则将在 FTP 服务器上移动文件或文件夹。
            </summary> 
            <param name="currentName">需要重命名的文件或文件夹路径或名称。</param>
            <param name="newName">
            指定重命名后的文件或文件夹名称。
            注意：如果设置本参数为相对路径，则表示从当前工作目录（属性 CurrentDirectory）开始的相对路径，并不是从 currentName 参数所在的父目录开始的相对路径。
            </param>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GetLastModifiedTime(System.String)">
            <summary>
            获取 FTP 上指定文件的最后修改时间。
            </summary>
            <param name="fileName">FTP 上的文件名称或路径。</param>
            <returns>返回指定文件的最后修改时间。</returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GotoParentDirectory">
            <summary>
            切换当前目录到上一层父目录.
            </summary>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GotoDirectory(System.String)">
            <summary>  
            切换到指定的目录。
            </summary>  
            <param name="directoryName">
            要切换到目录的路径或名称。
            如果开头不是以“/”开头，则表示切换到当前目录下的子目录；
            否则就切换到根目录下的指定目录。
            </param>   
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.ResolveAbsoluteFtpPath(System.String[])">
            <summary>
            将字符串数组组合成 FTP 绝对路径字符串。
            </summary>
            <param name="paths">
            字符串数组。
            开头元素以“/”开头表示根目录，否则会自动拼接上根目录。
            </param>
            <returns>
            返回组合后的 FTP 绝对路径，始终以“/”开头；
            除非是返回根目录“/”，否则返回值始终不是以“/”结尾。
            当参数未提供任何有效的值时，直接返回当前工作目录。
            </returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GetParentDirectory(System.String)">
            <summary>
            获取指定路径的父目录完整路径。
            </summary>
            <param name="path">需要获取父目录的源路径。</param>
            <returns>
            如果 path 参数为根目录，则返回 null，否则返回指定路径的父目录完整路径。
            如果为返回值不是根目录（“/”），则返回值末尾始终不带“/”。
            </returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.GetDirectoryName(System.String)">
            <summary>
            获取文件夹路径中的文件夹名称。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.CombineUri(System.String[])">
            <summary>
            将字符串数组组合成 FTP URI 路径字符串。
            </summary>
            <param name="paths">字符串数组。开头元素以“/”开头表示根目录，否则会自动拼接上根目录。</param>
            <returns>返回组合后的 FTP URI 路径，始终以“/”结尾。</returns>
        </member>
        <member name="M:BFC.SDK.Net.FtpClient.Dispose">
            <summary>
            释放对象所占用的资源。
            如果设置 KeepAlive 属性为 true ，则在本方法中关闭 FTP 控制连接。
            </summary>
        </member>
        <member name="T:BFC.SDK.Net.NetworkSmtpMail">
            <summary>
            提供用于构造和发送电子邮件的属性和方法。
            </summary>
        </member>
        <member name="M:BFC.SDK.Net.NetworkSmtpMail.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.NetworkSmtpMail.UseDefaultCredentials">
            <summary>
            获取或设置是否以当前登录用户的默认凭据进行身份验证。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.NetworkSmtpMail.SmtpServer">
            <summary>
            获取或设置要登录的 SMTP 服务器名。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.NetworkSmtpMail.SmtpUserName">
            <summary>
            获取或设置登录 SMTP 服务器的用户名。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.NetworkSmtpMail.SmtpPassword">
            <summary>
            获取或设置登录 SMTP 服务器的密码。
            </summary>
        </member>
        <member name="P:BFC.SDK.Net.NetworkSmtpMail.SmtpServerPort">
            <summary>
            获取或设置使用 SMTP 服务器使用的端口号。初始默认值为 25。
            </summary>
        </member>
        <member name="M:BFC.SDK.Net.NetworkSmtpMail.Send">
            <summary>
            发送当前 MailMessageEx 对象构造的电子邮件 。
            </summary>
        </member>
        <member name="T:BFC.SDK.ResourceManagement.ComponentLocalizableBase">
            <summary>
            为组件开发提供本地化多语言支持，不适用于项目的集中开发，只适用于不可继承的类对本类的继承以方便加载资源。
            底层资源管理使用 .net Framework 类库中的 ComponentResourceManager 类。
            资源管理与界面设计时设计器中管理资源方法相同。
            请注意：只有不可派生的类才能继承此类，否则资源会出现无法找到的错误。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.ComponentLocalizableBase.Resources">
            <summary>
            取得当前类型的资源。
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ComponentLocalizableBase.GetStringResource(System.String,System.Object[])">
            <summary>
            取得字符串类型的资源。
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ComponentLocalizableBase.GetIntResource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ComponentLocalizableBase.GetDecimalResource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ComponentLocalizableBase.GetBooleanResource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ComponentLocalizableBase.GetObjectResource(System.String)">
            <summary>
            取得 object 类型的资源。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ComponentLocalizableBase.ReleaseAllResources">
            <summary>
            通知 System.Resources.ResourceManager 对所有 System.Resources.ResourceSet 对象调用
                System.Resources.ResourceSet.Close()，并释放所有资源。
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ComponentLocalizableBase.ApplyResources(System.Object,System.String)">
            <summary>
            将资源的值应用于对象相应的属性。
            </summary>
            <param name="value">一个 System.Object，它包含要应用的属性值。</param>
            <param name="objectName"> 一个 System.String，它包含要在资源中查找的对象名称。</param>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.ComponentLocalizableBase.IgnoreCaseForResources">
            <summary>
            获取或设置布尔值，该值指示 ResourceManager 的当前实例是否允许在 System.Resources.ResourceManager.GetString(System.String)
                和 System.Resources.ResourceManager.GetObject(System.String) 方法中进行不区分大小写的资源查找。
            </summary>
        </member>
        <member name="T:BFC.SDK.ResourceManagement.ILocalizableSupport">
            <summary>
            提供多语言区域化支持的接口。
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ILocalizableSupport.ApplyResources(System.Object,System.String)">
            <summary>
            对指定的对象应用所有资源。
            </summary>
            <param name="value"></param>
            <param name="name"></param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ILocalizableSupport.ApplyResources(BFC.SDK.ResourceManagement.ResourceView)">
            <summary>
            对指定 ResourceView 对象应用资源。
            </summary>
            <param name="view">需要应用资源的对象。</param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ILocalizableSupport.GetBooleanResource(System.String)">
            <summary>
            获取 System.Boolean 类型的资源值。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ILocalizableSupport.GetDecimalResource(System.String)">
            <summary>
            获取 System.Decimal 类型的资源值。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ILocalizableSupport.GetIntResource(System.String)">
            <summary>
            获取 System.Int32 类型的资源值。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ILocalizableSupport.GetObjectResource(System.String)">
            <summary>
            返回指定的非字符串资源的值。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ILocalizableSupport.GetStringResource(System.String,System.Object[])">
            <summary>
            获取字符串资源的值，并且可以提供资源中需要的相应实际参数，参数不能是资源名称。
            </summary>
            <param name="name"></param>
            <param name="args">如果资源中需要参数，则在此处提供。这些参数是实际的值，不会从资源中获取对应的资源。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ILocalizableSupport.GetStringResourceExt(System.String,System.Object[])">
            <summary>
            获取字符串资源的值，并且可以提供资源中需要的相应实际参数，参数可以是一个资源名称。
            如果参数是资源名称时，请使用“{}”括起来。
            </summary>
            <param name="name"></param>
            <param name="argsValueOrResourName">
            <para>如果资源中需要参数，则在此处提供。这些参数可以是实际的值，也可以是一个资源名称，资源名称对应的资源值将作为实际参数。</para>
            <para>如果参数是资源名称时，请使用“{}”括起来。</para>
            <para>例如：</para>
            <para>"{employeeno}"：表示 employeeno 是资源名称；</para>
            <para> 68 ：表示整数 68 是实际的值；</para>
            <para>"employeeno"：表示 employeeno 是实际的值；</para>
            <para>如果提供的资源名称无法找到资源时，会作为实际的参数值处理。</para>
            </param>
            <returns>如果找到资源则返回实际的资源，如果未找到返回 null。</returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ILocalizableSupport.ReleaseAllResources">
            <summary>
            释放所有的资源对象。
            </summary>
        </member>
        <member name="T:BFC.SDK.ResourceManagement.BinaryResourceManager">
            <summary>
            提供本地化多语言支持，使用 ComponentResourceManager 管理资源，资源类型为 System.Resources.ResourceSet。 
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.BinaryResourceManager.#ctor(System.Type)">
            <summary>
            使用指定类型实例化对象。
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.BinaryResourceManager.Resources">
            <summary>
            取得当前类型的资源。
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.BinaryResourceManager.GetStringResource(System.String,System.Object[])">
            <summary>
            取得字符串类型的资源。
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.BinaryResourceManager.GetIntResource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.BinaryResourceManager.GetDecimalResource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.BinaryResourceManager.GetBooleanResource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.BinaryResourceManager.GetObjectResource(System.String)">
            <summary>
            取得 object 类型的资源。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.BinaryResourceManager.ReleaseAllResources">
            <summary>
            Tells the System.Resources.ResourceManager to call System.Resources.ResourceSet.Close(),on all System.Resources.ResourceSet objects and release all resources.
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.BinaryResourceManager.ApplyResources(System.Object,System.String)">
            <summary>
            Applies a resource's value to the corresponding property of the object.
            </summary>
            <param name="value"></param>
            <param name="name"></param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.BinaryResourceManager.BFC#SDK#ResourceManagement#ILocalizableSupport#ApplyResources(BFC.SDK.ResourceManagement.ResourceView)">
            <summary>
            对指定 ResourceView 对象应用资源。
            该方法不建议使用。
            </summary>
            <param name="view">需要应用资源的对象。</param>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.BinaryResourceManager.IgnoreCaseForResources">
            <summary>
            Gets or sets a Boolean value indicating whether the current instance of ResourceManager
                allows case-insensitive resource lookups in the System.Resources.ResourceManager.GetString(System.String)
                and System.Resources.ResourceManager.GetObject(System.String) methods.
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.BinaryResourceManager.GetStringResourceExt(System.String,System.Object[])">
            <summary>
            获取字符串资源的值，并且可以提供资源中需要的相应实际参数，参数可以是一个资源名称。
            如果参数是资源名称时，请使用“{}”括起来。
            </summary>
            <param name="name"></param>
            <param name="argsValueOrResourName">
            <para>如果资源中需要参数，则在此处提供。这些参数可以是实际的值，也可以是一个资源名称，资源名称对应的资源值将作为实际参数。</para>
            <para>如果参数是资源名称时，请使用“{}”括起来。</para>
            <para>例如：</para>
            <para>"{employeeno}"：表示 employeeno 是资源名称；</para>
            <para> 68 ：表示整数 68 是实际的值；</para>
            <para>"employeeno"：表示 employeeno 是实际的值；</para>
            <para>如果提供的资源名称无法找到资源时，会作为实际的参数值处理。</para>
            </param>
            <returns>如果找到资源则返回实际的资源，如果未找到返回 null。</returns>
        </member>
        <member name="T:BFC.SDK.ResourceManagement.CultureResourceManager">
            <summary>
            提供资源管理类，使用 System.Resources.ResourceManager 进行资源管理，资源类型为 System.Resources.ResourceSet。 
            通过使用本类，可以对类或组件下创建的资源进行读取。
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.CultureResourceManager.SETTING_KEYS_RESOURCEFILEPREFIX_DEFAULTVALUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.CultureResourceManager.mResourceSet">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.CultureResourceManager.mLocRM">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.CultureResourceManager.mObject">
            <summary>
            需要取得资源的对象。
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.CultureResourceManager.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.CultureResourceManager.ResourceFilePrefix">
            <summary>
            获取资源文件名前缀。资源文件名为：前缀+类名。
            该配置在 Config 文件中。Key="ResourceFilePrefix";
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.CultureResourceManager.GetResourceString(System.String)">
            <summary>
            取得指定的资源值。
            </summary>
            <param name="resName"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.ResourceManagement.ResourceView">
            <summary>
            资源视图装载类，配合 XmlResourceManager 使用。
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.ResourceView.ATTRNAME_NAME">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.ResourceView.ATTRNAME_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.ResourceView.NAMESPACEPREFIX">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.ResourceView.NAMESPACEPREFIX_FULL">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.ResourceView.ATTRNAME_VALUEISNULL">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.ResourceView.ATTRNAME_VALUEISSERIALIZED">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.ResourceView._name">
            <summary>
            定义 view 节点名称。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.ResourceView.Name">
            <summary>
            定义 view 节点名称。
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.ResourceView._viewObject">
            <summary>
            要装载视图资源的对象。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.ResourceView.ViewObject">
            <summary>
            获取要装载视图资源的对象。
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ResourceView.LoadResources(System.Xml.XmlNode)">
            <summary>
            对指定的装载视图资源的对象读取资源并设置到该对象中。
            派生类重写时，请调用 base.LoadResources(System.Xml.XmlNode viewNode) 方法以便自动调用 SetViewObjectMemberValueByResource(System.Xml.XmlNode loaderNode) 方法加载成员资源定义。
            </summary>
            <param name="viewNode"></param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ResourceView.SetViewObjectMemberValueByResource(System.Xml.XmlNode)">
            <summary>
            将指定资源节点下的所有属性值设置到当前加载资源的对象所对应的公共字段或属性成员上。
            可以使用“.”分隔对逐级对下属成员进行赋值。
            最终设置的成员类型必须实现了 System.IConvertible 接口，否则无法将字符串转换为所需的类型。
            该方法在 LoadResources(System.Xml.XmlNode loaderNode) 方法中被调用。
            </summary>
            <param name="loaderNode"></param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ResourceView.GetAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            获取指定 xml 节点下的属性值。
            </summary>
            <param name="node"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.ResourceView.StringType">
            <summary>
            表示一个 System.String 类型实例。
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.ResourceView.ConvertToObject(System.String,System.Type,System.Object@)">
            <summary>
            将定义的资源文件中的字符串值转换为指定类型的对象实例。
            派生类重写时，可以先调用 base.ConvertToObject(string objString, Type t,out object objValue)方法，
            根据返回值为 false 而对那些不受支持的类型自定义进行转换。
            </summary>
            <param name="objString">
            定义的资源文件中的字符串。
            如果传递 null 则会引发空引用异常。
            </param>
            <param name="t">需要将该字符串转换的对象类型。</param>
            <param name="objValue">转换成功之后的对象。</param>
            <returns>
            如果提供的类型不受支持则返回 false，否则如果成功转换则返回 true。
            如果是受支持的类型但无法转换时将抛出异常。
            </returns>
        </member>
        <member name="T:BFC.SDK.ResourceManagement.XmlResourceManager">
            <summary>
            提供本地化多语言支持，使用 XML 文件管理资源，配合 ResourceView 可以派生自定义的资源管理文件格式。
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.mXmlDoc">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.mRootNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.mNsmgr">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.NODENAME_ROOT">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.NODENAME_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.NODENAME_SERIALIZED">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.NODENAME_VIEW">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.NODENAME_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.ATTRNAME_NAME">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.ATTRNAME_TYPE">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.ATTRNAME_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.VIEWNODE_NAME_VALUE_THISOBJECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.NAMESPACEPREFIX">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.XmlResourceManager.IsEmbeddedResources">
            <summary>
            获取是否是嵌入式的资源文件，该设置必须定义在配置文件中。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.XmlResourceManager.ConfigFile">
            <summary>
            XmlResourceManager 配置文件。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.XmlResourceManager.NameIsTypeFullName">
            <summary>
            资源文件名是否使用类型的完全名称命名。
            false:则使用短名称命名。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.XmlResourceManager.IsAssemblyFolder">
            <summary>
            资源文件是否以 Assembly 归类放入 Assembly 名称命名的文件夹中。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.XmlResourceManager.ResourcesBaseDir">
            <summary>
            资源文件基本路径。在该路径下存放各区域对应的资源文件夹。
            初始值为当前应用程序域所在的目录。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.XmlResourceManager.EmbeddedResourcesBaseNamespace">
            <summary>
            获取或设置嵌入式资源的根命名空间。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.XmlResourceManager.DefaultUICulture">
            <summary>
            默认的资源区域名称。
            缺省值为当前UI区域。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.XmlResourceManager.ResourceFileExtention">
            <summary>
            资源文件扩展名(前面不带".")。
            初始值为 res.xml。
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.CheckAndLoadConfigFile">
            <summary>
            检查是否已经加载配置文件，如果未加载，则执行加载操作。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.XmlResourceManager.DefaultViewType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.XmlResourceManager.ViewTypes">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.XmlResourceManager.ViewObjectTypes">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.#ctor(System.Type,System.String)">
            <summary>
            使用指定类型实例化 XmlResourceManager 对象。
            系统将自动在定义的 ResourcesBaseDir 文件夹下查找相应区域下的指定名称的资源文件。
            </summary>
            <param name="type">要应用资源的对象类型。</param>
            <param name="resourceFileNameWithoutExtention">不含扩展名的资源文件名称。</param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.#ctor(System.Type)">
            <summary>
            使用指定类型实例化 XmlResourceManager 对象。
            系统将自动在定义的 ResourcesBaseDir 文件夹下查找相应区域下的该类型资源。
            使用该构造函数，可以使用以程序集名称命名的集成式资源文件。
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.XmlResourceManager.typeFullNameForResource">
            <summary>
            当使用 Type 对象作为参数构建的实例时，获取 Type 对象的完整名称。
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="resourceFile"></param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.ApplyResources(System.Object,System.Xml.XmlNode)">
            <summary>
            根据提供的应用资源对象以及对应的 view XmlNode 对象应用资源。
            </summary>
            <param name="value"></param>
            <param name="viewNode"></param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.ApplyResources(System.Object,System.String)">
            <summary>
            对指定对象应用资源。
            调用该方法应用资源时，必须在资源文件 view 定义中以 type 属性明确定义 ResourceView 类型。
            </summary>
            <param name="value">需要应用资源的对象。</param>
            <param name="name">资源名称。</param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.ApplyResources(BFC.SDK.ResourceManagement.ResourceView)">
            <summary>
            对指定 ResourceView 对象应用资源。
            </summary>
            <param name="view">需要应用资源的对象。</param>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.XmlResourceManager.IsIntegratedResourceFile">
            <summary>
            获取当前配置文件是否是以程序集命名的集成式资源文件。
            当使用 Type 作为参数创建实例，但未找到该 Type 对应的资源文件，
            而却找到了以程序集命名的集成式资源文件时，则该属性返回 true。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.XmlResourceManager.ResourceFile">
            <summary>
            获取当前资源的资源文件完全路径。
            如果是嵌入式资源则该属性值并不是实际的XML资源文件路径。
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.OpenResourceFile(System.String)">
            <summary>
            打开非整合型资源文件（即一个类型定义在单独的一个资源文件中）。
            </summary>
            <param name="resourceFile"></param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.OpenResourceFile(System.String,System.Boolean)">
            <summary>
            打开新的资源文件。
            </summary>
            <param name="resourceFile"></param>
            <param name="isIntegratedResourceFile">要打开的资源文件是否为整合型资源文件（即同一程序集的所有类型定义在一个以程序集名称命名的资源文件中）.</param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.OpenResourceFile(System.IO.Stream,System.Boolean,System.String)">
            <summary>
            打开新的资源文件。
            </summary>
            <param name="xmlStream"></param>
            <param name="isIntegratedResourceFile">要打开的资源文件是否为整合型资源文件（即同一程序集的所有类型定义在一个以程序集名称命名的资源文件中）.</param>
            <param name="xmlStreamMemo">xml 文档流备注信息，仅作异常信息的内容用。</param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.OpenResourceFile(System.Xml.XmlDocument,System.Boolean,System.String)">
            <summary>
            打开新的资源文件。
            </summary>
            <param name="xmlDoc"></param>
            <param name="isIntegratedResourceFile">要打开的资源文件是否为整合型资源文件（即同一程序集的所有类型定义在一个以程序集名称命名的资源文件中）.</param>
            <param name="xmlFileName">资源文件的完整名称。可以为空。仅作异常信息的内容用。</param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.SetResourceFile(System.String)">
            <summary>
            设置新的非整合型资源文件（即一个类型定义在单独的一个资源文件中）。
            </summary>
            <param name="resourceFile"></param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.SetResourceFile(System.String,System.Boolean)">
            <summary>
            设置新的资源文件。
            </summary>
            <param name="resourceFile"></param>
            <param name="isIntegratedResourceFile">该资源文件是否为整合型资源文件（即同一程序集的所有类型定义在一个以程序集名称命名的资源文件中）。</param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.SetResourceFile(System.IO.Stream,System.Boolean,System.String)">
            <summary>
            设置新的资源文件。
            </summary>
            <param name="xmlResourceStream"></param>
            <param name="isIntegratedResourceFile">该资源文件是否为整合型资源文件（即同一程序集的所有类型定义在一个以程序集名称命名的资源文件中）。</param>
            <param name="xmlStreamMemo"></param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.SearchXmlNode(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="nodeName"></param>
            <param name="nameValue"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.GetAllViewNodes">
            <summary>
            取得所有的 view 对象定义。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.GetAllDataNodes">
            <summary>
            取得所有的 data 对象定义。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.SearchViewNode(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.SearchDataNode(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.GetStringResource(System.String,System.Object[])">
            <summary>
            取得资源文件中以 data 定义的字符串资源数据。
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.GetStringResource(System.String,System.String@,System.Object[])">
            <summary>
            取得资源文件中以 data 定义的任何类型资源数据，并以字符串类型返回。
            输出参数 type 返回的是明确定义在该资源上的数据类型。
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <param name="type">定义的 Type 字符串。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.GetStringResourceArray(System.String)">
            <summary>
            取得资源文件中以 data 定义的资源数据数组。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.GetDecimalResource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.GetBooleanResource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.GetIntResource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.GetByteResourceArray(System.String)">
            <summary>
            获取存储在XML资源文件中以 data 定义的经Base64编码的字节数组。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.GetConvertibleValueResource(System.String)">
            <summary>
            根据XML资源文件中以 data 定义并且明确定义了数据类型的资源，该类型必须是实现了IConvertible接口的类型。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.GetObjectResource(System.String)">
            <summary>
            获取以 serialized 定义的已经二进制序列化并且以 base64 编码存储在资源文件中的对象。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.ReleaseAllResources">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.GetStringResourceExt(System.String,System.Object[])">
            <summary>
            获取字符串资源的值，并且可以提供资源中需要的相应实际参数，参数可以是一个资源名称。
            如果参数是资源名称时，请使用“{}”括起来。
            </summary>
            <param name="name"></param>
            <param name="argsValueOrResourName">
            <para>如果资源中需要参数，则在此处提供。这些参数可以是实际的值，也可以是一个资源名称，资源名称对应的资源值将作为实际参数。</para>
            <para>如果参数是资源名称时，请使用“{}”括起来。</para>
            <para>例如：</para>
            <para>"{employeeno}"：表示 employeeno 是资源名称；</para>
            <para> 68 ：表示整数 68 是实际的值；</para>
            <para>"employeeno"：表示 employeeno 是实际的值；</para>
            <para>如果提供的资源名称无法找到资源时，会作为实际的参数值处理。</para>
            </param>
            <returns>如果找到资源则返回实际的资源，如果未找到返回 null。</returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.XmlResourceManager.GetStringResourceExt(System.String,System.String@,System.Object[])">
            <summary>
            获取字符串资源的值，并且可以提供资源中需要的相应实际参数，参数可以是一个资源名称。
            如果参数是资源名称时，请使用“{}”括起来。
            </summary>
            <param name="name"></param>
            <param name="argsValueOrResourName">
            <para>如果资源中需要参数，则在此处提供。这些参数可以是实际的值，也可以是一个资源名称，资源名称对应的资源值将作为实际参数。</para>
            <para>如果参数是资源名称时，请使用“{}”括起来。</para>
            <para>例如：</para>
            <para>"{employeeno}"：表示 employeeno 是资源名称；</para>
            <para> 68 ：表示整数 68 是实际的值；</para>
            <para>"employeeno"：表示 employeeno 是实际的值；</para>
            <para>如果提供的资源名称无法找到资源时，会作为实际的参数值处理。</para>
            </param>
            <param name="type">输出叁数，返回定义的 Type 字符串。</param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager">
            <summary>
            提供本地化多语言支持，使用 XML 文件管理资源，配合 ResourceView 可以派生自定义的资源管理文件格式。
            资源文件固定为嵌入式资源，适用于分发组件使用。
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.dicResourceConfig">
            <summary>
            按需要应用资源的类型的程序集缓存各自的资源管理类的配置。
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.LoadEmbeddedResourceConfig(System.Reflection.Assembly)">
            <summary>
            加载指定程序集或者全局默认（定义在 devlib.config 中）的 XmlResourceManager 的相关配置。
            </summary>
            <param name="assem">如果需要加载指定程序集的嵌入式资源，请指定程序集对象，如果是加载全局默认（定义在 devlib.config 中）的 XmlResourceManager 的相关配置，请传递 null。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.FindResourceAssembly(System.Type,System.String,System.String)">
            <summary>
            获取指定区域的资源文件所在的程序集对象。
            </summary>
            <returns></returns>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.mXmlDoc">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.mRootNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.mNsmgr">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.NODENAME_ROOT">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.NODENAME_DATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.NODENAME_SERIALIZED">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.NODENAME_VIEW">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.NODENAME_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.ATTRNAME_NAME">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.ATTRNAME_TYPE">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.ATTRNAME_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.VIEWNODE_NAME_VALUE_THISOBJECT">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.NAMESPACEPREFIX">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager._currentEmbeddedXmlResourceConfig">
            <summary>
            根据传入的应用资源的类型，查找到的相应的资源配置。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.DefaultUICulture">
            <summary>
            默认的资源区域名称。
            缺省值为当前UI区域。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.DefaultViewType">
            <summary>
            对于未配置具体资源装载类的对象，使用默认的具体资源装载类。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.ViewTypes">
            <summary>
            配置文件中所有定义的资源装载类。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.ViewObjectTypes">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.#ctor(System.Type)">
            <summary>
            使用指定类型实例化 EmbeddedXmlResourcesManager 对象。
            系统将自动在预定义的位置下查找相应区域下的该类型资源。
            </summary>
        </member>
        <member name="F:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.typeFullNameForResource">
            <summary>
            当使用 Type 对象作为参数构建的实例时，获取 Type 对象的完整名称。
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.ApplyResources(System.Object,System.Xml.XmlNode)">
            <summary>
            根据提供的应用资源对象以及对应的 view XmlNode 对象应用资源。
            </summary>
            <param name="value"></param>
            <param name="viewNode"></param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.ApplyResources(System.Object,System.String)">
            <summary>
            对指定对象应用资源。
            调用该方法应用资源时，必须在资源文件 view 定义中以 type 属性明确定义 ResourceView 类型。
            </summary>
            <param name="value">需要应用资源的对象。</param>
            <param name="name">资源名称。</param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.ApplyResources(BFC.SDK.ResourceManagement.ResourceView)">
            <summary>
            对指定 ResourceView 对象应用资源。
            </summary>
            <param name="view">需要应用资源的对象。</param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.OpenResourceFile(System.Xml.XmlDocument,System.String)">
            <summary>
            打开新的资源文件。
            </summary>
            <param name="xmlDoc"></param>
            <param name="xmlFileName">资源文件的完整名称。可以为空。仅作异常信息的内容用。</param>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.SearchXmlNode(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="nodeName"></param>
            <param name="nameValue"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.GetAllViewNodes">
            <summary>
            取得所有的 view 对象定义。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.GetAllDataNodes">
            <summary>
            取得所有的 data 对象定义。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.SearchViewNode(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.SearchDataNode(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.GetStringResource(System.String,System.Object[])">
            <summary>
            取得资源文件中以 data 定义的字符串资源数据。
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.GetStringResource(System.String,System.String@,System.Object[])">
            <summary>
            取得资源文件中以 data 定义的任何类型资源数据，并以字符串类型返回。
            输出参数 type 返回的是明确定义在该资源上的数据类型。
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <param name="type">定义的 Type 字符串。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.GetStringResourceArray(System.String)">
            <summary>
            取得资源文件中以 data 定义的资源数据数组。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.GetDecimalResource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.GetBooleanResource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.GetIntResource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.GetByteResourceArray(System.String)">
            <summary>
            获取存储在XML资源文件中以 data 定义的经Base64编码的字节数组。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.GetConvertibleValueResource(System.String)">
            <summary>
            根据XML资源文件中以 data 定义并且明确定义了数据类型的资源，该类型必须是实现了IConvertible接口的类型。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.GetObjectResource(System.String)">
            <summary>
            获取以 serialized 定义的已经二进制序列化并且以 base64 编码存储在资源文件中的对象。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.ReleaseAllResources">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.GetStringResourceExt(System.String,System.Object[])">
            <summary>
            获取字符串资源的值，并且可以提供资源中需要的相应实际参数，参数可以是一个资源名称。
            如果参数是资源名称时，请使用“{}”括起来。
            </summary>
            <param name="name"></param>
            <param name="argsValueOrResourName">
            <para>如果资源中需要参数，则在此处提供。这些参数可以是实际的值，也可以是一个资源名称，资源名称对应的资源值将作为实际参数。</para>
            <para>如果参数是资源名称时，请使用“{}”括起来。</para>
            <para>例如：</para>
            <para>"{employeeno}"：表示 employeeno 是资源名称；</para>
            <para> 68 ：表示整数 68 是实际的值；</para>
            <para>"employeeno"：表示 employeeno 是实际的值；</para>
            <para>如果提供的资源名称无法找到资源时，会作为实际的参数值处理。</para>
            </param>
            <returns>如果找到资源则返回实际的资源，如果未找到返回 null。</returns>
        </member>
        <member name="M:BFC.SDK.ResourceManagement.EmbeddedXmlResourcesManager.GetStringResourceExt(System.String,System.String@,System.Object[])">
            <summary>
            获取字符串资源的值，并且可以提供资源中需要的相应实际参数，参数可以是一个资源名称。
            如果参数是资源名称时，请使用“{}”括起来。
            </summary>
            <param name="name"></param>
            <param name="argsValueOrResourName">
            <para>如果资源中需要参数，则在此处提供。这些参数可以是实际的值，也可以是一个资源名称，资源名称对应的资源值将作为实际参数。</para>
            <para>如果参数是资源名称时，请使用“{}”括起来。</para>
            <para>例如：</para>
            <para>"{employeeno}"：表示 employeeno 是资源名称；</para>
            <para> 68 ：表示整数 68 是实际的值；</para>
            <para>"employeeno"：表示 employeeno 是实际的值；</para>
            <para>如果提供的资源名称无法找到资源时，会作为实际的参数值处理。</para>
            </param>
            <param name="type">输出叁数，返回定义的 Type 字符串。</param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.ResourceManagement.EmbeddedXmlResourceConfig">
            <summary>
            描述 XmlResourceManager 配置文件中配置的定义。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.EmbeddedXmlResourceConfig.AssemblyForApplyResource">
            <summary>
            需要应用资源的程序集对象。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.EmbeddedXmlResourceConfig.ConfigFile">
            <summary>
            XmlResourceManager 配置文件。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.EmbeddedXmlResourceConfig.NameIsTypeFullName">
            <summary>
            资源文件名是否使用类型的完全名称命名。
            false:则使用短名称命名。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.EmbeddedXmlResourceConfig.EmbeddedResourcesAssmebly">
            <summary>
            按区域名称缓存的资源所在的程序集对象。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.EmbeddedXmlResourceConfig.DefaultUICulture">
            <summary>
            默认的资源区域名称。
            缺省值为当前UI区域。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.EmbeddedXmlResourceConfig.ResourceFileExtention">
            <summary>
            资源文件扩展名(前面不带".")。
            初始值为 res.xml。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.EmbeddedXmlResourceConfig.DefaultViewType">
            <summary>
            对于未配置具体资源装载类的对象，使用默认的具体资源装载类。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.EmbeddedXmlResourceConfig.ViewTypes">
            <summary>
            配置文件中所有定义的资源装载类。
            </summary>
        </member>
        <member name="P:BFC.SDK.ResourceManagement.EmbeddedXmlResourceConfig.ViewObjectTypes">
            <summary>
            配置文件中所有定义的有对应资源装载类的对象类型。
            </summary>
        </member>
        <member name="T:BFC.SDK.Configuration.IniConfigFile">
            <summary>
            IniConfigFile summary丅
            </summary>
        </member>
        <member name="M:BFC.SDK.Configuration.IniConfigFile.#ctor(System.String)">
            <summary>
            Read or write INI information file class.
            </summary>
            <param name="iniPath"></param>
        </member>
        <member name="P:BFC.SDK.Configuration.IniConfigFile.ConfigFile">
            <summary>
            Get INI file path.
            </summary>
        </member>
        <member name="M:BFC.SDK.Configuration.IniConfigFile.WriteValue(System.String,System.String,System.String)">
            <summary>
            Write a value to INI file.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.IniConfigFile.ReadValue(System.String,System.String)">
            <summary>
            Read value from INI file.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Configuration.XmlConfigFile">
            <summary>
            自定义配置文件读写类。
            Section 指第二级子节点（Xml 文件中根节点下的第一层子节点）。
            Key 指第三级子节点（Xml 文件中根节点下的第二层子节点）。
            </summary>
        </member>
        <member name="F:BFC.SDK.Configuration.XmlConfigFile.CON_ATTR_VERSION_NAME">
            <summary>
            配置文件的版本属性名称。
            </summary>
        </member>
        <member name="F:BFC.SDK.Configuration.XmlConfigFile.mXmlDoc">
            <summary>
            装载配置文件的 XmlDocument 对象。
            </summary>
        </member>
        <member name="F:BFC.SDK.Configuration.XmlConfigFile.mRootNode">
            <summary>
            配置文件的根节点 XmlNode 对象。
            </summary>
        </member>
        <member name="F:BFC.SDK.Configuration.XmlConfigFile.CON_ROOTNODE_NAME_DEFAULT">
            <summary>
            配置文件的根节点名称。
            </summary>
        </member>
        <member name="F:BFC.SDK.Configuration.XmlConfigFile.CON_ENCRYPTED_ATTRIBUTE_NAME">
            <summary>
            值是否加密的属性名称。
            </summary>
        </member>
        <member name="F:BFC.SDK.Configuration.XmlConfigFile.inSecurity">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.CheckIsDeveLibFrameworkConfig">
            <summary>
            检查当前配置文件是否是 BFC.SDK.config 或 BFC.FRM.config
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.#ctor(System.IO.Stream,System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="xmlStream">含配置文件内容的文件流。
            </param>
            <param name="rootNodeName">指定配置文件的根节点，如果未指定则默认为 Configuration 。</param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.#ctor(System.String,System.String)">
            <summary>
            构造函数。
            </summary>
            <param name="configFile">含配置文件名的完整路径。
            该文件必须是有效的文件路径形式，如果不存在则会自动创建。
            如果存在则会自动加载它。
            </param>
            <param name="rootNodeName">指定配置文件的根节点，如果未指定则默认为 Configuration 。</param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.#ctor(System.String)">
            <summary>
            构造函数。
            配置文件的根节点为默认值 Configuration 。
            </summary>
            <param name="configFile">含配置文件名的完整路径。
            该文件必须是有效的文件路径形式，如果不存在则会自动创建。
            如果存在则会自动加载它。		
            </param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.#ctor(System.String,System.Byte[],System.Byte[])">
            <summary>
            构造函数。
            配置文件的根节点为默认值 Configuration 。
            </summary>
            <param name="configFile">含配置文件名的完整路径。
            该文件必须是有效的文件路径形式，如果不存在则会自动创建。
            如果存在则会自动加载它。</param>
            <param name="encryptKey">使用对称加密的 Key。</param>
            <param name="encryptIv">使用对称加密的 IV 向量。</param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.#ctor(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            构造函数。
            </summary>
            <param name="configFile">含配置文件名的完整路径。
            该文件必须是有效的文件路径形式，如果不存在则会自动创建。
            如果存在则会自动加载它。</param>
            <param name="rootNodeName">指定配置文件的根节点，如果未指定则默认为 Configuration 。</param>
            <param name="encryptKey">使用对称加密的 Key。</param>
            <param name="encryptIv">使用对称加密的 IV 向量。</param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.ParseConfigSettingByConfigVariables(System.String)">
            <summary>
            解析配置文件设置，检查当前配置文件是否是 BFC.SDK.config 或 BFC.FRM.config，如果是则进行变量解析。
            </summary>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.Configuration.XmlConfigFile.FileName">
            <summary>
            取得当前的配置文件路径。
            </summary>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.FindChildNode(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            在指定 XmlNode 对象下查找特定的 XmlNode 子节点。
            </summary>
            <param name="parent">需要查找子节点的父节点。不能为空。</param>
            <param name="childNodeName">需要查找的子节点名称。不能为空。</param>
            <param name="isAutoCreate">如果未找到是否需要自动创建该子节点。</param>
            <returns>返回找到的节点对象。</returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.FindChildNodes(System.Xml.XmlNode,System.String)">
            <summary>
            在指定 XmlNode 对象下查找指定名称的所有 XmlNode 子节点集合。
            </summary>
            <param name="parent">需要查找子节点的父节点。不能为空。</param>
            <param name="childNodeName">需要查找的子节点名称。不能为空。</param>
            <returns>返回找到的节点集合。</returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.FindChildNode(System.Xml.XmlNode,System.String,System.String,System.String,System.Boolean)">
            <summary>
            在指定 XmlNode 对象下查找特定的 XmlNode 子节点。
            </summary>
            <param name="parent">需要查找子节点的父节点。不能为空。</param>
            <param name="childNodeName">需要查找的子节点名称。不能为空。</param>
            <param name="attributeName">查找的子节点需要符合特定的属性条件。</param>
            <param name="attributeValue">查找的子节点需要符合特定的属性条件。</param>
            <param name="isAutoCreate">如果未找到是否需要自动创建该子节点。</param>
            <returns>返回找到的节点对象。</returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetXmlAttribute(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            获取指定节点下的指定 XmlAttribute 对象。
            </summary>
            <param name="node"></param>
            <param name="attributeName"></param>
            <param name="isAutoCreate"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetChildCDataNodes(System.Xml.XmlNode)">
            <summary>
            获取指定节点下的所有 CDATA 值定义，如果未找到返回 null。
            </summary>
            <param name="xmlNode"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetChildCDataNode(System.Xml.XmlNode)">
            <summary>
            获取指定节点下的第一个 CDATA 值定义。
            </summary>
            <param name="xmlNode"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSectionElement(System.String,System.Boolean)">
            <summary>
            取得指定名称的 Section 节点对象。
            </summary>
            <param name="pSectionName"></param>
            <param name="isCreate"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSectionElement(System.String,System.String,System.String,System.Boolean)">
            <summary>
            取得指定名称的 Section 节点对象。
            </summary>
            <param name="pSectionName"></param>
            <param name="attributeName"></param>
            <param name="attributeValue"></param>
            <param name="isCreate"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSettingElement(System.String,System.String,System.Boolean)">
            <summary>
            取得指定名称的 Key 节点对象。
            </summary>
            <param name="pSectionName"></param>
            <param name="pKey"></param>
            <param name="isCreate"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSettingElement(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            取得指定名称的 Key 节点对象。
            </summary>
            <param name="pSectionName"></param>
            <param name="sectionAttributeName"></param>
            <param name="sectionAttributeValue"></param>
            <param name="pKey"></param>
            <param name="keyAttributeName"></param>
            <param name="keyAttributeValue"></param>
            <param name="isCreate"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSettingAttribute(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pSectionName"></param>
            <param name="pKey"></param>
            <param name="pAttribute"></param>
            <param name="isCreate"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSettingAttribute(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            取得指定名称的 Key 节点对象。
            </summary>
            <param name="pSectionName"></param>
            <param name="sectionAttributeName"></param>
            <param name="sectionAttributeValue"></param>
            <param name="pKey"></param>
            <param name="keyAttributeName"></param>
            <param name="keyAttributeValue"></param>
            <param name="findAttributeName"></param>
            <param name="isCreate"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSettings(System.String,System.String)">
            <summary>
            获取指定节下指定键的设置节点集合。
            </summary>
            <param name="pSectionName"></param>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSettings(System.Xml.XmlNode,System.String)">
            <summary>
            获取指定节下指定名称的 Xml 节点集合。
            </summary>
            <param name="sectionNode"></param>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.String,System.String)">
            <summary>
            获取指定节下指定键的设置值。
            </summary>
            <param name="pSectionName"></param>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.String,System.String,System.String)">
            <summary>
            获取指定节下指定键下指定属性的设置值。
            </summary>
            <param name="pSectionName"></param>
            <param name="pKey"></param>
            <param name="pAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.String,System.String,System.Int32)">
            <summary>
            获取指定节下指定键的设置的整型值。
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="defaultValue">如果未设置或设置值不是整型值则返回的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.String,System.String,System.Decimal)">
            <summary>
            获取指定节下指定键的设置的整型值。
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="defaultValue">如果未设置或设置值不是Decimal型值则返回的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.String,System.String,System.String,System.Int32)">
            <summary>
            获取指定节下指定键下指定属性的设置的整型值。
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="attribute"></param>
            <param name="defaultValue">如果未设置或设置值不是整型值则返回的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.String,System.String,System.String,System.Decimal)">
            <summary>
            获取指定节下指定键下指定属性的设置的整型值。
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="attribute"></param>
            <param name="defaultValue">如果未设置或设置值不是整型值则返回的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="attribute"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.Xml.XmlNode)">
            <summary>
            获取指定的设置值。
            </summary>
            <param name="settingNode">指定设置</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetCDataSetting(System.Xml.XmlNode)">
            <summary>
            获取指定节点下的第一个 CDATA 值定义。
            </summary>
            <param name="settingNode"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetCDataSetting(System.String,System.String,System.String,System.String)">
            <summary>
            获取指定 Section 和指定 Key 下的第一个 CDATA 值定义。
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="attributeName"></param>
            <param name="attributeValue"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetAllCDataSetting(System.Xml.XmlNode)">
            <summary>
            获取指定节点下的所有 CDATA 值定义。
            </summary>
            <param name="settingNode"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.Xml.XmlNode,System.Int32)">
            <summary>
            获取指定节下指定键的设置的整型值。
            </summary>
            <param name="settingNode">指定设置</param>
            <param name="defaultValue">如果未设置或设置值不是整型值则返回的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.Xml.XmlNode,System.Boolean)">
            <summary>
            
            </summary>
            <param name="settingNode">指定设置</param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.Xml.XmlNode,System.String)">
            <summary>
            获取指定节下指定属性的设置值。
            </summary>
            <param name="settingNode">指定设置</param>
            <param name="pAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            获取指定节下指定键下指定属性的设置的整型值。
            </summary>
            <param name="settingNode">指定设置</param>
            <param name="attribute"></param>
            <param name="defaultValue">如果未设置或设置值不是整型值则返回的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSetting(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="settingNode">指定设置</param>
            <param name="attribute"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSettingEx(System.Xml.XmlNode,System.String)">
            <summary>
            获取指定节下指定键的设置值。
            </summary>
            <param name="sectionNode"></param>
            <param name="pKey"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSettingEx(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            获取指定节下指定键下指定属性的设置值。
            </summary>
            <param name="sectionNode"></param>
            <param name="pKey"></param>
            <param name="pAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSettingEx(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            获取指定节下指定键的设置的整型值。
            </summary>
            <param name="sectionNode"></param>
            <param name="key"></param>
            <param name="defaultValue">如果未设置或设置值不是整型值则返回的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSettingEx(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sectionNode"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSettingEx(System.Xml.XmlNode,System.String,System.String,System.Int32)">
            <summary>
            获取指定节下指定键下指定属性的设置的整型值。
            </summary>
            <param name="sectionNode"></param>
            <param name="key"></param>
            <param name="attribute"></param>
            <param name="defaultValue">如果未设置或设置值不是整型值则返回的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetSettingEx(System.Xml.XmlNode,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sectionNode"></param>
            <param name="key"></param>
            <param name="attribute"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.SetKeySetting(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="isEncrypted"></param>
            <param name="settingValue"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.SetSetting(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="settingValue"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.SetEncryptedSetting(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="settingValue"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.SetSetting(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="attribute"></param>
            <param name="settingValue"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.SetSetting(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="settingValue"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.SetEncryptedSetting(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="settingValue"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.SetSetting(System.String,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="attribute"></param>
            <param name="settingValue"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.SetSetting(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="settingValue"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.SetEncryptedSetting(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="settingValue"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.SetSetting(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="attribute"></param>
            <param name="settingValue"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.SetSetting(System.String,System.Xml.XmlNode,System.Boolean)">
            <summary>
            将指定的设置追加进配置文件或更新原有的设置。
            </summary>
            <param name="sectionName"></param>
            <param name="settingNode"></param>
            <param name="isAppendOnly">如果为 true ，则始终追加进配置文件，否则存在更新，不存在才追加配置。</param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.SetConfigVersion(System.String)">
            <summary>
            设置配置文件版本信息。
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.GetConfigVersion">
            <summary>
            获取配置文件版本信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.Save">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.Save(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.CreateComment(System.String)">
            <summary>
            
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:BFC.SDK.Configuration.XmlConfigFile.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:BFC.SDK.ItemValue">
            <summary>
            存储 Item 和 Value 的类。
            已继承 ISerializable 接口，可序列化。
            注意：当前类对象是否可以成功（反）序列化取决于 Value 属性值是否可以（反）序列化。
            </summary>
        </member>
        <member name="P:BFC.SDK.ItemValue.ItemText">
            <summary>
            获取或设置 Item 文本。
            </summary>
        </member>
        <member name="P:BFC.SDK.ItemValue.Value">
            <summary>
            获取或设置与 Item 对应的值。
            </summary>
        </member>
        <member name="M:BFC.SDK.ItemValue.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.ItemValue.#ctor(System.String,System.Object)">
            <summary>
            构造函数。
            </summary>
            <param name="itemText">赋给 ItemText 属性的值。</param>
            <param name="_value">赋给 Value 属性的值。</param>
        </member>
        <member name="M:BFC.SDK.ItemValue.ToString">
            <summary>
            返回对象的字符串表示。
            </summary>
            <returns>ItemValue.ItemText</returns>
        </member>
        <member name="T:BFC.SDK.ItemValue`1">
            <summary>
            存储 Item 和 Value 的类。
            已继承 ISerializable 接口，可序列化。
            注意：当前类对象是否可以成功（反）序列化取决于 Value 属性值是否可以（反）序列化。
            </summary>
        </member>
        <member name="M:BFC.SDK.ItemValue`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.ItemValue`1.#ctor(System.String,`0)">
            <summary>
            构造函数。
            </summary>
            <param name="itemText">赋给 ItemText 属性的值。</param>
            <param name="_value">赋给 Value 属性的值。</param>
        </member>
        <member name="P:BFC.SDK.ItemValue`1.ItemText">
            <summary>
            获取或设置 Item 文本。
            </summary>
        </member>
        <member name="P:BFC.SDK.ItemValue`1.Value">
            <summary>
            获取或设置与 Item 对应的值。
            </summary>
        </member>
        <member name="M:BFC.SDK.ItemValue`1.ToString">
            <summary>
            返回对象的字符串表示。
            </summary>
            <returns>ItemValue.ItemText</returns>
        </member>
        <member name="T:BFC.SDK.ParamValue">
            <summary>
            参数信息类。
            已继承 ISerializable 接口，可序列化。
            注意：当前类对象是否可以成功（反）序列化取决于 Value 属性值是否可以（反）序列化。
            </summary>
        </member>
        <member name="M:BFC.SDK.ParamValue.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.ParamValue.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
        </member>
        <member name="M:BFC.SDK.ParamValue.#ctor(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
        </member>
        <member name="M:BFC.SDK.ParamValue.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            重写反序化构造函数。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:BFC.SDK.ParamValue.ParameterName">
            <summary>
            获取参数名。
            </summary>
        </member>
        <member name="P:BFC.SDK.ParamValue.Value">
            <summary>
            获取或设置参数值。
            </summary>
        </member>
        <member name="P:BFC.SDK.ParamValue.IsOut">
            <summary>
            该参数是否是输出参数。
            </summary>
        </member>
        <member name="M:BFC.SDK.ParamValue.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            对象的反序列化方法。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:BFC.SDK.StringArgumentException">
            <summary>
            当参数类型为字符类型并且参数值为 NULL 或零长度字符串时引发的异常类。
            </summary>
        </member>
        <member name="M:BFC.SDK.StringArgumentException.#ctor">
            <summary>
             初始化 BFC.SDK.StringArgumentException 类的新实例。
            </summary>
        </member>
        <member name="M:BFC.SDK.StringArgumentException.#ctor(System.String)">
            <summary>
            使用指定错误信息来初始化 BFC.SDK.StringArgumentException 类的新实例。
            </summary>
            <param name="message">解释异常原因的错误信息。</param>
        </member>
        <member name="M:BFC.SDK.StringArgumentException.#ctor(System.String,System.Exception)">
            <summary>
             使用指定的错误信息和对作为此异常原因的内部异常的引用来初始化 BFC.SDK.StringArgumentException 类的新实例。  
            </summary>
            <param name="message">解释异常原因的错误信息。 </param>
            <param name="innerException">导致当前异常的异常。如果 innerException 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
        </member>
        <member name="M:BFC.SDK.StringArgumentException.#ctor(System.String,System.String,System.Exception)">
             <summary>
              使用指定错误信息、参数名和对内部异常（为该异常根源）的引用来初始化 BFC.SDK.StringArgumentException 类的新实例。  
             </summary>
             <param name="message">解释异常原因的错误信息。 </param>
            <param name="paramName">导致当前异常的参数的名称。 </param>
             <param name="innerException">导致当前异常的异常。如果 innerException 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
        </member>
        <member name="M:BFC.SDK.StringArgumentException.#ctor(System.String,System.String)">
             <summary>
             使用指定错误信息和导致此异常的参数的名称来初始化 BFC.SDK.StringArgumentException 类的新实例。  
             </summary>
             <param name="message">解释异常原因的错误信息。 </param>
            <param name="paramName">导致当前异常的参数的名称。 </param>
        </member>
        <member name="M:BFC.SDK.StringArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            重写反序化构造函数。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:BFC.SDK.StringArgumentException.Message">
            <summary>
            获取错误信息和参数名；如果未设置参数名，则仅获取错误信息。  
            </summary>
        </member>
        <member name="M:BFC.SDK.StringArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            对象的反序列化方法。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:BFC.SDK.Diagnostics.AppTraceLog">
            <summary>
            根据 Config 文件的设置，提供详细文件 log 和事件日志的相关操作类。 
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.FileLogFormatIsSimple">
            <summary>
            文件日志格式是否以简单的行格式。
            默认值为 true。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.IsWriteTime">
            <summary>
            获取或设置在写文件日志时是否需要写入时间。
            默认值为 true。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.EnableSynchronized">
            <summary>
            获取或设置是否启用同步写入日志，默认值为 true。
            <para>如果为 false，则多个线程同时写入日志时，为了提高性能会创建新的日志文件进行记录，但缺点是高并发时日志会分散在各个日志文件中。</para>
            <para>如果设置为 true，则多个线程同时写入日志时，会进行排队写入相同的日志文件，方便查看日志。</para>
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.IsWriteProcessInfo">
            <summary>
            获取或设置在写文件 Error 日志时是否需要写入当前系统进程信息。
            注意：由于权限限制，写入时可能无法正确写入完整的系统进程信息。
            默认值为 false。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.EnableFileLog">
            <summary>
            是否启用文件日志输出。
            默认值为 false。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.FileLogDirForCurrentThread">
            <summary>
            获取或设置当前线程的日志文件夹路径。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.FileLogDir">
            <summary>
            获取或设置文件日志输出路径。
            </summary>
        </member>
        <member name="F:BFC.SDK.Diagnostics.AppTraceLog._fileNamePatternForCurrentThread">
            <summary>
            追加一个线程级别的日志文件名称设置，
            目的是为了
            1.对于 Web 应用程序中一些很费时间的批处理时可以单独记录日志文件（一个请求就是一个线程）。
            2.对于 Windows 应用程序中的单独后台线程执行很费时间的批处理时可以单独记录日志文件。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.FileNamePatternForCurrentThread">
            <summary>
            获取或设置线程级别的日志文件名称，可以使用 $appname 代替应用程序名称，使用{0}代替当前日期，例如：$appname-abc-{0}-efg。
            <para>目的是为了:</para>
            <para>1.对于 Web 应用程序中一些很费时间的批处理中设置本属性值以达到单独记录日志文件的目的（一个请求就是一个线程）。</para>
            <para>2.对于 Windows 应用程序中的单独后台线程执行很费时间的批处理时设置本属性值以达到可以单独记录日志文件的目的。</para>
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.FileNamePattern">
            <summary>
            获取或设置日志文件通配符。
            可以使用 $appname 代替应用程序名称，使用{0}代替当前日期，例如：$appname-abc-{0}-efg
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.FileLogMaxFileSize">
            <summary>
            获取文件日志的最大大小。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.EventLogSourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.EventLogMachineName">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteException(System.Exception)">
            <summary>
                Write at the Error level to the event log and/or tracing file by Exception.
                <param name="ex">The Exception to write to the log file or event log.</param>
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteException(System.Exception,System.Boolean)">
            <summary>
                Write at the Error level to the event log and/or tracing file by Exception.
            </summary>
                <param name="ex">The Exception to write to the log file or event log.</param>
                <param name="isWriteTime"></param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteException(System.Exception,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ex"></param>
            <param name="isWriteTime"></param>
            <param name="isWriteSysInfo"></param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.GetExceptionDetail(System.Exception)">
            <summary>
            取得异常信息的详细。
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteError(System.String)">
            <summary>
                Write at the Error level to the event log and/or tracing file.
                <param name="message">The text to write to the log file or event log.</param>
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteError(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="isWriteTime"></param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteError(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="isWriteTime"></param>
            <param name="isWriteSysInfo"></param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteWarning(System.String)">
            <summary>
                Write at the Warning level to the event log and/or tracing file.
                <param name="message">The text to write to the log file or event log.</param>
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteWarning(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="isWriteTime"></param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteInfo(System.String)">
            <summary>
                Write at the Info level to the event log and/or tracing file.
                <param name="message">The text to write to the log file or event log.</param>
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteInfo(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="isWriteTime"></param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteTextLog(System.Diagnostics.TraceLevel,System.String,System.Object)">
            <summary>
            将文本消息写入日志。
            </summary>
            <param name="level"></param>
            <param name="text"></param>
            <param name="state">用户自定义数据，用于传递到回调用方法中的 state 参数值。可以为 null。</param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteExceptionLog(System.Diagnostics.TraceLevel,System.Exception,System.Object)">
            <summary>
            将异常消息写入日志。
            </summary>
            <param name="level"></param>
            <param name="ex"></param>
            <param name="state">用户自定义数据，用于传递到回调用方法中的 state 参数值。可以为 null。</param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteLog(System.Diagnostics.TraceLevel,System.Diagnostics.EventLogEntryType,System.String,System.Boolean,System.Boolean)">
            <summary>
                Determine where a string needs to be written based on the
                Configuration settings and the error level.
                <param name="level">The severity of the information to be logged.</param>
                <param name="logEntryType">EventLogEntryType.</param>
                <param name="messageText">The string to be logged.</param>
                <param name="isWriteTime"></param>
                <param name="isWriteSysInfo"></param>
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteLog(System.Diagnostics.TraceLevel,System.Diagnostics.EventLogEntryType,System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
                Determine where a string needs to be written based on the
                Configuration settings and the error level.
                <param name="level">The severity of the information to be logged.</param>
                <param name="logEntryType">EventLogEntryType.</param>
                <param name="messageText">The string to be logged.</param>
                <param name="isWriteTime"></param>
                <param name="isWriteSysInfo"></param>
                <param name="state">用户自定义数据，用于传递到回调用方法中的 state 参数值。</param>
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.#cctor">
            <summary>
                Constructor for ApplicationLog.  
                <remarks>Initialize all shared variables based on the ApplicationConfigurationsettings. 
                    Called when this class is first loaded.
                </remarks>
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.GetStreamWriter(System.String@)">
            <summary>
            获取当前可写入日志的文件名，以及对应 StreamWriter 对象。
            如果是启用同步写入则返回当前配置的日志文件名，不返回 StreamWriter 对象。
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.EnableEventLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.WriteCommonEventLog(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            对于写日志过程中出现的意外错误，写入通用的应用程序事件日志中。
            </summary>
            <param name="log"></param>
            <param name="entryType"></param>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.EnableWriteThreadId">
            <summary>
            写日志时，是否需要写入当前的线程ID，以便于跟踪日志，避免各线程日志交错写入文件不方便跟踪。默认值为“true”。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.EnableErrorSendEmail">
            <summary>
            是否启用错误日志发送邮件功能。默认值为“false”。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.ErrorEmailSubject">
            <summary>
            错误日志发送邮件的主题 。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.EnableWarningSendEmail">
            <summary>
            是否启用警告日志发送邮件功能。默认值为“false”。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.WarningEmailSubject">
            <summary>
            警告日志发送邮件的主题 。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.SendEamilSetting">
            <summary>
            发送邮件的相关设置。格式如下：
            <para>
            host=smtp.infortech.com.cn;port=25;from=xxx@infortech.com.cn;to=a@infortech.com.cn;cc=b@infortech.com.cn,c@infortech.com.cn;username=user1;password=123456;subject=XXXXXX;
            </para>
            <para>
            如果密码需要加密，请在加密后的字符串前加上“encrypted:”，如：encrypted:1234adsfasdf==。
            </para>
            <para>
            使用 Inf.DevLib.Security.SimpleDataProtector.EncryptToBase64String() 方法进行加密，加密后的字符串中如有“=”使用“|”代替。
            例如加密后的密码配置为：password=encrypted:1234adsfasdf||
            </para>
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.SendEmail(System.String)">
            <summary>
            根据配置文件中的配置进行发送邮件。
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.SendEmail(System.String,System.String,System.Boolean)">
            <summary>
            根据配置文件中的配置进行发送邮件。
            </summary>
            <param name="subject"></param>
            <param name="content"></param>
            <param name="isBodyHtml"></param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Diagnostics.AppTraceLog.LogInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.LogInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.AppTraceLog.LogInfo.#ctor(System.String,System.DateTime,System.Diagnostics.TraceLevel,System.String)">
            <summary>
            
            </summary>
            <param name="logFile"></param>
            <param name="logTime"></param>
            <param name="level"></param>
            <param name="content"></param>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.LogInfo.LogFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.LogInfo.Content">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.LogInfo.LogTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.AppTraceLog.LogInfo.Level">
            <summary>
            
            </summary>
        </member>
        <member name="T:BFC.SDK.Diagnostics.WriteAppTraceLogCallbackHanlder">
            <summary>
            写日志的回调委托。
            </summary>
            <param name="level"></param>
            <param name="messageText"></param>
            <param name="logTime"></param>
            <param name="isWriteTime"></param>
        </member>
        <member name="T:BFC.SDK.Diagnostics.DevDebug">
            <summary>
            提供开发调式相关功能类。
            要启用本类除 Output 相关的方法，请将应用程序的 Config 文件中的 DevDebug.IsDebugMode 设置为 true，并且将 DevDebug.DebugFile 设置为正确的文件路径。 
            Output 相关的方法是使用 System.Diagnostics.Debug 提供的方法作出输出的。
            </summary>
        </member>
        <member name="F:BFC.SDK.Diagnostics.DevDebug.CON_CONSOLE_TIME_FORMATE">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.DevDebug.EnableDebugMode">
            <summary>
            获取或设置当前是否启用所有的调试功能。
            如果为 true 则在调用本类的方法时都会完整执行；
            如果为 false 则在调用本类的方法时将不会作任何处理操作。
            初始值该设置在 GlobalConfiguration 节中的 DevDebug.EnableDebugMode 键.
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.DevDebug.EnableConsole">
            <summary>
            获取或设置在启用调试模试状态下是否启用控制台输出。
            初始值该设置在 GlobalConfiguration 节中的 DevDebug.EnableDebugConsole 键.
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.DevDebug.EnableOutput">
            <summary>
            获取或设置在启用调试模试状态下是否启用输出窗口的输出。
            初始值该设置在 GlobalConfiguration 节中的 DevDebug.EnableDebugOutput 键.
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.DevDebug.FileNamePattern">
            <summary>
            获取或设置日志文件通配符。
            可以使用 $appname 代替应用程序名称。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.DevDebug.EnableFile">
            <summary>
            获取或设置在启用调试模试状态下是否启用输出窗口的输出。
            初始值该设置在 GlobalConfiguration 节中的 DevDebug.EnableDebugFile 键.
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.DevDebug.DebugFileDir">
            <summary>
            获取当前的调试跟踪文件存储的路径。
            该设置在 GlobalConfiguration 节中的 DevDebug.DebugFileDir Key.
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.DevDebug.DebugMaxFileSize">
            <summary>
            获取或设置当前的调试跟踪文件的最大大小（字节）(介于1024和2147483648之间)，默认值为：10485760。
            该设置在 DevLibConfiguration 节中的 DevDebug.MaxFileSize Key.
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.DevDebug.WriteTraceInfo(System.String)">
            <summary>
            将指定的信息输出到调试文件和控制台。
            </summary>
            <param name="traceText">要输出的调试信息。</param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.DevDebug.WriteTraceInfo(System.Object,System.String)">
            <summary>
            将指定的信息输出到调试文件和控制台。
            </summary>
            <param name="fromObj">输出信息所在对象。</param>
            <param name="traceText">要输出的调试信息。</param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.DevDebug.OutputTraceInfo(System.Object,System.String@)">
            <summary>
            将指定的信息显示在输出窗口中。
            只能在 Debug 模式下使用，Release 模式下无输出。
            </summary>
            <param name="fromObj">输出信息所在对象。</param>
            <param name="traceText">要输出的信息。</param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.DevDebug.WriteDataTable(System.Data.DataTable)">
            <summary>
            将指定的 DataTable 对象输出到调试文件和控制台。
            </summary>
            <param name="table">要输出的 DataTable 对象。</param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.DevDebug.OutputDataTable(System.Data.DataTable)">
            <summary>
            将指定的 DataTable 对象显示在输出窗口中。
            只能在 Debug 模式下使用，Release 模式下无输出。
            </summary>
            <param name="table">要输出的 DataTable 对象。</param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.DevDebug.WriteTraceInfoToFile(System.Object,System.String,System.String@)">
            <summary>
            将指定的信息写入指定的文件。
            </summary>
            <param name="fromObj"></param>
            <param name="file">要写入信息的文件。</param>
            <param name="traceText">要写入的调试信息。</param>
        </member>
        <member name="T:BFC.SDK.Diagnostics.DevDebug.IntervalTimeType">
            <summary>
            时间差类型。
            </summary>
        </member>
        <member name="F:BFC.SDK.Diagnostics.DevDebug.IntervalTimeType.Hour">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.Diagnostics.DevDebug.IntervalTimeType.Minute">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.Diagnostics.DevDebug.IntervalTimeType.Second">
            <summary>
            
            </summary>
        </member>
        <member name="F:BFC.SDK.Diagnostics.DevDebug.IntervalTimeType.Millisecond">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.DevDebug.TimeStart">
            <summary>
            时间计算开始。
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.DevDebug.TimeStart(System.String)">
            <summary>
            时间计算开始，并向日志写入一信息。
            </summary>
            <param name="text">要向日志写入的信息。</param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.DevDebug.TimeEnd">
            <summary>
            时间计算停止。
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.DevDebug.IntervalType">
            <summary>
            
            </summary>
        </member>
        <member name="P:BFC.SDK.Diagnostics.DevDebug.Interval">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.DevDebug.TimeEnd(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:BFC.SDK.Diagnostics.FileLog">
            <summary>
            提供通用的读写文件日志的相关类。
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.FileLog.#ctor">
            <summary>
            使用系统默认的字符集编码构造函数。
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.FileLog.#ctor(System.Text.Encoding)">
            <summary>
            使用指定的字符集编码构造实例。
            </summary>
            <param name="encoding">读写日志时使用的字符集编码。</param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.FileLog.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="logFile"></param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.FileLog.#ctor(System.Text.Encoding,System.String)">
            <summary>
            使用指定的字符集编码和日志文件路径构造实例。
            </summary>
            <param name="encoding">读写日志时使用的字符集编码。</param>
            <param name="logFile">日志文件路径。</param>
        </member>
        <member name="P:BFC.SDK.Diagnostics.FileLog.LogFile">
            <summary>
            获取或设置日志文件。
            </summary>
        </member>
        <member name="M:BFC.SDK.Diagnostics.FileLog.WriteLog(System.String,System.Boolean)">
            <summary>
            向日志文件中写入信息。
            </summary>
            <param name="text">待写入的信息。</param>
            <param name="isWriteTime">是否在写入信息前将当前时间写入。</param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.FileLog.WriteLog(System.Exception,System.Boolean)">
            <summary>
            向日志文件中写入异常信息。
            </summary>
            <param name="exception">待写入的异常。</param>
            <param name="isWriteTime">是否在写入信息前将当前时间写入。</param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.FileLog.WriteLog(System.String,System.String,System.Boolean)">
            <summary>
            向指定的文件写入日志信息。
            </summary>
            <param name="file">要写入的文件。</param>
            <param name="text">要写入的信息。</param>
            <param name="isWriteTime">是否在写入信息前记录当前时间。</param>
        </member>
        <member name="M:BFC.SDK.Diagnostics.FileLog.WriteLog(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            向指定的文件写入日志信息。
            </summary>
            <param name="file">要写入的文件。</param>
            <param name="text">要写入的信息。</param>
            <param name="encoding">写日志时使用的字符集编码。</param>
            <param name="isWriteTime">是否在写入信息前记录当前时间。</param>
        </member>
        <member name="T:BFC.SDK.Security.SecurityHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:BFC.SDK.Security.SecurityHelper.#ctor(System.Byte[],System.Byte[])">
            <summary>
            用指定的 Key 和 iv 实例化 SecurityHelper 类。
            </summary>
            <param name="key"></param>
            <param name="iv"></param>
        </member>
        <member name="M:BFC.SDK.Security.SecurityHelper.Encrypt(System.String)">
            <summary>
             
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Security.SecurityHelper.Encrypt(System.Byte[])">
            <summary>
            
            </summary>
            <param name="sourceBytes"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Security.SecurityHelper.Decrypt(System.String)">
            <summary>
            
            </summary>
            <param name="encryptedString"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Security.SecurityHelper.Decrypt(System.Byte[])">
            <summary>
            
            </summary>
            <param name="encryptedBytes"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Security.SecurityHelper.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:BFC.SDK.Security.SimpleDataProtector">
            <summary>
            简单的数据安全类。
            </summary>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.EncryptToBase64String(System.String)">
            <summary>
            将指定的字符串进行对称加密，并对加密后的结果进行 Base64 编码并返回。
            只采用了指定 Key 和 IV向量的对称加密。
            </summary>
            <param name="source">待加密的字符串。</param>
            <returns>加密后并经 Base64 编码后的字符串。</returns>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.Encrypt(System.Byte[])">
            <summary>
            将指定的 Byte 数组进行对称加密。
            只采用了指定 Key 和 IV向量的对称加密。
            </summary>
            <param name="sourceBytes">待加密的 Byte 数组。</param>
            <returns>加密后返回的 Byte 数组。</returns>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.DecryptToString(System.String)">
            <summary>
            将加密后的 Base64String 解密。
            原加密文本必须是本类采用了指定 Key 和 IV向量的对称加密的文本。
            </summary>
            <param name="encryptedBase64String">加密后的 Base64String。</param>
            <returns>解密后的 String.</returns>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.Decrypt(System.Byte[])">
            <summary>
            将加密后的 Bytes 数组解密。
            原加密字节数组必须是本类采用了指定 Key 和 IV向量的对称加密的数据。
            </summary>
            <param name="encryptedBytes">加密后的 Bytes 数组。</param>
            <returns>解密后的 Bytes 数组.</returns>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.GetFileMD5(System.String)">
            <summary>
            获取指定文件的MD5 值。
            </summary>
            <param name="file">文件的完整名称。</param>
            <returns>文件的MD5 值。</returns>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.MD5Base64(System.Byte[])">
            <summary>
            将指定字节数组进行 MD5 加密并 Base64 编码。
            </summary>
            <param name="sourceData">需要加密的字节数组。</param>
            <returns>MD5 加密并经 Base64 编码后的字符串。</returns>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.MD5Base64(System.String)">
            <summary>
            将指定的字符串进行 MD5 加密并 Base64 编码，使用的字符集代码页是 UTF-8。
            </summary>
            <param name="sourceString">需要加密的字符串。</param>
            <returns>MD5 加密并经 Base64 编码后的字符串。</returns>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.MD5Base64(System.String,System.Text.Encoding)">
            <summary>
            将指定的字符串使用指定的字符集代码页进行 MD5 加密并 Base64 编码。
            </summary>
            <param name="sourceString">需要加密的字符串。</param>
            <param name="encoding">字符集代码页。</param>
            <returns>MD5 加密并经 Base64 编码后的字符串。</returns>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.MD5Hash(System.String)">
            <summary>
            将指定的字符串计算 MD5 的哈希值，并转换为16进制字符串大写形式。
            计算 MD5 的哈希值时使用指定UTF8字符集编码进行转换字节数组
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.MD5Hash(System.String,System.Text.Encoding)">
            <summary>
            将指定的字符串计算 MD5 的哈希值，并转换为16进制字符串大写形式。
            </summary>
            <param name="source"></param>
            <param name="enc">计算 MD5 的哈希值时使用指定字符集编码进行转换字节数组</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.MD5Hash(System.Byte[])">
            <summary>
            将指定的字节数组计算 MD5 的哈希值，并转换为16进制字符串大写形式。
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.GetRandomString(System.Int32)">
            <summary>
            取得随机字符串。
            这些字符包含在：ABCDEFGHJKLMNPQRSTUVWXY23456789
            </summary>
            <param name="length">取得随机字符串长度。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.GetRandomAnyString(System.Int32)">
            <summary>
            取得任意可见随机字符串。
            这些字符串中的字符 ASCII 码介于 33~126 之间。
            </summary>
            <param name="length">取得随机字符串长度。</param>
            <returns></returns>
        </member>
        <member name="M:BFC.SDK.Security.SimpleDataProtector.GetRandomNumber(System.Int16,System.Int16)">
            <summary>
            取得随机数字。
            </summary>
            <param name="min">随机数字的最小值。</param>
            <param name="max">随机数字的最大值。</param>
            <returns></returns>
        </member>
        <member name="T:BFC.SDK.Serializer.JsonHelper">
            <summary>
            Json 操作类。
            </summary>
        </member>
        <member name="M:BFC.SDK.Serializer.JsonHelper.ConvertToJson``1(``0)">
            <summary>
            根据提供的对象生成 Json 格式的字符串。
            </summary>
            <typeparam name="T">需要生成 Json 格式的字符串的类型。</typeparam>
            <param name="obj">需要生成 Json 格式的字符串的对象。</param>
            <returns>生成Json格式的字符串。</returns>
        </member>
        <member name="M:BFC.SDK.Serializer.JsonHelper.ConvertToObject``1(System.String)">
            <summary>
            将 Json 格式的字符串转换为对象。
            </summary>
            <typeparam name="T">Json 格式的字符串转换的目标对象类型。</typeparam>
            <param name="json">需要转换的Json 格式的字符串，不能为 null 或 Empty。</param>
            <returns>转换后的对象。</returns>
        </member>
    </members>
</doc>
